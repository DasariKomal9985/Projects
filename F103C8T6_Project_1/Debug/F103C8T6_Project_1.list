
F103C8T6_Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a38c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800a4a0  0800a4a0  0000b4a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aac4  0800aac4  0000c1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aac4  0800aac4  0000bac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aacc  0800aacc  0000c1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aacc  0800aacc  0000bacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aad0  0800aad0  0000bad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800aad4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  200001f4  0800acc8  0000c1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  0800acc8  0000c790  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011488  00000000  00000000  0000c21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002825  00000000  00000000  0001d6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0001fed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7b  00000000  00000000  00020ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b5c  00000000  00000000  00021d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149d2  00000000  00000000  0003b8c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093be2  00000000  00000000  00050299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3e7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e54  00000000  00000000  000e3ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e9d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a484 	.word	0x0800a484

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800a484 	.word	0x0800a484

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <delay_us>:
#define DHT_PIN GPIO_PIN_6

extern TIM_HandleTypeDef htim2;

void delay_us(uint16_t us)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <delay_us+0x2c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 80010ee:	bf00      	nop
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <delay_us+0x2c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3f9      	bcc.n	80010f0 <delay_us+0x14>
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000294 	.word	0x20000294

0800110c <DHT_Set_Pin_Output>:

void DHT_Set_Pin_Output(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT_PIN;
 800111e:	2340      	movs	r3, #64	@ 0x40
 8001120:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2302      	movs	r3, #2
 8001128:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT_PORT, &GPIO_InitStruct);
 800112a:	463b      	mov	r3, r7
 800112c:	4619      	mov	r1, r3
 800112e:	4803      	ldr	r0, [pc, #12]	@ (800113c <DHT_Set_Pin_Output+0x30>)
 8001130:	f001 ffa4 	bl	800307c <HAL_GPIO_Init>
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40010800 	.word	0x40010800

08001140 <DHT_Set_Pin_Input>:

void DHT_Set_Pin_Input(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT_PIN;
 8001152:	2340      	movs	r3, #64	@ 0x40
 8001154:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DHT_PORT, &GPIO_InitStruct);
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4803      	ldr	r0, [pc, #12]	@ (8001170 <DHT_Set_Pin_Input+0x30>)
 8001164:	f001 ff8a 	bl	800307c <HAL_GPIO_Init>
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40010800 	.word	0x40010800

08001174 <DHT11_Read>:

uint8_t DHT11_Read(uint8_t *temp, uint8_t *hum)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
    uint8_t bits[5] = {0};
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	711a      	strb	r2, [r3, #4]
    uint8_t i, j;

    DHT_Set_Pin_Output();
 8001188:	f7ff ffc0 	bl	800110c <DHT_Set_Pin_Output>
    HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2140      	movs	r1, #64	@ 0x40
 8001190:	4853      	ldr	r0, [pc, #332]	@ (80012e0 <DHT11_Read+0x16c>)
 8001192:	f002 f90e 	bl	80033b2 <HAL_GPIO_WritePin>
    HAL_Delay(20); // 18+ ms
 8001196:	2014      	movs	r0, #20
 8001198:	f001 f960 	bl	800245c <HAL_Delay>
    HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2140      	movs	r1, #64	@ 0x40
 80011a0:	484f      	ldr	r0, [pc, #316]	@ (80012e0 <DHT11_Read+0x16c>)
 80011a2:	f002 f906 	bl	80033b2 <HAL_GPIO_WritePin>
    delay_us(30);
 80011a6:	201e      	movs	r0, #30
 80011a8:	f7ff ff98 	bl	80010dc <delay_us>
    DHT_Set_Pin_Input();
 80011ac:	f7ff ffc8 	bl	8001140 <DHT_Set_Pin_Input>

    // Wait for response
    uint32_t timeout = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 80011b4:	e009      	b.n	80011ca <DHT11_Read+0x56>
        if (++timeout > 10000) return 1;
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	3301      	adds	r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <DHT11_Read+0x56>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e085      	b.n	80012d6 <DHT11_Read+0x162>
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 80011ca:	2140      	movs	r1, #64	@ 0x40
 80011cc:	4844      	ldr	r0, [pc, #272]	@ (80012e0 <DHT11_Read+0x16c>)
 80011ce:	f002 f8d9 	bl	8003384 <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d0ee      	beq.n	80011b6 <DHT11_Read+0x42>
    timeout = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 80011dc:	e009      	b.n	80011f2 <DHT11_Read+0x7e>
        if (++timeout > 10000) return 1;
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	3301      	adds	r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d901      	bls.n	80011f2 <DHT11_Read+0x7e>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e071      	b.n	80012d6 <DHT11_Read+0x162>
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET)
 80011f2:	2140      	movs	r1, #64	@ 0x40
 80011f4:	483a      	ldr	r0, [pc, #232]	@ (80012e0 <DHT11_Read+0x16c>)
 80011f6:	f002 f8c5 	bl	8003384 <HAL_GPIO_ReadPin>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0ee      	beq.n	80011de <DHT11_Read+0x6a>
    timeout = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 8001204:	e009      	b.n	800121a <DHT11_Read+0xa6>
        if (++timeout > 10000) return 1;
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	3301      	adds	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001212:	4293      	cmp	r3, r2
 8001214:	d901      	bls.n	800121a <DHT11_Read+0xa6>
 8001216:	2301      	movs	r3, #1
 8001218:	e05d      	b.n	80012d6 <DHT11_Read+0x162>
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 800121a:	2140      	movs	r1, #64	@ 0x40
 800121c:	4830      	ldr	r0, [pc, #192]	@ (80012e0 <DHT11_Read+0x16c>)
 800121e:	f002 f8b1 	bl	8003384 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	d0ee      	beq.n	8001206 <DHT11_Read+0x92>

    // Read 5 bytes
    for (j = 0; j < 5; j++)
 8001228:	2300      	movs	r3, #0
 800122a:	75bb      	strb	r3, [r7, #22]
 800122c:	e03a      	b.n	80012a4 <DHT11_Read+0x130>
    {
        for (i = 0; i < 8; i++)
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]
 8001232:	e031      	b.n	8001298 <DHT11_Read+0x124>
        {
            while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_RESET);
 8001234:	bf00      	nop
 8001236:	2140      	movs	r1, #64	@ 0x40
 8001238:	4829      	ldr	r0, [pc, #164]	@ (80012e0 <DHT11_Read+0x16c>)
 800123a:	f002 f8a3 	bl	8003384 <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f8      	beq.n	8001236 <DHT11_Read+0xc2>
            delay_us(40);
 8001244:	2028      	movs	r0, #40	@ 0x28
 8001246:	f7ff ff49 	bl	80010dc <delay_us>
            if (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET)
 800124a:	2140      	movs	r1, #64	@ 0x40
 800124c:	4824      	ldr	r0, [pc, #144]	@ (80012e0 <DHT11_Read+0x16c>)
 800124e:	f002 f899 	bl	8003384 <HAL_GPIO_ReadPin>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	d114      	bne.n	8001282 <DHT11_Read+0x10e>
                bits[j] |= (1 << (7 - i));
 8001258:	7dbb      	ldrb	r3, [r7, #22]
 800125a:	3318      	adds	r3, #24
 800125c:	443b      	add	r3, r7
 800125e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001262:	b25a      	sxtb	r2, r3
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	b25b      	sxtb	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b25a      	sxtb	r2, r3
 8001276:	7dbb      	ldrb	r3, [r7, #22]
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	3318      	adds	r3, #24
 800127c:	443b      	add	r3, r7
 800127e:	f803 2c10 	strb.w	r2, [r3, #-16]
            while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN) == GPIO_PIN_SET);
 8001282:	bf00      	nop
 8001284:	2140      	movs	r1, #64	@ 0x40
 8001286:	4816      	ldr	r0, [pc, #88]	@ (80012e0 <DHT11_Read+0x16c>)
 8001288:	f002 f87c 	bl	8003384 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b01      	cmp	r3, #1
 8001290:	d0f8      	beq.n	8001284 <DHT11_Read+0x110>
        for (i = 0; i < 8; i++)
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	3301      	adds	r3, #1
 8001296:	75fb      	strb	r3, [r7, #23]
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	2b07      	cmp	r3, #7
 800129c:	d9ca      	bls.n	8001234 <DHT11_Read+0xc0>
    for (j = 0; j < 5; j++)
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	3301      	adds	r3, #1
 80012a2:	75bb      	strb	r3, [r7, #22]
 80012a4:	7dbb      	ldrb	r3, [r7, #22]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d9c1      	bls.n	800122e <DHT11_Read+0xba>
        }
    }

    if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) != bits[4])
 80012aa:	7a3a      	ldrb	r2, [r7, #8]
 80012ac:	7a7b      	ldrb	r3, [r7, #9]
 80012ae:	4413      	add	r3, r2
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	7abb      	ldrb	r3, [r7, #10]
 80012b4:	4413      	add	r3, r2
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	4413      	add	r3, r2
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d001      	beq.n	80012c8 <DHT11_Read+0x154>
        return 2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	e006      	b.n	80012d6 <DHT11_Read+0x162>

    *hum = bits[0];
 80012c8:	7a3a      	ldrb	r2, [r7, #8]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	701a      	strb	r2, [r3, #0]
    *temp = bits[2];
 80012ce:	7aba      	ldrb	r2, [r7, #10]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	701a      	strb	r2, [r3, #0]

    return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40010800 	.word	0x40010800

080012e4 <Read_LM35>:
void parse_GNGLL(const char *sentence);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float Read_LM35(void) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80012ea:	4812      	ldr	r0, [pc, #72]	@ (8001334 <Read_LM35+0x50>)
 80012ec:	f001 f9b2 	bl	8002654 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	480f      	ldr	r0, [pc, #60]	@ (8001334 <Read_LM35+0x50>)
 80012f6:	f001 fa5b 	bl	80027b0 <HAL_ADC_PollForConversion>
	uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 80012fa:	480e      	ldr	r0, [pc, #56]	@ (8001334 <Read_LM35+0x50>)
 80012fc:	f001 fb5e 	bl	80029bc <HAL_ADC_GetValue>
 8001300:	4603      	mov	r3, r0
 8001302:	80fb      	strh	r3, [r7, #6]
	return ((float) adc_value * 3.3f / 4095.0f) * 100.0f;
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fce4 	bl	8000cd4 <__aeabi_ui2f>
 800130c:	4603      	mov	r3, r0
 800130e:	490a      	ldr	r1, [pc, #40]	@ (8001338 <Read_LM35+0x54>)
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fd37 	bl	8000d84 <__aeabi_fmul>
 8001316:	4603      	mov	r3, r0
 8001318:	4908      	ldr	r1, [pc, #32]	@ (800133c <Read_LM35+0x58>)
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fde6 	bl	8000eec <__aeabi_fdiv>
 8001320:	4603      	mov	r3, r0
 8001322:	4907      	ldr	r1, [pc, #28]	@ (8001340 <Read_LM35+0x5c>)
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fd2d 	bl	8000d84 <__aeabi_fmul>
 800132a:	4603      	mov	r3, r0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000210 	.word	0x20000210
 8001338:	40533333 	.word	0x40533333
 800133c:	457ff000 	.word	0x457ff000
 8001340:	42c80000 	.word	0x42c80000

08001344 <GSM_SendSMS>:

void GSM_SendSMS(char *number, char *message) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b09c      	sub	sp, #112	@ 0x70
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	char cmd[100];

	// Initialize GSM Module
	HAL_UART_Transmit(&huart3, (uint8_t*) "AT\r\n", 4, 1000);
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	2204      	movs	r2, #4
 8001354:	4926      	ldr	r1, [pc, #152]	@ (80013f0 <GSM_SendSMS+0xac>)
 8001356:	4827      	ldr	r0, [pc, #156]	@ (80013f4 <GSM_SendSMS+0xb0>)
 8001358:	f004 f908 	bl	800556c <HAL_UART_Transmit>
	HAL_Delay(1000);
 800135c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001360:	f001 f87c 	bl	800245c <HAL_Delay>

	HAL_UART_Transmit(&huart3, (uint8_t*) "AT+CMGF=1\r\n", 11, 1000); // Set to text mode
 8001364:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001368:	220b      	movs	r2, #11
 800136a:	4923      	ldr	r1, [pc, #140]	@ (80013f8 <GSM_SendSMS+0xb4>)
 800136c:	4821      	ldr	r0, [pc, #132]	@ (80013f4 <GSM_SendSMS+0xb0>)
 800136e:	f004 f8fd 	bl	800556c <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001372:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001376:	f001 f871 	bl	800245c <HAL_Delay>

	// Set recipient number
	sprintf(cmd, "AT+CMGS=\"%s\"\r\n", number);
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	491e      	ldr	r1, [pc, #120]	@ (80013fc <GSM_SendSMS+0xb8>)
 8001382:	4618      	mov	r0, r3
 8001384:	f006 fa66 	bl	8007854 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) cmd, strlen(cmd), 1000);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4618      	mov	r0, r3
 800138e:	f7fe fedf 	bl	8000150 <strlen>
 8001392:	4603      	mov	r3, r0
 8001394:	b29a      	uxth	r2, r3
 8001396:	f107 010c 	add.w	r1, r7, #12
 800139a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139e:	4815      	ldr	r0, [pc, #84]	@ (80013f4 <GSM_SendSMS+0xb0>)
 80013a0:	f004 f8e4 	bl	800556c <HAL_UART_Transmit>
	HAL_Delay(1000);
 80013a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013a8:	f001 f858 	bl	800245c <HAL_Delay>

	// Send message content
	HAL_UART_Transmit(&huart3, (uint8_t*) message, strlen(message), 1000);
 80013ac:	6838      	ldr	r0, [r7, #0]
 80013ae:	f7fe fecf 	bl	8000150 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ba:	6839      	ldr	r1, [r7, #0]
 80013bc:	480d      	ldr	r0, [pc, #52]	@ (80013f4 <GSM_SendSMS+0xb0>)
 80013be:	f004 f8d5 	bl	800556c <HAL_UART_Transmit>
	HAL_Delay(500);
 80013c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013c6:	f001 f849 	bl	800245c <HAL_Delay>

	// Send Ctrl+Z to send the SMS
	uint8_t end_code = 0x1A; // ASCII for Ctrl+Z
 80013ca:	231a      	movs	r3, #26
 80013cc:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(&huart3, &end_code, 1, 1000);
 80013ce:	f107 010b 	add.w	r1, r7, #11
 80013d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d6:	2201      	movs	r2, #1
 80013d8:	4806      	ldr	r0, [pc, #24]	@ (80013f4 <GSM_SendSMS+0xb0>)
 80013da:	f004 f8c7 	bl	800556c <HAL_UART_Transmit>

	HAL_Delay(3000); // Wait until SMS is sent
 80013de:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80013e2:	f001 f83b 	bl	800245c <HAL_Delay>
}
 80013e6:	bf00      	nop
 80013e8:	3770      	adds	r7, #112	@ 0x70
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	0800a4a0 	.word	0x0800a4a0
 80013f4:	2000036c 	.word	0x2000036c
 80013f8:	0800a4a8 	.word	0x0800a4a8
 80013fc:	0800a4b4 	.word	0x0800a4b4

08001400 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001402:	b08b      	sub	sp, #44	@ 0x2c
 8001404:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001406:	f000 ffc7 	bl	8002398 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800140a:	f000 fa7d 	bl	8001908 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800140e:	f000 fc0d 	bl	8001c2c <MX_GPIO_Init>
	MX_TIM2_Init();
 8001412:	f000 fb41 	bl	8001a98 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001416:	f000 fb8b 	bl	8001b30 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 800141a:	f000 fad1 	bl	80019c0 <MX_ADC1_Init>
	MX_I2C1_Init();
 800141e:	f000 fb0d 	bl	8001a3c <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8001422:	f000 fbaf 	bl	8001b84 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001426:	f000 fbd7 	bl	8001bd8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 800142a:	4871      	ldr	r0, [pc, #452]	@ (80015f0 <main+0x1f0>)
 800142c:	f003 fdda 	bl	8004fe4 <HAL_TIM_Base_Start>
	HAL_ADC_Start(&hadc1);
 8001430:	4870      	ldr	r0, [pc, #448]	@ (80015f4 <main+0x1f4>)
 8001432:	f001 f90f 	bl	8002654 <HAL_ADC_Start>
	MAX30102_Init(&hi2c1);
 8001436:	4870      	ldr	r0, [pc, #448]	@ (80015f8 <main+0x1f8>)
 8001438:	f000 fcb8 	bl	8001dac <MAX30102_Init>
	HAL_UART_Transmit(&huart1, (uint8_t*) "Hello from STM32 UART1\r\n", 25,
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	2219      	movs	r2, #25
 8001442:	496e      	ldr	r1, [pc, #440]	@ (80015fc <main+0x1fc>)
 8001444:	486e      	ldr	r0, [pc, #440]	@ (8001600 <main+0x200>)
 8001446:	f004 f891 	bl	800556c <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);  // Start GPS reception
 800144a:	2201      	movs	r2, #1
 800144c:	496d      	ldr	r1, [pc, #436]	@ (8001604 <main+0x204>)
 800144e:	486e      	ldr	r0, [pc, #440]	@ (8001608 <main+0x208>)
 8001450:	f004 f917 	bl	8005682 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET) {
 8001454:	2120      	movs	r1, #32
 8001456:	486d      	ldr	r0, [pc, #436]	@ (800160c <main+0x20c>)
 8001458:	f001 ff94 	bl	8003384 <HAL_GPIO_ReadPin>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f8      	bne.n	8001454 <main+0x54>
			// Read DHT11
			uint8_t success = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
			for (int i = 0; i < 3; i++) {
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	e00f      	b.n	800148c <main+0x8c>
				if (DHT11_Read(&temp, &hum) == 0) {
 800146c:	4968      	ldr	r1, [pc, #416]	@ (8001610 <main+0x210>)
 800146e:	4869      	ldr	r0, [pc, #420]	@ (8001614 <main+0x214>)
 8001470:	f7ff fe80 	bl	8001174 <DHT11_Read>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <main+0x80>
					success = 1;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
					break;
 800147e:	e008      	b.n	8001492 <main+0x92>
				}
				HAL_Delay(100);
 8001480:	2064      	movs	r0, #100	@ 0x64
 8001482:	f000 ffeb 	bl	800245c <HAL_Delay>
			for (int i = 0; i < 3; i++) {
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	3301      	adds	r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b02      	cmp	r3, #2
 8001490:	ddec      	ble.n	800146c <main+0x6c>
			}

			if (success) {
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d014      	beq.n	80014c2 <main+0xc2>
				sprintf(uart_buf, "DHT11 -> Temp: %d°C  Humidity: %d%%\r\n",
 8001498:	4b5e      	ldr	r3, [pc, #376]	@ (8001614 <main+0x214>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b5c      	ldr	r3, [pc, #368]	@ (8001610 <main+0x210>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	495d      	ldr	r1, [pc, #372]	@ (8001618 <main+0x218>)
 80014a4:	485d      	ldr	r0, [pc, #372]	@ (800161c <main+0x21c>)
 80014a6:	f006 f9d5 	bl	8007854 <siprintf>
						temp, hum);
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buf,
						strlen(uart_buf), HAL_MAX_DELAY);
 80014aa:	485c      	ldr	r0, [pc, #368]	@ (800161c <main+0x21c>)
 80014ac:	f7fe fe50 	bl	8000150 <strlen>
 80014b0:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buf,
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	4958      	ldr	r1, [pc, #352]	@ (800161c <main+0x21c>)
 80014ba:	4851      	ldr	r0, [pc, #324]	@ (8001600 <main+0x200>)
 80014bc:	f004 f856 	bl	800556c <HAL_UART_Transmit>
 80014c0:	e00c      	b.n	80014dc <main+0xdc>
			} else {
				char *err = "DHT11 Error\r\n";
 80014c2:	4b57      	ldr	r3, [pc, #348]	@ (8001620 <main+0x220>)
 80014c4:	607b      	str	r3, [r7, #4]
				HAL_UART_Transmit(&huart1, (uint8_t*) err, strlen(err),
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7fe fe42 	bl	8000150 <strlen>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	484a      	ldr	r0, [pc, #296]	@ (8001600 <main+0x200>)
 80014d8:	f004 f848 	bl	800556c <HAL_UART_Transmit>
						HAL_MAX_DELAY);
			}

			// Read MAX30102
			MAX30102_ReadFIFO(&hi2c1, &red, &ir);
 80014dc:	4a51      	ldr	r2, [pc, #324]	@ (8001624 <main+0x224>)
 80014de:	4952      	ldr	r1, [pc, #328]	@ (8001628 <main+0x228>)
 80014e0:	4845      	ldr	r0, [pc, #276]	@ (80015f8 <main+0x1f8>)
 80014e2:	f000 fc25 	bl	8001d30 <MAX30102_ReadFIFO>
			sprintf(uart_buffer, "MAX30102 - RED: %lu, IR: %lu\r\n", red, ir);
 80014e6:	4b50      	ldr	r3, [pc, #320]	@ (8001628 <main+0x228>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001624 <main+0x224>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	494f      	ldr	r1, [pc, #316]	@ (800162c <main+0x22c>)
 80014f0:	484f      	ldr	r0, [pc, #316]	@ (8001630 <main+0x230>)
 80014f2:	f006 f9af 	bl	8007854 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer,
					strlen(uart_buffer), HAL_MAX_DELAY);
 80014f6:	484e      	ldr	r0, [pc, #312]	@ (8001630 <main+0x230>)
 80014f8:	f7fe fe2a 	bl	8000150 <strlen>
 80014fc:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer,
 80014fe:	b29a      	uxth	r2, r3
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
 8001504:	494a      	ldr	r1, [pc, #296]	@ (8001630 <main+0x230>)
 8001506:	483e      	ldr	r0, [pc, #248]	@ (8001600 <main+0x200>)
 8001508:	f004 f830 	bl	800556c <HAL_UART_Transmit>

			// Read LM35
			tempC = Read_LM35();
 800150c:	f7ff feea 	bl	80012e4 <Read_LM35>
 8001510:	4603      	mov	r3, r0
 8001512:	4a48      	ldr	r2, [pc, #288]	@ (8001634 <main+0x234>)
 8001514:	6013      	str	r3, [r2, #0]
			sprintf(uart_buf, "LM35  -> Temp: %.2f°C\r\n", tempC);
 8001516:	4b47      	ldr	r3, [pc, #284]	@ (8001634 <main+0x234>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7fe ff84 	bl	8000428 <__aeabi_f2d>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4944      	ldr	r1, [pc, #272]	@ (8001638 <main+0x238>)
 8001526:	483d      	ldr	r0, [pc, #244]	@ (800161c <main+0x21c>)
 8001528:	f006 f994 	bl	8007854 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) uart_buf, strlen(uart_buf),
 800152c:	483b      	ldr	r0, [pc, #236]	@ (800161c <main+0x21c>)
 800152e:	f7fe fe0f 	bl	8000150 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	4938      	ldr	r1, [pc, #224]	@ (800161c <main+0x21c>)
 800153c:	4830      	ldr	r0, [pc, #192]	@ (8001600 <main+0x200>)
 800153e:	f004 f815 	bl	800556c <HAL_UART_Transmit>
					HAL_MAX_DELAY);

			// Check and parse GPS if ready
			if (gps_ready) {
 8001542:	4b3e      	ldr	r3, [pc, #248]	@ (800163c <main+0x23c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00e      	beq.n	800156a <main+0x16a>
				gps_ready = 0;
 800154c:	4b3b      	ldr	r3, [pc, #236]	@ (800163c <main+0x23c>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
				if (strncmp(gps_buffer, "$GNGLL", 6) == 0) {
 8001552:	2206      	movs	r2, #6
 8001554:	493a      	ldr	r1, [pc, #232]	@ (8001640 <main+0x240>)
 8001556:	483b      	ldr	r0, [pc, #236]	@ (8001644 <main+0x244>)
 8001558:	f006 f9e9 	bl	800792e <strncmp>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10a      	bne.n	8001578 <main+0x178>
					parse_GNGLL(gps_buffer);  // Updates latitude and longitude
 8001562:	4838      	ldr	r0, [pc, #224]	@ (8001644 <main+0x244>)
 8001564:	f000 f8ba 	bl	80016dc <parse_GNGLL>
 8001568:	e006      	b.n	8001578 <main+0x178>
				}
			} else {
				HAL_UART_Transmit(&huart1,
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	2219      	movs	r2, #25
 8001570:	4935      	ldr	r1, [pc, #212]	@ (8001648 <main+0x248>)
 8001572:	4823      	ldr	r0, [pc, #140]	@ (8001600 <main+0x200>)
 8001574:	f003 fffa 	bl	800556c <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				// leave latitude/longitude as "NA"
			}

			// Compose and send SMS always, even without GPS
			sprintf(sms,
 8001578:	4b26      	ldr	r3, [pc, #152]	@ (8001614 <main+0x214>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461d      	mov	r5, r3
 800157e:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <main+0x210>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461e      	mov	r6, r3
 8001584:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <main+0x234>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ff4d 	bl	8000428 <__aeabi_f2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4925      	ldr	r1, [pc, #148]	@ (8001628 <main+0x228>)
 8001594:	6809      	ldr	r1, [r1, #0]
 8001596:	4823      	ldr	r0, [pc, #140]	@ (8001624 <main+0x224>)
 8001598:	6800      	ldr	r0, [r0, #0]
 800159a:	4c2c      	ldr	r4, [pc, #176]	@ (800164c <main+0x24c>)
 800159c:	9405      	str	r4, [sp, #20]
 800159e:	4c2c      	ldr	r4, [pc, #176]	@ (8001650 <main+0x250>)
 80015a0:	9404      	str	r4, [sp, #16]
 80015a2:	9003      	str	r0, [sp, #12]
 80015a4:	9102      	str	r1, [sp, #8]
 80015a6:	e9cd 2300 	strd	r2, r3, [sp]
 80015aa:	4633      	mov	r3, r6
 80015ac:	462a      	mov	r2, r5
 80015ae:	4929      	ldr	r1, [pc, #164]	@ (8001654 <main+0x254>)
 80015b0:	4829      	ldr	r0, [pc, #164]	@ (8001658 <main+0x258>)
 80015b2:	f006 f94f 	bl	8007854 <siprintf>
					"DHT11: T=%dC H=%d%%\nLM35: %.2fC\nMAX30102: RED=%lu IR=%lu\nGPS: Lat=%s Lon=%s",
					temp, hum, tempC, red, ir, latitude, longitude);

			HAL_UART_Transmit(&huart1, (uint8_t*) sms, strlen(sms),
 80015b6:	4828      	ldr	r0, [pc, #160]	@ (8001658 <main+0x258>)
 80015b8:	f7fe fdca 	bl	8000150 <strlen>
 80015bc:	4603      	mov	r3, r0
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295
 80015c4:	4924      	ldr	r1, [pc, #144]	@ (8001658 <main+0x258>)
 80015c6:	480e      	ldr	r0, [pc, #56]	@ (8001600 <main+0x200>)
 80015c8:	f003 ffd0 	bl	800556c <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			GSM_SendSMS("+919985798499", sms);
 80015cc:	4922      	ldr	r1, [pc, #136]	@ (8001658 <main+0x258>)
 80015ce:	4823      	ldr	r0, [pc, #140]	@ (800165c <main+0x25c>)
 80015d0:	f7ff feb8 	bl	8001344 <GSM_SendSMS>

			while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET)
 80015d4:	bf00      	nop
 80015d6:	2120      	movs	r1, #32
 80015d8:	480c      	ldr	r0, [pc, #48]	@ (800160c <main+0x20c>)
 80015da:	f001 fed3 	bl	8003384 <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f8      	beq.n	80015d6 <main+0x1d6>
				;
			HAL_Delay(300);
 80015e4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015e8:	f000 ff38 	bl	800245c <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET) {
 80015ec:	e732      	b.n	8001454 <main+0x54>
 80015ee:	bf00      	nop
 80015f0:	20000294 	.word	0x20000294
 80015f4:	20000210 	.word	0x20000210
 80015f8:	20000240 	.word	0x20000240
 80015fc:	0800a4c4 	.word	0x0800a4c4
 8001600:	200002dc 	.word	0x200002dc
 8001604:	2000050d 	.word	0x2000050d
 8001608:	20000324 	.word	0x20000324
 800160c:	40010800 	.word	0x40010800
 8001610:	200003b5 	.word	0x200003b5
 8001614:	200003b4 	.word	0x200003b4
 8001618:	0800a4e0 	.word	0x0800a4e0
 800161c:	200003b8 	.word	0x200003b8
 8001620:	0800a508 	.word	0x0800a508
 8001624:	20000424 	.word	0x20000424
 8001628:	20000420 	.word	0x20000420
 800162c:	0800a518 	.word	0x0800a518
 8001630:	20000428 	.word	0x20000428
 8001634:	2000041c 	.word	0x2000041c
 8001638:	0800a538 	.word	0x0800a538
 800163c:	2000050c 	.word	0x2000050c
 8001640:	0800a554 	.word	0x0800a554
 8001644:	2000048c 	.word	0x2000048c
 8001648:	0800a55c 	.word	0x0800a55c
 800164c:	20000010 	.word	0x20000010
 8001650:	20000000 	.word	0x20000000
 8001654:	0800a578 	.word	0x0800a578
 8001658:	20000510 	.word	0x20000510
 800165c:	0800a5c4 	.word	0x0800a5c4

08001660 <HAL_UART_RxCpltCallback>:
/**
 * @brief System Clock Configuration
 * @retval None
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a15      	ldr	r2, [pc, #84]	@ (80016c4 <HAL_UART_RxCpltCallback+0x64>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d124      	bne.n	80016bc <HAL_UART_RxCpltCallback+0x5c>
		if (rx_index < sizeof(gps_buffer) - 1) {
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <HAL_UART_RxCpltCallback+0x68>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b7e      	cmp	r3, #126	@ 0x7e
 8001678:	d81b      	bhi.n	80016b2 <HAL_UART_RxCpltCallback+0x52>
			if (rx_data == '\n') {
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <HAL_UART_RxCpltCallback+0x6c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b0a      	cmp	r3, #10
 8001680:	d10c      	bne.n	800169c <HAL_UART_RxCpltCallback+0x3c>
				gps_buffer[rx_index] = '\0';
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_UART_RxCpltCallback+0x68>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <HAL_UART_RxCpltCallback+0x70>)
 800168a:	2100      	movs	r1, #0
 800168c:	5499      	strb	r1, [r3, r2]
				gps_ready = 1;
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <HAL_UART_RxCpltCallback+0x74>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
				rx_index = 0;
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <HAL_UART_RxCpltCallback+0x68>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e00a      	b.n	80016b2 <HAL_UART_RxCpltCallback+0x52>
			} else {
				gps_buffer[rx_index++] = rx_data;
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <HAL_UART_RxCpltCallback+0x68>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	b2d1      	uxtb	r1, r2
 80016a4:	4a08      	ldr	r2, [pc, #32]	@ (80016c8 <HAL_UART_RxCpltCallback+0x68>)
 80016a6:	7011      	strb	r1, [r2, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <HAL_UART_RxCpltCallback+0x6c>)
 80016ac:	7819      	ldrb	r1, [r3, #0]
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <HAL_UART_RxCpltCallback+0x70>)
 80016b0:	5499      	strb	r1, [r3, r2]
			}
		}
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);  // Continue reception
 80016b2:	2201      	movs	r2, #1
 80016b4:	4905      	ldr	r1, [pc, #20]	@ (80016cc <HAL_UART_RxCpltCallback+0x6c>)
 80016b6:	4808      	ldr	r0, [pc, #32]	@ (80016d8 <HAL_UART_RxCpltCallback+0x78>)
 80016b8:	f003 ffe3 	bl	8005682 <HAL_UART_Receive_IT>
	}
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40004400 	.word	0x40004400
 80016c8:	2000050e 	.word	0x2000050e
 80016cc:	2000050d 	.word	0x2000050d
 80016d0:	2000048c 	.word	0x2000048c
 80016d4:	2000050c 	.word	0x2000050c
 80016d8:	20000324 	.word	0x20000324

080016dc <parse_GNGLL>:

void parse_GNGLL(const char *sentence) {
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b0db      	sub	sp, #364	@ 0x16c
 80016e0:	af04      	add	r7, sp, #16
 80016e2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80016e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016ea:	6018      	str	r0, [r3, #0]
	char buffer[128];
	strcpy(buffer, sentence);
 80016ec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80016f0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016f4:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 80016f8:	6819      	ldr	r1, [r3, #0]
 80016fa:	4610      	mov	r0, r2
 80016fc:	f006 f9fd 	bl	8007afa <strcpy>

	char *token;
	char *fields[10] = { 0 };
 8001700:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001704:	2228      	movs	r2, #40	@ 0x28
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f006 f908 	bl	800791e <memset>
	int i = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

	token = strtok(buffer, ",");
 8001714:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001718:	4973      	ldr	r1, [pc, #460]	@ (80018e8 <parse_GNGLL+0x20c>)
 800171a:	4618      	mov	r0, r3
 800171c:	f006 f91a 	bl	8007954 <strtok>
 8001720:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
	while (token && i < 10) {
 8001724:	e012      	b.n	800174c <parse_GNGLL+0x70>
		fields[i++] = token;
 8001726:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001736:	443b      	add	r3, r7
 8001738:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 800173c:	f843 2cd0 	str.w	r2, [r3, #-208]
		token = strtok(NULL, ",");
 8001740:	4969      	ldr	r1, [pc, #420]	@ (80018e8 <parse_GNGLL+0x20c>)
 8001742:	2000      	movs	r0, #0
 8001744:	f006 f906 	bl	8007954 <strtok>
 8001748:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
	while (token && i < 10) {
 800174c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <parse_GNGLL+0x80>
 8001754:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001758:	2b09      	cmp	r3, #9
 800175a:	dde4      	ble.n	8001726 <parse_GNGLL+0x4a>
	}

	if (i < 6 || !fields[1] || !fields[3])
 800175c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001760:	2b05      	cmp	r3, #5
 8001762:	f340 80bc 	ble.w	80018de <parse_GNGLL+0x202>
 8001766:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80b7 	beq.w	80018de <parse_GNGLL+0x202>
 8001770:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80b2 	beq.w	80018de <parse_GNGLL+0x202>
		return;

	float raw_lat = atof(fields[1]);
 800177a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800177e:	4618      	mov	r0, r3
 8001780:	f004 fd0e 	bl	80061a0 <atof>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff f99c 	bl	8000ac8 <__aeabi_d2f>
 8001790:	4603      	mov	r3, r0
 8001792:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	float raw_lon = atof(fields[3]);
 8001796:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800179a:	4618      	mov	r0, r3
 800179c:	f004 fd00 	bl	80061a0 <atof>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff f98e 	bl	8000ac8 <__aeabi_d2f>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

	int lat_deg = (int) (raw_lat / 100);
 80017b2:	494e      	ldr	r1, [pc, #312]	@ (80018ec <parse_GNGLL+0x210>)
 80017b4:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 80017b8:	f7ff fb98 	bl	8000eec <__aeabi_fdiv>
 80017bc:	4603      	mov	r3, r0
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fc30 	bl	8001024 <__aeabi_f2iz>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	float lat_min = raw_lat - (lat_deg * 100);
 80017ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80017ce:	2264      	movs	r2, #100	@ 0x64
 80017d0:	fb02 f303 	mul.w	r3, r2, r3
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fa81 	bl	8000cdc <__aeabi_i2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	4619      	mov	r1, r3
 80017de:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 80017e2:	f7ff f9c5 	bl	8000b70 <__aeabi_fsub>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	float lat_decimal = lat_deg + (lat_min / 60.0f);
 80017ec:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 80017f0:	f7ff fa74 	bl	8000cdc <__aeabi_i2f>
 80017f4:	4604      	mov	r4, r0
 80017f6:	493e      	ldr	r1, [pc, #248]	@ (80018f0 <parse_GNGLL+0x214>)
 80017f8:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 80017fc:	f7ff fb76 	bl	8000eec <__aeabi_fdiv>
 8001800:	4603      	mov	r3, r0
 8001802:	4619      	mov	r1, r3
 8001804:	4620      	mov	r0, r4
 8001806:	f7ff f9b5 	bl	8000b74 <__addsf3>
 800180a:	4603      	mov	r3, r0
 800180c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

	int lon_deg = (int) (raw_lon / 100);
 8001810:	4936      	ldr	r1, [pc, #216]	@ (80018ec <parse_GNGLL+0x210>)
 8001812:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8001816:	f7ff fb69 	bl	8000eec <__aeabi_fdiv>
 800181a:	4603      	mov	r3, r0
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fc01 	bl	8001024 <__aeabi_f2iz>
 8001822:	4603      	mov	r3, r0
 8001824:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	float lon_min = raw_lon - (lon_deg * 100);
 8001828:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800182c:	2264      	movs	r2, #100	@ 0x64
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fa52 	bl	8000cdc <__aeabi_i2f>
 8001838:	4603      	mov	r3, r0
 800183a:	4619      	mov	r1, r3
 800183c:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8001840:	f7ff f996 	bl	8000b70 <__aeabi_fsub>
 8001844:	4603      	mov	r3, r0
 8001846:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	float lon_decimal = lon_deg + (lon_min / 60.0f);
 800184a:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800184e:	f7ff fa45 	bl	8000cdc <__aeabi_i2f>
 8001852:	4604      	mov	r4, r0
 8001854:	4926      	ldr	r1, [pc, #152]	@ (80018f0 <parse_GNGLL+0x214>)
 8001856:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800185a:	f7ff fb47 	bl	8000eec <__aeabi_fdiv>
 800185e:	4603      	mov	r3, r0
 8001860:	4619      	mov	r1, r3
 8001862:	4620      	mov	r0, r4
 8001864:	f7ff f986 	bl	8000b74 <__addsf3>
 8001868:	4603      	mov	r3, r0
 800186a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	snprintf(latitude, sizeof(latitude), "%.5f%s", lat_decimal, fields[2]);
 800186e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8001872:	f7fe fdd9 	bl	8000428 <__aeabi_f2d>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800187e:	9102      	str	r1, [sp, #8]
 8001880:	e9cd 2300 	strd	r2, r3, [sp]
 8001884:	4a1b      	ldr	r2, [pc, #108]	@ (80018f4 <parse_GNGLL+0x218>)
 8001886:	2110      	movs	r1, #16
 8001888:	481b      	ldr	r0, [pc, #108]	@ (80018f8 <parse_GNGLL+0x21c>)
 800188a:	f005 ffad 	bl	80077e8 <sniprintf>
	snprintf(longitude, sizeof(longitude), "%.5f%s", lon_decimal, fields[4]);
 800188e:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001892:	f7fe fdc9 	bl	8000428 <__aeabi_f2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800189e:	9102      	str	r1, [sp, #8]
 80018a0:	e9cd 2300 	strd	r2, r3, [sp]
 80018a4:	4a13      	ldr	r2, [pc, #76]	@ (80018f4 <parse_GNGLL+0x218>)
 80018a6:	2110      	movs	r1, #16
 80018a8:	4814      	ldr	r0, [pc, #80]	@ (80018fc <parse_GNGLL+0x220>)
 80018aa:	f005 ff9d 	bl	80077e8 <sniprintf>

	char result[128];
	snprintf(result, sizeof(result), "Latitude: %s\r\nLongitude: %s\r\n\r\n",
 80018ae:	f107 0008 	add.w	r0, r7, #8
 80018b2:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <parse_GNGLL+0x220>)
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <parse_GNGLL+0x21c>)
 80018b8:	4a11      	ldr	r2, [pc, #68]	@ (8001900 <parse_GNGLL+0x224>)
 80018ba:	2180      	movs	r1, #128	@ 0x80
 80018bc:	f005 ff94 	bl	80077e8 <sniprintf>
			latitude, longitude);
	HAL_UART_Transmit(&huart1, (uint8_t*) result, strlen(result),
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fc43 	bl	8000150 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f107 0108 	add.w	r1, r7, #8
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	480b      	ldr	r0, [pc, #44]	@ (8001904 <parse_GNGLL+0x228>)
 80018d8:	f003 fe48 	bl	800556c <HAL_UART_Transmit>
 80018dc:	e000      	b.n	80018e0 <parse_GNGLL+0x204>
		return;
 80018de:	bf00      	nop
	HAL_MAX_DELAY);
}
 80018e0:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}
 80018e8:	0800a5d4 	.word	0x0800a5d4
 80018ec:	42c80000 	.word	0x42c80000
 80018f0:	42700000 	.word	0x42700000
 80018f4:	0800a5d8 	.word	0x0800a5d8
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000010 	.word	0x20000010
 8001900:	0800a5e0 	.word	0x0800a5e0
 8001904:	200002dc 	.word	0x200002dc

08001908 <SystemClock_Config>:

void SystemClock_Config(void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b094      	sub	sp, #80	@ 0x50
 800190c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800190e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001912:	2228      	movs	r2, #40	@ 0x28
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f006 f801 	bl	800791e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001938:	2301      	movs	r3, #1
 800193a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800193c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001946:	2301      	movs	r3, #1
 8001948:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194a:	2302      	movs	r3, #2
 800194c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800194e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001952:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001954:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001958:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800195a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800195e:	4618      	mov	r0, r3
 8001960:	f002 fd74 	bl	800444c <HAL_RCC_OscConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0x66>
		Error_Handler();
 800196a:	f000 f9c1 	bl	8001cf0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800196e:	230f      	movs	r3, #15
 8001970:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001972:	2302      	movs	r3, #2
 8001974:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800197a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800197e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2102      	movs	r1, #2
 800198a:	4618      	mov	r0, r3
 800198c:	f002 ffe0 	bl	8004950 <HAL_RCC_ClockConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <SystemClock_Config+0x92>
		Error_Handler();
 8001996:	f000 f9ab 	bl	8001cf0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800199a:	2302      	movs	r3, #2
 800199c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800199e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019a2:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 f960 	bl	8004c6c <HAL_RCCEx_PeriphCLKConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <SystemClock_Config+0xae>
		Error_Handler();
 80019b2:	f000 f99d 	bl	8001cf0 <Error_Handler>
	}
}
 80019b6:	bf00      	nop
 80019b8:	3750      	adds	r7, #80	@ 0x50
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80019d0:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <MX_ADC1_Init+0x74>)
 80019d2:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <MX_ADC1_Init+0x78>)
 80019d4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019d6:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <MX_ADC1_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80019dc:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <MX_ADC1_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019e2:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <MX_ADC1_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <MX_ADC1_Init+0x74>)
 80019ea:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80019ee:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019f0:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <MX_ADC1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <MX_ADC1_Init+0x74>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80019fc:	480d      	ldr	r0, [pc, #52]	@ (8001a34 <MX_ADC1_Init+0x74>)
 80019fe:	f000 fd51 	bl	80024a4 <HAL_ADC_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001a08:	f000 f972 	bl	8001cf0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8001a0c:	2307      	movs	r3, #7
 8001a0e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a10:	2301      	movs	r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001a14:	2307      	movs	r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <MX_ADC1_Init+0x74>)
 8001a1e:	f000 ffd9 	bl	80029d4 <HAL_ADC_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001a28:	f000 f962 	bl	8001cf0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000210 	.word	0x20000210
 8001a38:	40012400 	.word	0x40012400

08001a3c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001a40:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <MX_I2C1_Init+0x50>)
 8001a42:	4a13      	ldr	r2, [pc, #76]	@ (8001a90 <MX_I2C1_Init+0x54>)
 8001a44:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001a46:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <MX_I2C1_Init+0x50>)
 8001a48:	4a12      	ldr	r2, [pc, #72]	@ (8001a94 <MX_I2C1_Init+0x58>)
 8001a4a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <MX_I2C1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <MX_I2C1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <MX_I2C1_Init+0x50>)
 8001a5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a5e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <MX_I2C1_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001a66:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <MX_I2C1_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <MX_I2C1_Init+0x50>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a72:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <MX_I2C1_Init+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001a78:	4804      	ldr	r0, [pc, #16]	@ (8001a8c <MX_I2C1_Init+0x50>)
 8001a7a:	f001 fcb3 	bl	80033e4 <HAL_I2C_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001a84:	f000 f934 	bl	8001cf0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000240 	.word	0x20000240
 8001a90:	40005400 	.word	0x40005400
 8001a94:	000186a0 	.word	0x000186a0

08001a98 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001aac:	463b      	mov	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <MX_TIM2_Init+0x94>)
 8001ab6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aba:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 71;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <MX_TIM2_Init+0x94>)
 8001abe:	2247      	movs	r2, #71	@ 0x47
 8001ac0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <MX_TIM2_Init+0x94>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <MX_TIM2_Init+0x94>)
 8001aca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ace:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <MX_TIM2_Init+0x94>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <MX_TIM2_Init+0x94>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001adc:	4813      	ldr	r0, [pc, #76]	@ (8001b2c <MX_TIM2_Init+0x94>)
 8001ade:	f003 fa31 	bl	8004f44 <HAL_TIM_Base_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM2_Init+0x54>
		Error_Handler();
 8001ae8:	f000 f902 	bl	8001cf0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	4619      	mov	r1, r3
 8001af8:	480c      	ldr	r0, [pc, #48]	@ (8001b2c <MX_TIM2_Init+0x94>)
 8001afa:	f003 fabd 	bl	8005078 <HAL_TIM_ConfigClockSource>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM2_Init+0x70>
		Error_Handler();
 8001b04:	f000 f8f4 	bl	8001cf0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001b10:	463b      	mov	r3, r7
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <MX_TIM2_Init+0x94>)
 8001b16:	f003 fc7b 	bl	8005410 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001b20:	f000 f8e6 	bl	8001cf0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000294 	.word	0x20000294

08001b30 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001b34:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	@ (8001b80 <MX_USART1_UART_Init+0x50>)
 8001b38:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b40:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b56:	220c      	movs	r2, #12
 8001b58:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001b66:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b68:	f003 fcb0 	bl	80054cc <HAL_UART_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001b72:	f000 f8bd 	bl	8001cf0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200002dc 	.word	0x200002dc
 8001b80:	40013800 	.word	0x40013800

08001b84 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001b88:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	@ (8001bd4 <MX_USART2_UART_Init+0x50>)
 8001b8c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001b90:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b94:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001baa:	220c      	movs	r2, #12
 8001bac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001bba:	4805      	ldr	r0, [pc, #20]	@ (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001bbc:	f003 fc86 	bl	80054cc <HAL_UART_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001bc6:	f000 f893 	bl	8001cf0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000324 	.word	0x20000324
 8001bd4:	40004400 	.word	0x40004400

08001bd8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	@ (8001c24 <MX_USART3_UART_Init+0x4c>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	@ (8001c28 <MX_USART3_UART_Init+0x50>)
 8001be0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001be2:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <MX_USART3_UART_Init+0x4c>)
 8001be4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001be8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bea:	4b0e      	ldr	r3, [pc, #56]	@ (8001c24 <MX_USART3_UART_Init+0x4c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <MX_USART3_UART_Init+0x4c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <MX_USART3_UART_Init+0x4c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <MX_USART3_UART_Init+0x4c>)
 8001bfe:	220c      	movs	r2, #12
 8001c00:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c02:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <MX_USART3_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c08:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <MX_USART3_UART_Init+0x4c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001c0e:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <MX_USART3_UART_Init+0x4c>)
 8001c10:	f003 fc5c 	bl	80054cc <HAL_UART_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001c1a:	f000 f869 	bl	8001cf0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000036c 	.word	0x2000036c
 8001c28:	40004800 	.word	0x40004800

08001c2c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c32:	f107 0310 	add.w	r3, r7, #16
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c40:	4b29      	ldr	r3, [pc, #164]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a28      	ldr	r2, [pc, #160]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001c46:	f043 0310 	orr.w	r3, r3, #16
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c58:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001c5e:	f043 0320 	orr.w	r3, r3, #32
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c88:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a16      	ldr	r2, [pc, #88]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001c8e:	f043 0308 	orr.w	r3, r3, #8
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <MX_GPIO_Init+0xbc>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2140      	movs	r1, #64	@ 0x40
 8001ca4:	4811      	ldr	r0, [pc, #68]	@ (8001cec <MX_GPIO_Init+0xc0>)
 8001ca6:	f001 fb84 	bl	80033b2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001caa:	2320      	movs	r3, #32
 8001cac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0310 	add.w	r3, r7, #16
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480b      	ldr	r0, [pc, #44]	@ (8001cec <MX_GPIO_Init+0xc0>)
 8001cbe:	f001 f9dd 	bl	800307c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cc2:	2340      	movs	r3, #64	@ 0x40
 8001cc4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4804      	ldr	r0, [pc, #16]	@ (8001cec <MX_GPIO_Init+0xc0>)
 8001cda:	f001 f9cf 	bl	800307c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001cde:	bf00      	nop
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010800 	.word	0x40010800

08001cf0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	b672      	cpsid	i
}
 8001cf6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <Error_Handler+0x8>

08001cfc <MAX30102_WriteReg>:
#include "max30102.h"

void MAX30102_WriteReg(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t value) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	70fb      	strb	r3, [r7, #3]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = {reg, value};
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	733b      	strb	r3, [r7, #12]
 8001d10:	78bb      	ldrb	r3, [r7, #2]
 8001d12:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, MAX30102_ADDRESS, data, 2, HAL_MAX_DELAY);
 8001d14:	f107 020c 	add.w	r2, r7, #12
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2302      	movs	r3, #2
 8001d20:	21ae      	movs	r1, #174	@ 0xae
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f001 fca2 	bl	800366c <HAL_I2C_Master_Transmit>
}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <MAX30102_ReadFIFO>:

void MAX30102_ReadFIFO(I2C_HandleTypeDef *hi2c, uint32_t *red_led, uint32_t *ir_led) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
    uint8_t reg = REG_FIFO_DATA;
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	75fb      	strb	r3, [r7, #23]
    uint8_t data[6];
    HAL_I2C_Master_Transmit(hi2c, MAX30102_ADDRESS, &reg, 1, HAL_MAX_DELAY);
 8001d40:	f107 0217 	add.w	r2, r7, #23
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	21ae      	movs	r1, #174	@ 0xae
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f001 fc8c 	bl	800366c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(hi2c, MAX30102_ADDRESS, data, 6, HAL_MAX_DELAY);
 8001d54:	f107 0210 	add.w	r2, r7, #16
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2306      	movs	r3, #6
 8001d60:	21ae      	movs	r1, #174	@ 0xae
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f001 fd80 	bl	8003868 <HAL_I2C_Master_Receive>

    *red_led = ((uint32_t)data[0] << 16) | ((uint32_t)data[1] << 8) | data[2];
 8001d68:	7c3b      	ldrb	r3, [r7, #16]
 8001d6a:	041a      	lsls	r2, r3, #16
 8001d6c:	7c7b      	ldrb	r3, [r7, #17]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	4313      	orrs	r3, r2
 8001d72:	7cba      	ldrb	r2, [r7, #18]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	601a      	str	r2, [r3, #0]
    *red_led &= 0x3FFFF;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	601a      	str	r2, [r3, #0]

    *ir_led = ((uint32_t)data[3] << 16) | ((uint32_t)data[4] << 8) | data[5];
 8001d86:	7cfb      	ldrb	r3, [r7, #19]
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	7d3b      	ldrb	r3, [r7, #20]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	7d7a      	ldrb	r2, [r7, #21]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	601a      	str	r2, [r3, #0]
    *ir_led &= 0x3FFFF;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	601a      	str	r2, [r3, #0]
}
 8001da4:	bf00      	nop
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <MAX30102_Init>:

void MAX30102_Init(I2C_HandleTypeDef *hi2c) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
    MAX30102_WriteReg(hi2c, REG_INTR_ENABLE_1, 0xC0);
 8001db4:	22c0      	movs	r2, #192	@ 0xc0
 8001db6:	2102      	movs	r1, #2
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff9f 	bl	8001cfc <MAX30102_WriteReg>
    MAX30102_WriteReg(hi2c, REG_FIFO_WR_PTR, 0x00);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ff9a 	bl	8001cfc <MAX30102_WriteReg>
    MAX30102_WriteReg(hi2c, REG_OVF_COUNTER, 0x00);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2105      	movs	r1, #5
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff95 	bl	8001cfc <MAX30102_WriteReg>
    MAX30102_WriteReg(hi2c, REG_FIFO_RD_PTR, 0x00);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2106      	movs	r1, #6
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ff90 	bl	8001cfc <MAX30102_WriteReg>
    MAX30102_WriteReg(hi2c, REG_MODE_CONFIG, 0x03);
 8001ddc:	2203      	movs	r2, #3
 8001dde:	2109      	movs	r1, #9
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff8b 	bl	8001cfc <MAX30102_WriteReg>
    MAX30102_WriteReg(hi2c, REG_SPO2_CONFIG, 0x27);
 8001de6:	2227      	movs	r2, #39	@ 0x27
 8001de8:	210a      	movs	r1, #10
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ff86 	bl	8001cfc <MAX30102_WriteReg>
    MAX30102_WriteReg(hi2c, REG_LED1_PA, 0x24);
 8001df0:	2224      	movs	r2, #36	@ 0x24
 8001df2:	210c      	movs	r1, #12
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff81 	bl	8001cfc <MAX30102_WriteReg>
    MAX30102_WriteReg(hi2c, REG_LED2_PA, 0x24);
 8001dfa:	2224      	movs	r2, #36	@ 0x24
 8001dfc:	210d      	movs	r1, #13
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ff7c 	bl	8001cfc <MAX30102_WriteReg>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <HAL_MspInit+0x5c>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <HAL_MspInit+0x5c>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6193      	str	r3, [r2, #24]
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_MspInit+0x5c>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <HAL_MspInit+0x5c>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e68 <HAL_MspInit+0x5c>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	61d3      	str	r3, [r2, #28]
 8001e36:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <HAL_MspInit+0x5c>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_MspInit+0x60>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <HAL_MspInit+0x60>)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010000 	.word	0x40010000

08001e70 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a14      	ldr	r2, [pc, #80]	@ (8001edc <HAL_ADC_MspInit+0x6c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d121      	bne.n	8001ed4 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <HAL_ADC_MspInit+0x70>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a12      	ldr	r2, [pc, #72]	@ (8001ee0 <HAL_ADC_MspInit+0x70>)
 8001e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <HAL_ADC_MspInit+0x70>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <HAL_ADC_MspInit+0x70>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee0 <HAL_ADC_MspInit+0x70>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_ADC_MspInit+0x70>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <HAL_ADC_MspInit+0x74>)
 8001ed0:	f001 f8d4 	bl	800307c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ed4:	bf00      	nop
 8001ed6:	3720      	adds	r7, #32
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40012400 	.word	0x40012400
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010800 	.word	0x40010800

08001ee8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	@ 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1d      	ldr	r2, [pc, #116]	@ (8001f78 <HAL_I2C_MspInit+0x90>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d132      	bne.n	8001f6e <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f08:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <HAL_I2C_MspInit+0x94>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f7c <HAL_I2C_MspInit+0x94>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_I2C_MspInit+0x94>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f20:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f26:	2312      	movs	r3, #18
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	4812      	ldr	r0, [pc, #72]	@ (8001f80 <HAL_I2C_MspInit+0x98>)
 8001f36:	f001 f8a1 	bl	800307c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001f3a:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_I2C_MspInit+0x9c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f42:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f50:	4a0c      	ldr	r2, [pc, #48]	@ (8001f84 <HAL_I2C_MspInit+0x9c>)
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f56:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_I2C_MspInit+0x94>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a08      	ldr	r2, [pc, #32]	@ (8001f7c <HAL_I2C_MspInit+0x94>)
 8001f5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f60:	61d3      	str	r3, [r2, #28]
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_I2C_MspInit+0x94>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	@ 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010c00 	.word	0x40010c00
 8001f84:	40010000 	.word	0x40010000

08001f88 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f98:	d10b      	bne.n	8001fb2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9a:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <HAL_TIM_Base_MspInit+0x34>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a07      	ldr	r2, [pc, #28]	@ (8001fbc <HAL_TIM_Base_MspInit+0x34>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <HAL_TIM_Base_MspInit+0x34>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	@ 0x30
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0320 	add.w	r3, r7, #32
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a57      	ldr	r2, [pc, #348]	@ (8002138 <HAL_UART_MspInit+0x178>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d132      	bne.n	8002046 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe0:	4b56      	ldr	r3, [pc, #344]	@ (800213c <HAL_UART_MspInit+0x17c>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a55      	ldr	r2, [pc, #340]	@ (800213c <HAL_UART_MspInit+0x17c>)
 8001fe6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b53      	ldr	r3, [pc, #332]	@ (800213c <HAL_UART_MspInit+0x17c>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff8:	4b50      	ldr	r3, [pc, #320]	@ (800213c <HAL_UART_MspInit+0x17c>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4a4f      	ldr	r2, [pc, #316]	@ (800213c <HAL_UART_MspInit+0x17c>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	4b4d      	ldr	r3, [pc, #308]	@ (800213c <HAL_UART_MspInit+0x17c>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002010:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0320 	add.w	r3, r7, #32
 8002022:	4619      	mov	r1, r3
 8002024:	4846      	ldr	r0, [pc, #280]	@ (8002140 <HAL_UART_MspInit+0x180>)
 8002026:	f001 f829 	bl	800307c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800202a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002038:	f107 0320 	add.w	r3, r7, #32
 800203c:	4619      	mov	r1, r3
 800203e:	4840      	ldr	r0, [pc, #256]	@ (8002140 <HAL_UART_MspInit+0x180>)
 8002040:	f001 f81c 	bl	800307c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002044:	e074      	b.n	8002130 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a3e      	ldr	r2, [pc, #248]	@ (8002144 <HAL_UART_MspInit+0x184>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d138      	bne.n	80020c2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002050:	4b3a      	ldr	r3, [pc, #232]	@ (800213c <HAL_UART_MspInit+0x17c>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	4a39      	ldr	r2, [pc, #228]	@ (800213c <HAL_UART_MspInit+0x17c>)
 8002056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800205a:	61d3      	str	r3, [r2, #28]
 800205c:	4b37      	ldr	r3, [pc, #220]	@ (800213c <HAL_UART_MspInit+0x17c>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	4b34      	ldr	r3, [pc, #208]	@ (800213c <HAL_UART_MspInit+0x17c>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a33      	ldr	r2, [pc, #204]	@ (800213c <HAL_UART_MspInit+0x17c>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b31      	ldr	r3, [pc, #196]	@ (800213c <HAL_UART_MspInit+0x17c>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002080:	2304      	movs	r3, #4
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 0320 	add.w	r3, r7, #32
 8002090:	4619      	mov	r1, r3
 8002092:	482b      	ldr	r0, [pc, #172]	@ (8002140 <HAL_UART_MspInit+0x180>)
 8002094:	f000 fff2 	bl	800307c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002098:	2308      	movs	r3, #8
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 0320 	add.w	r3, r7, #32
 80020a8:	4619      	mov	r1, r3
 80020aa:	4825      	ldr	r0, [pc, #148]	@ (8002140 <HAL_UART_MspInit+0x180>)
 80020ac:	f000 ffe6 	bl	800307c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	2026      	movs	r0, #38	@ 0x26
 80020b6:	f000 fef8 	bl	8002eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ba:	2026      	movs	r0, #38	@ 0x26
 80020bc:	f000 ff11 	bl	8002ee2 <HAL_NVIC_EnableIRQ>
}
 80020c0:	e036      	b.n	8002130 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a20      	ldr	r2, [pc, #128]	@ (8002148 <HAL_UART_MspInit+0x188>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d131      	bne.n	8002130 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <HAL_UART_MspInit+0x17c>)
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	4a1a      	ldr	r2, [pc, #104]	@ (800213c <HAL_UART_MspInit+0x17c>)
 80020d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d6:	61d3      	str	r3, [r2, #28]
 80020d8:	4b18      	ldr	r3, [pc, #96]	@ (800213c <HAL_UART_MspInit+0x17c>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e4:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_UART_MspInit+0x17c>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a14      	ldr	r2, [pc, #80]	@ (800213c <HAL_UART_MspInit+0x17c>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b12      	ldr	r3, [pc, #72]	@ (800213c <HAL_UART_MspInit+0x17c>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210a:	f107 0320 	add.w	r3, r7, #32
 800210e:	4619      	mov	r1, r3
 8002110:	480e      	ldr	r0, [pc, #56]	@ (800214c <HAL_UART_MspInit+0x18c>)
 8002112:	f000 ffb3 	bl	800307c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002116:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002124:	f107 0320 	add.w	r3, r7, #32
 8002128:	4619      	mov	r1, r3
 800212a:	4808      	ldr	r0, [pc, #32]	@ (800214c <HAL_UART_MspInit+0x18c>)
 800212c:	f000 ffa6 	bl	800307c <HAL_GPIO_Init>
}
 8002130:	bf00      	nop
 8002132:	3730      	adds	r7, #48	@ 0x30
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40013800 	.word	0x40013800
 800213c:	40021000 	.word	0x40021000
 8002140:	40010800 	.word	0x40010800
 8002144:	40004400 	.word	0x40004400
 8002148:	40004800 	.word	0x40004800
 800214c:	40010c00 	.word	0x40010c00

08002150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <NMI_Handler+0x4>

08002158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <HardFault_Handler+0x4>

08002160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <MemManage_Handler+0x4>

08002168 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <UsageFault_Handler+0x4>

08002178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a0:	f000 f940 	bl	8002424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021ac:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <USART2_IRQHandler+0x10>)
 80021ae:	f003 fa8d 	bl	80056cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000324 	.word	0x20000324

080021bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return 1;
 80021c0:	2301      	movs	r3, #1
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <_kill>:

int _kill(int pid, int sig)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021d4:	f005 fc64 	bl	8007aa0 <__errno>
 80021d8:	4603      	mov	r3, r0
 80021da:	2216      	movs	r2, #22
 80021dc:	601a      	str	r2, [r3, #0]
  return -1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <_exit>:

void _exit (int status)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021f2:	f04f 31ff 	mov.w	r1, #4294967295
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffe7 	bl	80021ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <_exit+0x12>

08002200 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	e00a      	b.n	8002228 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002212:	f3af 8000 	nop.w
 8002216:	4601      	mov	r1, r0
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	60ba      	str	r2, [r7, #8]
 800221e:	b2ca      	uxtb	r2, r1
 8002220:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3301      	adds	r3, #1
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	dbf0      	blt.n	8002212 <_read+0x12>
  }

  return len;
 8002230:	687b      	ldr	r3, [r7, #4]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	e009      	b.n	8002260 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	60ba      	str	r2, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3301      	adds	r3, #1
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	dbf1      	blt.n	800224c <_write+0x12>
  }
  return len;
 8002268:	687b      	ldr	r3, [r7, #4]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_close>:

int _close(int file)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002298:	605a      	str	r2, [r3, #4]
  return 0;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <_isatty>:

int _isatty(int file)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b085      	sub	sp, #20
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
	...

080022d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022dc:	4a14      	ldr	r2, [pc, #80]	@ (8002330 <_sbrk+0x5c>)
 80022de:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <_sbrk+0x60>)
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e8:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f0:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <_sbrk+0x64>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	@ (800233c <_sbrk+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d207      	bcs.n	8002314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002304:	f005 fbcc 	bl	8007aa0 <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	220c      	movs	r2, #12
 800230c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	e009      	b.n	8002328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002314:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	4a05      	ldr	r2, [pc, #20]	@ (8002338 <_sbrk+0x64>)
 8002324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20005000 	.word	0x20005000
 8002334:	00000400 	.word	0x00000400
 8002338:	2000063c 	.word	0x2000063c
 800233c:	20000790 	.word	0x20000790

08002340 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800234c:	f7ff fff8 	bl	8002340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002350:	480b      	ldr	r0, [pc, #44]	@ (8002380 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002352:	490c      	ldr	r1, [pc, #48]	@ (8002384 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002354:	4a0c      	ldr	r2, [pc, #48]	@ (8002388 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a09      	ldr	r2, [pc, #36]	@ (800238c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002368:	4c09      	ldr	r4, [pc, #36]	@ (8002390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002376:	f005 fb99 	bl	8007aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800237a:	f7ff f841 	bl	8001400 <main>
  bx lr
 800237e:	4770      	bx	lr
  ldr r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002384:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002388:	0800aad4 	.word	0x0800aad4
  ldr r2, =_sbss
 800238c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002390:	20000790 	.word	0x20000790

08002394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC1_2_IRQHandler>
	...

08002398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800239c:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <HAL_Init+0x28>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a07      	ldr	r2, [pc, #28]	@ (80023c0 <HAL_Init+0x28>)
 80023a2:	f043 0310 	orr.w	r3, r3, #16
 80023a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a8:	2003      	movs	r0, #3
 80023aa:	f000 fd73 	bl	8002e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ae:	200f      	movs	r0, #15
 80023b0:	f000 f808 	bl	80023c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b4:	f7ff fd2a 	bl	8001e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40022000 	.word	0x40022000

080023c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023cc:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <HAL_InitTick+0x54>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_InitTick+0x58>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023da:	fbb3 f3f1 	udiv	r3, r3, r1
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fd8b 	bl	8002efe <HAL_SYSTICK_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00e      	b.n	8002410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b0f      	cmp	r3, #15
 80023f6:	d80a      	bhi.n	800240e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f8:	2200      	movs	r2, #0
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f000 fd53 	bl	8002eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002404:	4a06      	ldr	r2, [pc, #24]	@ (8002420 <HAL_InitTick+0x5c>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	e000      	b.n	8002410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000020 	.word	0x20000020
 800241c:	20000028 	.word	0x20000028
 8002420:	20000024 	.word	0x20000024

08002424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <HAL_IncTick+0x1c>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <HAL_IncTick+0x20>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4a03      	ldr	r2, [pc, #12]	@ (8002444 <HAL_IncTick+0x20>)
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000028 	.word	0x20000028
 8002444:	20000640 	.word	0x20000640

08002448 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b02      	ldr	r3, [pc, #8]	@ (8002458 <HAL_GetTick+0x10>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	20000640 	.word	0x20000640

0800245c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002464:	f7ff fff0 	bl	8002448 <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d005      	beq.n	8002482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_Delay+0x44>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002482:	bf00      	nop
 8002484:	f7ff ffe0 	bl	8002448 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d8f7      	bhi.n	8002484 <HAL_Delay+0x28>
  {
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000028 	.word	0x20000028

080024a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0be      	b.n	8002644 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fcc4 	bl	8001e70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fbc5 	bl	8002c78 <ADC_ConversionStop_Disable>
 80024ee:	4603      	mov	r3, r0
 80024f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 8099 	bne.w	8002632 <HAL_ADC_Init+0x18e>
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 8095 	bne.w	8002632 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002510:	f023 0302 	bic.w	r3, r3, #2
 8002514:	f043 0202 	orr.w	r2, r3, #2
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002524:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7b1b      	ldrb	r3, [r3, #12]
 800252a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800252c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4313      	orrs	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800253c:	d003      	beq.n	8002546 <HAL_ADC_Init+0xa2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d102      	bne.n	800254c <HAL_ADC_Init+0xa8>
 8002546:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800254a:	e000      	b.n	800254e <HAL_ADC_Init+0xaa>
 800254c:	2300      	movs	r3, #0
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7d1b      	ldrb	r3, [r3, #20]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d119      	bne.n	8002590 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7b1b      	ldrb	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d109      	bne.n	8002578 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	3b01      	subs	r3, #1
 800256a:	035a      	lsls	r2, r3, #13
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e00b      	b.n	8002590 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	4b28      	ldr	r3, [pc, #160]	@ (800264c <HAL_ADC_Init+0x1a8>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c0:	d003      	beq.n	80025ca <HAL_ADC_Init+0x126>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d104      	bne.n	80025d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	051b      	lsls	r3, r3, #20
 80025d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025da:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <HAL_ADC_Init+0x1ac>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d10b      	bne.n	8002610 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002602:	f023 0303 	bic.w	r3, r3, #3
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800260e:	e018      	b.n	8002642 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	f023 0312 	bic.w	r3, r3, #18
 8002618:	f043 0210 	orr.w	r2, r3, #16
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002630:	e007      	b.n	8002642 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002636:	f043 0210 	orr.w	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	ffe1f7fd 	.word	0xffe1f7fd
 8002650:	ff1f0efe 	.word	0xff1f0efe

08002654 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_ADC_Start+0x1a>
 800266a:	2302      	movs	r3, #2
 800266c:	e098      	b.n	80027a0 <HAL_ADC_Start+0x14c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 faa4 	bl	8002bc4 <ADC_Enable>
 800267c:	4603      	mov	r3, r0
 800267e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 8087 	bne.w	8002796 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a41      	ldr	r2, [pc, #260]	@ (80027a8 <HAL_ADC_Start+0x154>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d105      	bne.n	80026b2 <HAL_ADC_Start+0x5e>
 80026a6:	4b41      	ldr	r3, [pc, #260]	@ (80027ac <HAL_ADC_Start+0x158>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d115      	bne.n	80026de <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d026      	beq.n	800271a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026dc:	e01d      	b.n	800271a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a2f      	ldr	r2, [pc, #188]	@ (80027ac <HAL_ADC_Start+0x158>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_ADC_Start+0xaa>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a2b      	ldr	r2, [pc, #172]	@ (80027a8 <HAL_ADC_Start+0x154>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10d      	bne.n	800271a <HAL_ADC_Start+0xc6>
 80026fe:	4b2b      	ldr	r3, [pc, #172]	@ (80027ac <HAL_ADC_Start+0x158>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002712:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272a:	f023 0206 	bic.w	r2, r3, #6
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002732:	e002      	b.n	800273a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f06f 0202 	mvn.w	r2, #2
 800274a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002756:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800275a:	d113      	bne.n	8002784 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002760:	4a11      	ldr	r2, [pc, #68]	@ (80027a8 <HAL_ADC_Start+0x154>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d105      	bne.n	8002772 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002766:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <HAL_ADC_Start+0x158>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	e00c      	b.n	800279e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	e003      	b.n	800279e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40012800 	.word	0x40012800
 80027ac:	40012400 	.word	0x40012400

080027b0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80027c6:	f7ff fe3f 	bl	8002448 <HAL_GetTick>
 80027ca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027de:	f043 0220 	orr.w	r2, r3, #32
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0d3      	b.n	800299a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d131      	bne.n	8002864 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800280a:	2b00      	cmp	r3, #0
 800280c:	d12a      	bne.n	8002864 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800280e:	e021      	b.n	8002854 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002816:	d01d      	beq.n	8002854 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_ADC_PollForConversion+0x7e>
 800281e:	f7ff fe13 	bl	8002448 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d212      	bcs.n	8002854 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10b      	bne.n	8002854 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002840:	f043 0204 	orr.w	r2, r3, #4
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e0a2      	b.n	800299a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0d6      	beq.n	8002810 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002862:	e070      	b.n	8002946 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002864:	4b4f      	ldr	r3, [pc, #316]	@ (80029a4 <HAL_ADC_PollForConversion+0x1f4>)
 8002866:	681c      	ldr	r4, [r3, #0]
 8002868:	2002      	movs	r0, #2
 800286a:	f002 fab5 	bl	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq>
 800286e:	4603      	mov	r3, r0
 8002870:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6919      	ldr	r1, [r3, #16]
 800287a:	4b4b      	ldr	r3, [pc, #300]	@ (80029a8 <HAL_ADC_PollForConversion+0x1f8>)
 800287c:	400b      	ands	r3, r1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d118      	bne.n	80028b4 <HAL_ADC_PollForConversion+0x104>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68d9      	ldr	r1, [r3, #12]
 8002888:	4b48      	ldr	r3, [pc, #288]	@ (80029ac <HAL_ADC_PollForConversion+0x1fc>)
 800288a:	400b      	ands	r3, r1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d111      	bne.n	80028b4 <HAL_ADC_PollForConversion+0x104>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6919      	ldr	r1, [r3, #16]
 8002896:	4b46      	ldr	r3, [pc, #280]	@ (80029b0 <HAL_ADC_PollForConversion+0x200>)
 8002898:	400b      	ands	r3, r1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d108      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x100>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68d9      	ldr	r1, [r3, #12]
 80028a4:	4b43      	ldr	r3, [pc, #268]	@ (80029b4 <HAL_ADC_PollForConversion+0x204>)
 80028a6:	400b      	ands	r3, r1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x100>
 80028ac:	2314      	movs	r3, #20
 80028ae:	e020      	b.n	80028f2 <HAL_ADC_PollForConversion+0x142>
 80028b0:	2329      	movs	r3, #41	@ 0x29
 80028b2:	e01e      	b.n	80028f2 <HAL_ADC_PollForConversion+0x142>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6919      	ldr	r1, [r3, #16]
 80028ba:	4b3d      	ldr	r3, [pc, #244]	@ (80029b0 <HAL_ADC_PollForConversion+0x200>)
 80028bc:	400b      	ands	r3, r1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_ADC_PollForConversion+0x120>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68d9      	ldr	r1, [r3, #12]
 80028c8:	4b3a      	ldr	r3, [pc, #232]	@ (80029b4 <HAL_ADC_PollForConversion+0x204>)
 80028ca:	400b      	ands	r3, r1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00d      	beq.n	80028ec <HAL_ADC_PollForConversion+0x13c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6919      	ldr	r1, [r3, #16]
 80028d6:	4b38      	ldr	r3, [pc, #224]	@ (80029b8 <HAL_ADC_PollForConversion+0x208>)
 80028d8:	400b      	ands	r3, r1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d108      	bne.n	80028f0 <HAL_ADC_PollForConversion+0x140>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68d9      	ldr	r1, [r3, #12]
 80028e4:	4b34      	ldr	r3, [pc, #208]	@ (80029b8 <HAL_ADC_PollForConversion+0x208>)
 80028e6:	400b      	ands	r3, r1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_PollForConversion+0x140>
 80028ec:	2354      	movs	r3, #84	@ 0x54
 80028ee:	e000      	b.n	80028f2 <HAL_ADC_PollForConversion+0x142>
 80028f0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80028f8:	e021      	b.n	800293e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d01a      	beq.n	8002938 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_ADC_PollForConversion+0x168>
 8002908:	f7ff fd9e 	bl	8002448 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d20f      	bcs.n	8002938 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d90b      	bls.n	8002938 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	f043 0204 	orr.w	r2, r3, #4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e030      	b.n	800299a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3301      	adds	r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	429a      	cmp	r2, r3
 8002944:	d8d9      	bhi.n	80028fa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f06f 0212 	mvn.w	r2, #18
 800294e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002954:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002966:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800296a:	d115      	bne.n	8002998 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002970:	2b00      	cmp	r3, #0
 8002972:	d111      	bne.n	8002998 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd90      	pop	{r4, r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000020 	.word	0x20000020
 80029a8:	24924924 	.word	0x24924924
 80029ac:	00924924 	.word	0x00924924
 80029b0:	12492492 	.word	0x12492492
 80029b4:	00492492 	.word	0x00492492
 80029b8:	00249249 	.word	0x00249249

080029bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x20>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e0dc      	b.n	8002bae <HAL_ADC_ConfigChannel+0x1da>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b06      	cmp	r3, #6
 8002a02:	d81c      	bhi.n	8002a3e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	3b05      	subs	r3, #5
 8002a16:	221f      	movs	r2, #31
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	4019      	ands	r1, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b05      	subs	r3, #5
 8002a30:	fa00 f203 	lsl.w	r2, r0, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a3c:	e03c      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b0c      	cmp	r3, #12
 8002a44:	d81c      	bhi.n	8002a80 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	3b23      	subs	r3, #35	@ 0x23
 8002a58:	221f      	movs	r2, #31
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	4019      	ands	r1, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b23      	subs	r3, #35	@ 0x23
 8002a72:	fa00 f203 	lsl.w	r2, r0, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a7e:	e01b      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	3b41      	subs	r3, #65	@ 0x41
 8002a92:	221f      	movs	r2, #31
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	4019      	ands	r1, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3b41      	subs	r3, #65	@ 0x41
 8002aac:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b09      	cmp	r3, #9
 8002abe:	d91c      	bls.n	8002afa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68d9      	ldr	r1, [r3, #12]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b1e      	subs	r3, #30
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	4019      	ands	r1, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6898      	ldr	r0, [r3, #8]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	3b1e      	subs	r3, #30
 8002aec:	fa00 f203 	lsl.w	r2, r0, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	60da      	str	r2, [r3, #12]
 8002af8:	e019      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6919      	ldr	r1, [r3, #16]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	2207      	movs	r2, #7
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	4019      	ands	r1, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6898      	ldr	r0, [r3, #8]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	fa00 f203 	lsl.w	r2, r0, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d003      	beq.n	8002b3e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b3a:	2b11      	cmp	r3, #17
 8002b3c:	d132      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d125      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d126      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002b64:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d11a      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b6e:	4b13      	ldr	r3, [pc, #76]	@ (8002bbc <HAL_ADC_ConfigChannel+0x1e8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a13      	ldr	r2, [pc, #76]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	0c9a      	lsrs	r2, r3, #18
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b84:	e002      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f9      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x1b2>
 8002b92:	e007      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	40012400 	.word	0x40012400
 8002bbc:	20000020 	.word	0x20000020
 8002bc0:	431bde83 	.word	0x431bde83

08002bc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d040      	beq.n	8002c64 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c70 <ADC_Enable+0xac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c74 <ADC_Enable+0xb0>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	0c9b      	lsrs	r3, r3, #18
 8002bfe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c00:	e002      	b.n	8002c08 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f9      	bne.n	8002c02 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c0e:	f7ff fc1b 	bl	8002448 <HAL_GetTick>
 8002c12:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c14:	e01f      	b.n	8002c56 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c16:	f7ff fc17 	bl	8002448 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d918      	bls.n	8002c56 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d011      	beq.n	8002c56 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c36:	f043 0210 	orr.w	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e007      	b.n	8002c66 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d1d8      	bne.n	8002c16 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000020 	.word	0x20000020
 8002c74:	431bde83 	.word	0x431bde83

08002c78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d12e      	bne.n	8002cf0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ca2:	f7ff fbd1 	bl	8002448 <HAL_GetTick>
 8002ca6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ca8:	e01b      	b.n	8002ce2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002caa:	f7ff fbcd 	bl	8002448 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d914      	bls.n	8002ce2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d10d      	bne.n	8002ce2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cca:	f043 0210 	orr.w	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e007      	b.n	8002cf2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d0dc      	beq.n	8002caa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2e:	4a04      	ldr	r2, [pc, #16]	@ (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	60d3      	str	r3, [r2, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d48:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <__NVIC_GetPriorityGrouping+0x18>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f003 0307 	and.w	r3, r3, #7
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db0b      	blt.n	8002d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	4906      	ldr	r1, [pc, #24]	@ (8002d94 <__NVIC_EnableIRQ+0x34>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2001      	movs	r0, #1
 8002d82:	fa00 f202 	lsl.w	r2, r0, r2
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	e000e100 	.word	0xe000e100

08002d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db0a      	blt.n	8002dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	490c      	ldr	r1, [pc, #48]	@ (8002de4 <__NVIC_SetPriority+0x4c>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc0:	e00a      	b.n	8002dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4908      	ldr	r1, [pc, #32]	@ (8002de8 <__NVIC_SetPriority+0x50>)
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	761a      	strb	r2, [r3, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	@ 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f1c3 0307 	rsb	r3, r3, #7
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	bf28      	it	cs
 8002e0a:	2304      	movcs	r3, #4
 8002e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d902      	bls.n	8002e1c <NVIC_EncodePriority+0x30>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3b03      	subs	r3, #3
 8002e1a:	e000      	b.n	8002e1e <NVIC_EncodePriority+0x32>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	f04f 32ff 	mov.w	r2, #4294967295
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	401a      	ands	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43d9      	mvns	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	4313      	orrs	r3, r2
         );
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	@ 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e60:	d301      	bcc.n	8002e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00f      	b.n	8002e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e66:	4a0a      	ldr	r2, [pc, #40]	@ (8002e90 <SysTick_Config+0x40>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6e:	210f      	movs	r1, #15
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	f7ff ff90 	bl	8002d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <SysTick_Config+0x40>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7e:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <SysTick_Config+0x40>)
 8002e80:	2207      	movs	r2, #7
 8002e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	e000e010 	.word	0xe000e010

08002e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ff2d 	bl	8002cfc <__NVIC_SetPriorityGrouping>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ebc:	f7ff ff42 	bl	8002d44 <__NVIC_GetPriorityGrouping>
 8002ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	f7ff ff90 	bl	8002dec <NVIC_EncodePriority>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff5f 	bl	8002d98 <__NVIC_SetPriority>
}
 8002eda:	bf00      	nop
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff ff35 	bl	8002d60 <__NVIC_EnableIRQ>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ffa2 	bl	8002e50 <SysTick_Config>
 8002f0c:	4603      	mov	r3, r0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d008      	beq.n	8002f40 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2204      	movs	r2, #4
 8002f32:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e020      	b.n	8002f82 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 020e 	bic.w	r2, r2, #14
 8002f4e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f68:	2101      	movs	r1, #1
 8002f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d005      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	e051      	b.n	8003054 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 020e 	bic.w	r2, r2, #14
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a22      	ldr	r2, [pc, #136]	@ (8003060 <HAL_DMA_Abort_IT+0xd4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d029      	beq.n	800302e <HAL_DMA_Abort_IT+0xa2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a21      	ldr	r2, [pc, #132]	@ (8003064 <HAL_DMA_Abort_IT+0xd8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <HAL_DMA_Abort_IT+0x9e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8003068 <HAL_DMA_Abort_IT+0xdc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01a      	beq.n	8003024 <HAL_DMA_Abort_IT+0x98>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800306c <HAL_DMA_Abort_IT+0xe0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d012      	beq.n	800301e <HAL_DMA_Abort_IT+0x92>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8003070 <HAL_DMA_Abort_IT+0xe4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00a      	beq.n	8003018 <HAL_DMA_Abort_IT+0x8c>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1b      	ldr	r2, [pc, #108]	@ (8003074 <HAL_DMA_Abort_IT+0xe8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d102      	bne.n	8003012 <HAL_DMA_Abort_IT+0x86>
 800300c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003010:	e00e      	b.n	8003030 <HAL_DMA_Abort_IT+0xa4>
 8003012:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003016:	e00b      	b.n	8003030 <HAL_DMA_Abort_IT+0xa4>
 8003018:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800301c:	e008      	b.n	8003030 <HAL_DMA_Abort_IT+0xa4>
 800301e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003022:	e005      	b.n	8003030 <HAL_DMA_Abort_IT+0xa4>
 8003024:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003028:	e002      	b.n	8003030 <HAL_DMA_Abort_IT+0xa4>
 800302a:	2310      	movs	r3, #16
 800302c:	e000      	b.n	8003030 <HAL_DMA_Abort_IT+0xa4>
 800302e:	2301      	movs	r3, #1
 8003030:	4a11      	ldr	r2, [pc, #68]	@ (8003078 <HAL_DMA_Abort_IT+0xec>)
 8003032:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
    } 
  }
  return status;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40020008 	.word	0x40020008
 8003064:	4002001c 	.word	0x4002001c
 8003068:	40020030 	.word	0x40020030
 800306c:	40020044 	.word	0x40020044
 8003070:	40020058 	.word	0x40020058
 8003074:	4002006c 	.word	0x4002006c
 8003078:	40020000 	.word	0x40020000

0800307c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800307c:	b480      	push	{r7}
 800307e:	b08b      	sub	sp, #44	@ 0x2c
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800308a:	2300      	movs	r3, #0
 800308c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308e:	e169      	b.n	8003364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003090:	2201      	movs	r2, #1
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	f040 8158 	bne.w	800335e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4a9a      	ldr	r2, [pc, #616]	@ (800331c <HAL_GPIO_Init+0x2a0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d05e      	beq.n	8003176 <HAL_GPIO_Init+0xfa>
 80030b8:	4a98      	ldr	r2, [pc, #608]	@ (800331c <HAL_GPIO_Init+0x2a0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d875      	bhi.n	80031aa <HAL_GPIO_Init+0x12e>
 80030be:	4a98      	ldr	r2, [pc, #608]	@ (8003320 <HAL_GPIO_Init+0x2a4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d058      	beq.n	8003176 <HAL_GPIO_Init+0xfa>
 80030c4:	4a96      	ldr	r2, [pc, #600]	@ (8003320 <HAL_GPIO_Init+0x2a4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d86f      	bhi.n	80031aa <HAL_GPIO_Init+0x12e>
 80030ca:	4a96      	ldr	r2, [pc, #600]	@ (8003324 <HAL_GPIO_Init+0x2a8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d052      	beq.n	8003176 <HAL_GPIO_Init+0xfa>
 80030d0:	4a94      	ldr	r2, [pc, #592]	@ (8003324 <HAL_GPIO_Init+0x2a8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d869      	bhi.n	80031aa <HAL_GPIO_Init+0x12e>
 80030d6:	4a94      	ldr	r2, [pc, #592]	@ (8003328 <HAL_GPIO_Init+0x2ac>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d04c      	beq.n	8003176 <HAL_GPIO_Init+0xfa>
 80030dc:	4a92      	ldr	r2, [pc, #584]	@ (8003328 <HAL_GPIO_Init+0x2ac>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d863      	bhi.n	80031aa <HAL_GPIO_Init+0x12e>
 80030e2:	4a92      	ldr	r2, [pc, #584]	@ (800332c <HAL_GPIO_Init+0x2b0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d046      	beq.n	8003176 <HAL_GPIO_Init+0xfa>
 80030e8:	4a90      	ldr	r2, [pc, #576]	@ (800332c <HAL_GPIO_Init+0x2b0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d85d      	bhi.n	80031aa <HAL_GPIO_Init+0x12e>
 80030ee:	2b12      	cmp	r3, #18
 80030f0:	d82a      	bhi.n	8003148 <HAL_GPIO_Init+0xcc>
 80030f2:	2b12      	cmp	r3, #18
 80030f4:	d859      	bhi.n	80031aa <HAL_GPIO_Init+0x12e>
 80030f6:	a201      	add	r2, pc, #4	@ (adr r2, 80030fc <HAL_GPIO_Init+0x80>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	08003177 	.word	0x08003177
 8003100:	08003151 	.word	0x08003151
 8003104:	08003163 	.word	0x08003163
 8003108:	080031a5 	.word	0x080031a5
 800310c:	080031ab 	.word	0x080031ab
 8003110:	080031ab 	.word	0x080031ab
 8003114:	080031ab 	.word	0x080031ab
 8003118:	080031ab 	.word	0x080031ab
 800311c:	080031ab 	.word	0x080031ab
 8003120:	080031ab 	.word	0x080031ab
 8003124:	080031ab 	.word	0x080031ab
 8003128:	080031ab 	.word	0x080031ab
 800312c:	080031ab 	.word	0x080031ab
 8003130:	080031ab 	.word	0x080031ab
 8003134:	080031ab 	.word	0x080031ab
 8003138:	080031ab 	.word	0x080031ab
 800313c:	080031ab 	.word	0x080031ab
 8003140:	08003159 	.word	0x08003159
 8003144:	0800316d 	.word	0x0800316d
 8003148:	4a79      	ldr	r2, [pc, #484]	@ (8003330 <HAL_GPIO_Init+0x2b4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800314e:	e02c      	b.n	80031aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	623b      	str	r3, [r7, #32]
          break;
 8003156:	e029      	b.n	80031ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	3304      	adds	r3, #4
 800315e:	623b      	str	r3, [r7, #32]
          break;
 8003160:	e024      	b.n	80031ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	3308      	adds	r3, #8
 8003168:	623b      	str	r3, [r7, #32]
          break;
 800316a:	e01f      	b.n	80031ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	330c      	adds	r3, #12
 8003172:	623b      	str	r3, [r7, #32]
          break;
 8003174:	e01a      	b.n	80031ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800317e:	2304      	movs	r3, #4
 8003180:	623b      	str	r3, [r7, #32]
          break;
 8003182:	e013      	b.n	80031ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d105      	bne.n	8003198 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800318c:	2308      	movs	r3, #8
 800318e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	611a      	str	r2, [r3, #16]
          break;
 8003196:	e009      	b.n	80031ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003198:	2308      	movs	r3, #8
 800319a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	615a      	str	r2, [r3, #20]
          break;
 80031a2:	e003      	b.n	80031ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031a4:	2300      	movs	r3, #0
 80031a6:	623b      	str	r3, [r7, #32]
          break;
 80031a8:	e000      	b.n	80031ac <HAL_GPIO_Init+0x130>
          break;
 80031aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2bff      	cmp	r3, #255	@ 0xff
 80031b0:	d801      	bhi.n	80031b6 <HAL_GPIO_Init+0x13a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	e001      	b.n	80031ba <HAL_GPIO_Init+0x13e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2bff      	cmp	r3, #255	@ 0xff
 80031c0:	d802      	bhi.n	80031c8 <HAL_GPIO_Init+0x14c>
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	e002      	b.n	80031ce <HAL_GPIO_Init+0x152>
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	3b08      	subs	r3, #8
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	210f      	movs	r1, #15
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	401a      	ands	r2, r3
 80031e0:	6a39      	ldr	r1, [r7, #32]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	fa01 f303 	lsl.w	r3, r1, r3
 80031e8:	431a      	orrs	r2, r3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 80b1 	beq.w	800335e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003334 <HAL_GPIO_Init+0x2b8>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4a4c      	ldr	r2, [pc, #304]	@ (8003334 <HAL_GPIO_Init+0x2b8>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6193      	str	r3, [r2, #24]
 8003208:	4b4a      	ldr	r3, [pc, #296]	@ (8003334 <HAL_GPIO_Init+0x2b8>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003214:	4a48      	ldr	r2, [pc, #288]	@ (8003338 <HAL_GPIO_Init+0x2bc>)
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	3302      	adds	r3, #2
 800321c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003220:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	220f      	movs	r2, #15
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4013      	ands	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a40      	ldr	r2, [pc, #256]	@ (800333c <HAL_GPIO_Init+0x2c0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <HAL_GPIO_Init+0x1ec>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a3f      	ldr	r2, [pc, #252]	@ (8003340 <HAL_GPIO_Init+0x2c4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00d      	beq.n	8003264 <HAL_GPIO_Init+0x1e8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a3e      	ldr	r2, [pc, #248]	@ (8003344 <HAL_GPIO_Init+0x2c8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d007      	beq.n	8003260 <HAL_GPIO_Init+0x1e4>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3d      	ldr	r2, [pc, #244]	@ (8003348 <HAL_GPIO_Init+0x2cc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d101      	bne.n	800325c <HAL_GPIO_Init+0x1e0>
 8003258:	2303      	movs	r3, #3
 800325a:	e006      	b.n	800326a <HAL_GPIO_Init+0x1ee>
 800325c:	2304      	movs	r3, #4
 800325e:	e004      	b.n	800326a <HAL_GPIO_Init+0x1ee>
 8003260:	2302      	movs	r3, #2
 8003262:	e002      	b.n	800326a <HAL_GPIO_Init+0x1ee>
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <HAL_GPIO_Init+0x1ee>
 8003268:	2300      	movs	r3, #0
 800326a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800326c:	f002 0203 	and.w	r2, r2, #3
 8003270:	0092      	lsls	r2, r2, #2
 8003272:	4093      	lsls	r3, r2
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800327a:	492f      	ldr	r1, [pc, #188]	@ (8003338 <HAL_GPIO_Init+0x2bc>)
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	089b      	lsrs	r3, r3, #2
 8003280:	3302      	adds	r3, #2
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003294:	4b2d      	ldr	r3, [pc, #180]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	492c      	ldr	r1, [pc, #176]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032a2:	4b2a      	ldr	r3, [pc, #168]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	4928      	ldr	r1, [pc, #160]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d006      	beq.n	80032ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032bc:	4b23      	ldr	r3, [pc, #140]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	4922      	ldr	r1, [pc, #136]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60cb      	str	r3, [r1, #12]
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032ca:	4b20      	ldr	r3, [pc, #128]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	491e      	ldr	r1, [pc, #120]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032e4:	4b19      	ldr	r3, [pc, #100]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	4918      	ldr	r1, [pc, #96]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
 80032f0:	e006      	b.n	8003300 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032f2:	4b16      	ldr	r3, [pc, #88]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	4914      	ldr	r1, [pc, #80]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d021      	beq.n	8003350 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800330c:	4b0f      	ldr	r3, [pc, #60]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	490e      	ldr	r1, [pc, #56]	@ (800334c <HAL_GPIO_Init+0x2d0>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	600b      	str	r3, [r1, #0]
 8003318:	e021      	b.n	800335e <HAL_GPIO_Init+0x2e2>
 800331a:	bf00      	nop
 800331c:	10320000 	.word	0x10320000
 8003320:	10310000 	.word	0x10310000
 8003324:	10220000 	.word	0x10220000
 8003328:	10210000 	.word	0x10210000
 800332c:	10120000 	.word	0x10120000
 8003330:	10110000 	.word	0x10110000
 8003334:	40021000 	.word	0x40021000
 8003338:	40010000 	.word	0x40010000
 800333c:	40010800 	.word	0x40010800
 8003340:	40010c00 	.word	0x40010c00
 8003344:	40011000 	.word	0x40011000
 8003348:	40011400 	.word	0x40011400
 800334c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003350:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <HAL_GPIO_Init+0x304>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	43db      	mvns	r3, r3
 8003358:	4909      	ldr	r1, [pc, #36]	@ (8003380 <HAL_GPIO_Init+0x304>)
 800335a:	4013      	ands	r3, r2
 800335c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	3301      	adds	r3, #1
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	fa22 f303 	lsr.w	r3, r2, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	f47f ae8e 	bne.w	8003090 <HAL_GPIO_Init+0x14>
  }
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	372c      	adds	r7, #44	@ 0x2c
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	40010400 	.word	0x40010400

08003384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	887b      	ldrh	r3, [r7, #2]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
 80033a0:	e001      	b.n	80033a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr

080033b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	460b      	mov	r3, r1
 80033bc:	807b      	strh	r3, [r7, #2]
 80033be:	4613      	mov	r3, r2
 80033c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033c2:	787b      	ldrb	r3, [r7, #1]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033c8:	887a      	ldrh	r2, [r7, #2]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033ce:	e003      	b.n	80033d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033d0:	887b      	ldrh	r3, [r7, #2]
 80033d2:	041a      	lsls	r2, r3, #16
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	611a      	str	r2, [r3, #16]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
	...

080033e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e12b      	b.n	800364e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fe fd6c 	bl	8001ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	@ 0x24
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003436:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003446:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003448:	f001 fbca 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 800344c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4a81      	ldr	r2, [pc, #516]	@ (8003658 <HAL_I2C_Init+0x274>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d807      	bhi.n	8003468 <HAL_I2C_Init+0x84>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a80      	ldr	r2, [pc, #512]	@ (800365c <HAL_I2C_Init+0x278>)
 800345c:	4293      	cmp	r3, r2
 800345e:	bf94      	ite	ls
 8003460:	2301      	movls	r3, #1
 8003462:	2300      	movhi	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	e006      	b.n	8003476 <HAL_I2C_Init+0x92>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4a7d      	ldr	r2, [pc, #500]	@ (8003660 <HAL_I2C_Init+0x27c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	bf94      	ite	ls
 8003470:	2301      	movls	r3, #1
 8003472:	2300      	movhi	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0e7      	b.n	800364e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4a78      	ldr	r2, [pc, #480]	@ (8003664 <HAL_I2C_Init+0x280>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	0c9b      	lsrs	r3, r3, #18
 8003488:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003658 <HAL_I2C_Init+0x274>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d802      	bhi.n	80034b8 <HAL_I2C_Init+0xd4>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	3301      	adds	r3, #1
 80034b6:	e009      	b.n	80034cc <HAL_I2C_Init+0xe8>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	4a69      	ldr	r2, [pc, #420]	@ (8003668 <HAL_I2C_Init+0x284>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	3301      	adds	r3, #1
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	495c      	ldr	r1, [pc, #368]	@ (8003658 <HAL_I2C_Init+0x274>)
 80034e8:	428b      	cmp	r3, r1
 80034ea:	d819      	bhi.n	8003520 <HAL_I2C_Init+0x13c>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1e59      	subs	r1, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034fa:	1c59      	adds	r1, r3, #1
 80034fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003500:	400b      	ands	r3, r1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_I2C_Init+0x138>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1e59      	subs	r1, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fbb1 f3f3 	udiv	r3, r1, r3
 8003514:	3301      	adds	r3, #1
 8003516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351a:	e051      	b.n	80035c0 <HAL_I2C_Init+0x1dc>
 800351c:	2304      	movs	r3, #4
 800351e:	e04f      	b.n	80035c0 <HAL_I2C_Init+0x1dc>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d111      	bne.n	800354c <HAL_I2C_Init+0x168>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1e58      	subs	r0, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	440b      	add	r3, r1
 8003536:	fbb0 f3f3 	udiv	r3, r0, r3
 800353a:	3301      	adds	r3, #1
 800353c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e012      	b.n	8003572 <HAL_I2C_Init+0x18e>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	0099      	lsls	r1, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003562:	3301      	adds	r3, #1
 8003564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Init+0x196>
 8003576:	2301      	movs	r3, #1
 8003578:	e022      	b.n	80035c0 <HAL_I2C_Init+0x1dc>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10e      	bne.n	80035a0 <HAL_I2C_Init+0x1bc>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1e58      	subs	r0, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	440b      	add	r3, r1
 8003590:	fbb0 f3f3 	udiv	r3, r0, r3
 8003594:	3301      	adds	r3, #1
 8003596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800359e:	e00f      	b.n	80035c0 <HAL_I2C_Init+0x1dc>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1e58      	subs	r0, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	0099      	lsls	r1, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b6:	3301      	adds	r3, #1
 80035b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	6809      	ldr	r1, [r1, #0]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6911      	ldr	r1, [r2, #16]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68d2      	ldr	r2, [r2, #12]
 80035fa:	4311      	orrs	r1, r2
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	430b      	orrs	r3, r1
 8003602:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	000186a0 	.word	0x000186a0
 800365c:	001e847f 	.word	0x001e847f
 8003660:	003d08ff 	.word	0x003d08ff
 8003664:	431bde83 	.word	0x431bde83
 8003668:	10624dd3 	.word	0x10624dd3

0800366c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	461a      	mov	r2, r3
 8003678:	460b      	mov	r3, r1
 800367a:	817b      	strh	r3, [r7, #10]
 800367c:	4613      	mov	r3, r2
 800367e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7fe fee2 	bl	8002448 <HAL_GetTick>
 8003684:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b20      	cmp	r3, #32
 8003690:	f040 80e0 	bne.w	8003854 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2319      	movs	r3, #25
 800369a:	2201      	movs	r2, #1
 800369c:	4970      	ldr	r1, [pc, #448]	@ (8003860 <HAL_I2C_Master_Transmit+0x1f4>)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fc9e 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
 80036ac:	e0d3      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_I2C_Master_Transmit+0x50>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e0cc      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ea>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d007      	beq.n	80036e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2221      	movs	r2, #33	@ 0x21
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2210      	movs	r2, #16
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	893a      	ldrh	r2, [r7, #8]
 8003712:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a50      	ldr	r2, [pc, #320]	@ (8003864 <HAL_I2C_Master_Transmit+0x1f8>)
 8003722:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003724:	8979      	ldrh	r1, [r7, #10]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	6a3a      	ldr	r2, [r7, #32]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fb08 	bl	8003d40 <I2C_MasterRequestWrite>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e08d      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003750:	e066      	b.n	8003820 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	6a39      	ldr	r1, [r7, #32]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fd5c 	bl	8004214 <I2C_WaitOnTXEFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	2b04      	cmp	r3, #4
 8003768:	d107      	bne.n	800377a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003778:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e06b      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d11b      	bne.n	80037f4 <HAL_I2C_Master_Transmit+0x188>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d017      	beq.n	80037f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c8:	781a      	ldrb	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	6a39      	ldr	r1, [r7, #32]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fd53 	bl	80042a4 <I2C_WaitOnBTFFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00d      	beq.n	8003820 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	2b04      	cmp	r3, #4
 800380a:	d107      	bne.n	800381c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e01a      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	d194      	bne.n	8003752 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	e000      	b.n	8003856 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	00100002 	.word	0x00100002
 8003864:	ffff0000 	.word	0xffff0000

08003868 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08c      	sub	sp, #48	@ 0x30
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	461a      	mov	r2, r3
 8003874:	460b      	mov	r3, r1
 8003876:	817b      	strh	r3, [r7, #10]
 8003878:	4613      	mov	r3, r2
 800387a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003880:	f7fe fde2 	bl	8002448 <HAL_GetTick>
 8003884:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b20      	cmp	r3, #32
 8003890:	f040 824b 	bne.w	8003d2a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2319      	movs	r3, #25
 800389a:	2201      	movs	r2, #1
 800389c:	497f      	ldr	r1, [pc, #508]	@ (8003a9c <HAL_I2C_Master_Receive+0x234>)
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fb9e 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80038aa:	2302      	movs	r3, #2
 80038ac:	e23e      	b.n	8003d2c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_I2C_Master_Receive+0x54>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e237      	b.n	8003d2c <HAL_I2C_Master_Receive+0x4c4>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d007      	beq.n	80038e2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2222      	movs	r2, #34	@ 0x22
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2210      	movs	r2, #16
 80038fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	893a      	ldrh	r2, [r7, #8]
 8003912:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a5f      	ldr	r2, [pc, #380]	@ (8003aa0 <HAL_I2C_Master_Receive+0x238>)
 8003922:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003924:	8979      	ldrh	r1, [r7, #10]
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fa8a 	bl	8003e44 <I2C_MasterRequestRead>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e1f8      	b.n	8003d2c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393e:	2b00      	cmp	r3, #0
 8003940:	d113      	bne.n	800396a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	e1cc      	b.n	8003d04 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396e:	2b01      	cmp	r3, #1
 8003970:	d11e      	bne.n	80039b0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003980:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003982:	b672      	cpsid	i
}
 8003984:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039ac:	b662      	cpsie	i
}
 80039ae:	e035      	b.n	8003a1c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d11e      	bne.n	80039f6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039c8:	b672      	cpsid	i
}
 80039ca:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039f2:	b662      	cpsie	i
}
 80039f4:	e012      	b.n	8003a1c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a1c:	e172      	b.n	8003d04 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	f200 811f 	bhi.w	8003c66 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d123      	bne.n	8003a78 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fc7d 	bl	8004334 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e173      	b.n	8003d2c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a76:	e145      	b.n	8003d04 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d152      	bne.n	8003b26 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a86:	2200      	movs	r2, #0
 8003a88:	4906      	ldr	r1, [pc, #24]	@ (8003aa4 <HAL_I2C_Master_Receive+0x23c>)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 faa8 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e148      	b.n	8003d2c <HAL_I2C_Master_Receive+0x4c4>
 8003a9a:	bf00      	nop
 8003a9c:	00100002 	.word	0x00100002
 8003aa0:	ffff0000 	.word	0xffff0000
 8003aa4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003aa8:	b672      	cpsid	i
}
 8003aaa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003aee:	b662      	cpsie	i
}
 8003af0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b24:	e0ee      	b.n	8003d04 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	4981      	ldr	r1, [pc, #516]	@ (8003d34 <HAL_I2C_Master_Receive+0x4cc>)
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fa55 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0f5      	b.n	8003d2c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b50:	b672      	cpsid	i
}
 8003b52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b86:	4b6c      	ldr	r3, [pc, #432]	@ (8003d38 <HAL_I2C_Master_Receive+0x4d0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	08db      	lsrs	r3, r3, #3
 8003b8c:	4a6b      	ldr	r2, [pc, #428]	@ (8003d3c <HAL_I2C_Master_Receive+0x4d4>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	0a1a      	lsrs	r2, r3, #8
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00da      	lsls	r2, r3, #3
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d118      	bne.n	8003bde <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003bce:	b662      	cpsie	i
}
 8003bd0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e0a6      	b.n	8003d2c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d1d9      	bne.n	8003ba0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c2e:	b662      	cpsie	i
}
 8003c30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c64:	e04e      	b.n	8003d04 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fb62 	bl	8004334 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e058      	b.n	8003d2c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d124      	bne.n	8003d04 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d107      	bne.n	8003cd2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f47f ae88 	bne.w	8003a1e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3728      	adds	r7, #40	@ 0x28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	00010004 	.word	0x00010004
 8003d38:	20000020 	.word	0x20000020
 8003d3c:	14f8b589 	.word	0x14f8b589

08003d40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	607a      	str	r2, [r7, #4]
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d006      	beq.n	8003d6a <I2C_MasterRequestWrite+0x2a>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d003      	beq.n	8003d6a <I2C_MasterRequestWrite+0x2a>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d68:	d108      	bne.n	8003d7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e00b      	b.n	8003d94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d80:	2b12      	cmp	r3, #18
 8003d82:	d107      	bne.n	8003d94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f91d 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00d      	beq.n	8003dc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dba:	d103      	bne.n	8003dc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e035      	b.n	8003e34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dd0:	d108      	bne.n	8003de4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dd2:	897b      	ldrh	r3, [r7, #10]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003de0:	611a      	str	r2, [r3, #16]
 8003de2:	e01b      	b.n	8003e1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003de4:	897b      	ldrh	r3, [r7, #10]
 8003de6:	11db      	asrs	r3, r3, #7
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f003 0306 	and.w	r3, r3, #6
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f063 030f 	orn	r3, r3, #15
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	490e      	ldr	r1, [pc, #56]	@ (8003e3c <I2C_MasterRequestWrite+0xfc>)
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f966 	bl	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e010      	b.n	8003e34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e12:	897b      	ldrh	r3, [r7, #10]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4907      	ldr	r1, [pc, #28]	@ (8003e40 <I2C_MasterRequestWrite+0x100>)
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f956 	bl	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	00010008 	.word	0x00010008
 8003e40:	00010002 	.word	0x00010002

08003e44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	460b      	mov	r3, r1
 8003e52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d006      	beq.n	8003e7e <I2C_MasterRequestRead+0x3a>
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d003      	beq.n	8003e7e <I2C_MasterRequestRead+0x3a>
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e7c:	d108      	bne.n	8003e90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e00b      	b.n	8003ea8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e94:	2b11      	cmp	r3, #17
 8003e96:	d107      	bne.n	8003ea8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ea6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f893 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ece:	d103      	bne.n	8003ed8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e079      	b.n	8003fd0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ee4:	d108      	bne.n	8003ef8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ee6:	897b      	ldrh	r3, [r7, #10]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	611a      	str	r2, [r3, #16]
 8003ef6:	e05f      	b.n	8003fb8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ef8:	897b      	ldrh	r3, [r7, #10]
 8003efa:	11db      	asrs	r3, r3, #7
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 0306 	and.w	r3, r3, #6
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f063 030f 	orn	r3, r3, #15
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	4930      	ldr	r1, [pc, #192]	@ (8003fd8 <I2C_MasterRequestRead+0x194>)
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f8dc 	bl	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e054      	b.n	8003fd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f26:	897b      	ldrh	r3, [r7, #10]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4929      	ldr	r1, [pc, #164]	@ (8003fdc <I2C_MasterRequestRead+0x198>)
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f8cc 	bl	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e044      	b.n	8003fd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f831 	bl	8003fe0 <I2C_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00d      	beq.n	8003fa0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f92:	d103      	bne.n	8003f9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f9a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e017      	b.n	8003fd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003fa0:	897b      	ldrh	r3, [r7, #10]
 8003fa2:	11db      	asrs	r3, r3, #7
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 0306 	and.w	r3, r3, #6
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f063 030e 	orn	r3, r3, #14
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	4907      	ldr	r1, [pc, #28]	@ (8003fdc <I2C_MasterRequestRead+0x198>)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f888 	bl	80040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	00010008 	.word	0x00010008
 8003fdc:	00010002 	.word	0x00010002

08003fe0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ff0:	e048      	b.n	8004084 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d044      	beq.n	8004084 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffa:	f7fe fa25 	bl	8002448 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d302      	bcc.n	8004010 <I2C_WaitOnFlagUntilTimeout+0x30>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d139      	bne.n	8004084 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	0c1b      	lsrs	r3, r3, #16
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b01      	cmp	r3, #1
 8004018:	d10d      	bne.n	8004036 <I2C_WaitOnFlagUntilTimeout+0x56>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	43da      	mvns	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4013      	ands	r3, r2
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	e00c      	b.n	8004050 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	43da      	mvns	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4013      	ands	r3, r2
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	429a      	cmp	r2, r3
 8004054:	d116      	bne.n	8004084 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004070:	f043 0220 	orr.w	r2, r3, #32
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e023      	b.n	80040cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b01      	cmp	r3, #1
 800408c:	d10d      	bne.n	80040aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	43da      	mvns	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4013      	ands	r3, r2
 800409a:	b29b      	uxth	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	bf0c      	ite	eq
 80040a0:	2301      	moveq	r3, #1
 80040a2:	2300      	movne	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	e00c      	b.n	80040c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	43da      	mvns	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4013      	ands	r3, r2
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d093      	beq.n	8003ff2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040e2:	e071      	b.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f2:	d123      	bne.n	800413c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004102:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800410c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004128:	f043 0204 	orr.w	r2, r3, #4
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e067      	b.n	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004142:	d041      	beq.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004144:	f7fe f980 	bl	8002448 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	d302      	bcc.n	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d136      	bne.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10c      	bne.n	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	43da      	mvns	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4013      	ands	r3, r2
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	bf14      	ite	ne
 8004176:	2301      	movne	r3, #1
 8004178:	2300      	moveq	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	e00b      	b.n	8004196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	43da      	mvns	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4013      	ands	r3, r2
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d016      	beq.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b4:	f043 0220 	orr.w	r2, r3, #32
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e021      	b.n	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	0c1b      	lsrs	r3, r3, #16
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d10c      	bne.n	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	43da      	mvns	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4013      	ands	r3, r2
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e00b      	b.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	43da      	mvns	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4013      	ands	r3, r2
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	bf14      	ite	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	2300      	moveq	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	f47f af6d 	bne.w	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004220:	e034      	b.n	800428c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f8e3 	bl	80043ee <I2C_IsAcknowledgeFailed>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e034      	b.n	800429c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d028      	beq.n	800428c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423a:	f7fe f905 	bl	8002448 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d11d      	bne.n	800428c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425a:	2b80      	cmp	r3, #128	@ 0x80
 800425c:	d016      	beq.n	800428c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e007      	b.n	800429c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004296:	2b80      	cmp	r3, #128	@ 0x80
 8004298:	d1c3      	bne.n	8004222 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042b0:	e034      	b.n	800431c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f89b 	bl	80043ee <I2C_IsAcknowledgeFailed>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e034      	b.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c8:	d028      	beq.n	800431c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ca:	f7fe f8bd 	bl	8002448 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d302      	bcc.n	80042e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d11d      	bne.n	800431c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d016      	beq.n	800431c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e007      	b.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b04      	cmp	r3, #4
 8004328:	d1c3      	bne.n	80042b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004340:	e049      	b.n	80043d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b10      	cmp	r3, #16
 800434e:	d119      	bne.n	8004384 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0210 	mvn.w	r2, #16
 8004358:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e030      	b.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004384:	f7fe f860 	bl	8002448 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	429a      	cmp	r2, r3
 8004392:	d302      	bcc.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d11d      	bne.n	80043d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a4:	2b40      	cmp	r3, #64	@ 0x40
 80043a6:	d016      	beq.n	80043d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	f043 0220 	orr.w	r2, r3, #32
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e007      	b.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b40      	cmp	r3, #64	@ 0x40
 80043e2:	d1ae      	bne.n	8004342 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004404:	d11b      	bne.n	800443e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800440e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f043 0204 	orr.w	r2, r3, #4
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr
	...

0800444c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e272      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 8087 	beq.w	800457a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800446c:	4b92      	ldr	r3, [pc, #584]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 030c 	and.w	r3, r3, #12
 8004474:	2b04      	cmp	r3, #4
 8004476:	d00c      	beq.n	8004492 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004478:	4b8f      	ldr	r3, [pc, #572]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 030c 	and.w	r3, r3, #12
 8004480:	2b08      	cmp	r3, #8
 8004482:	d112      	bne.n	80044aa <HAL_RCC_OscConfig+0x5e>
 8004484:	4b8c      	ldr	r3, [pc, #560]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004490:	d10b      	bne.n	80044aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004492:	4b89      	ldr	r3, [pc, #548]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d06c      	beq.n	8004578 <HAL_RCC_OscConfig+0x12c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d168      	bne.n	8004578 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e24c      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b2:	d106      	bne.n	80044c2 <HAL_RCC_OscConfig+0x76>
 80044b4:	4b80      	ldr	r3, [pc, #512]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a7f      	ldr	r2, [pc, #508]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e02e      	b.n	8004520 <HAL_RCC_OscConfig+0xd4>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x98>
 80044ca:	4b7b      	ldr	r3, [pc, #492]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a7a      	ldr	r2, [pc, #488]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b78      	ldr	r3, [pc, #480]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a77      	ldr	r2, [pc, #476]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e01d      	b.n	8004520 <HAL_RCC_OscConfig+0xd4>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044ec:	d10c      	bne.n	8004508 <HAL_RCC_OscConfig+0xbc>
 80044ee:	4b72      	ldr	r3, [pc, #456]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a71      	ldr	r2, [pc, #452]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	4b6f      	ldr	r3, [pc, #444]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a6e      	ldr	r2, [pc, #440]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e00b      	b.n	8004520 <HAL_RCC_OscConfig+0xd4>
 8004508:	4b6b      	ldr	r3, [pc, #428]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a6a      	ldr	r2, [pc, #424]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800450e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	4b68      	ldr	r3, [pc, #416]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a67      	ldr	r2, [pc, #412]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800451a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800451e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d013      	beq.n	8004550 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fd ff8e 	bl	8002448 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004530:	f7fd ff8a 	bl	8002448 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	@ 0x64
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e200      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004542:	4b5d      	ldr	r3, [pc, #372]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0xe4>
 800454e:	e014      	b.n	800457a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fd ff7a 	bl	8002448 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004558:	f7fd ff76 	bl	8002448 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	@ 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e1ec      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456a:	4b53      	ldr	r3, [pc, #332]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x10c>
 8004576:	e000      	b.n	800457a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d063      	beq.n	800464e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004586:	4b4c      	ldr	r3, [pc, #304]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00b      	beq.n	80045aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004592:	4b49      	ldr	r3, [pc, #292]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b08      	cmp	r3, #8
 800459c:	d11c      	bne.n	80045d8 <HAL_RCC_OscConfig+0x18c>
 800459e:	4b46      	ldr	r3, [pc, #280]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d116      	bne.n	80045d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045aa:	4b43      	ldr	r3, [pc, #268]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_RCC_OscConfig+0x176>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d001      	beq.n	80045c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e1c0      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c2:	4b3d      	ldr	r3, [pc, #244]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4939      	ldr	r1, [pc, #228]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d6:	e03a      	b.n	800464e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d020      	beq.n	8004622 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e0:	4b36      	ldr	r3, [pc, #216]	@ (80046bc <HAL_RCC_OscConfig+0x270>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fd ff2f 	bl	8002448 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ee:	f7fd ff2b 	bl	8002448 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e1a1      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004600:	4b2d      	ldr	r3, [pc, #180]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460c:	4b2a      	ldr	r3, [pc, #168]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4927      	ldr	r1, [pc, #156]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800461c:	4313      	orrs	r3, r2
 800461e:	600b      	str	r3, [r1, #0]
 8004620:	e015      	b.n	800464e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004622:	4b26      	ldr	r3, [pc, #152]	@ (80046bc <HAL_RCC_OscConfig+0x270>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fd ff0e 	bl	8002448 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004630:	f7fd ff0a 	bl	8002448 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e180      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004642:	4b1d      	ldr	r3, [pc, #116]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d03a      	beq.n	80046d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d019      	beq.n	8004696 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004662:	4b17      	ldr	r3, [pc, #92]	@ (80046c0 <HAL_RCC_OscConfig+0x274>)
 8004664:	2201      	movs	r2, #1
 8004666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004668:	f7fd feee 	bl	8002448 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004670:	f7fd feea 	bl	8002448 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e160      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004682:	4b0d      	ldr	r3, [pc, #52]	@ (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800468e:	2001      	movs	r0, #1
 8004690:	f000 face 	bl	8004c30 <RCC_Delay>
 8004694:	e01c      	b.n	80046d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004696:	4b0a      	ldr	r3, [pc, #40]	@ (80046c0 <HAL_RCC_OscConfig+0x274>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469c:	f7fd fed4 	bl	8002448 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a2:	e00f      	b.n	80046c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a4:	f7fd fed0 	bl	8002448 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d908      	bls.n	80046c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e146      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000
 80046bc:	42420000 	.word	0x42420000
 80046c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c4:	4b92      	ldr	r3, [pc, #584]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e9      	bne.n	80046a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80a6 	beq.w	800482a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046de:	2300      	movs	r3, #0
 80046e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046e2:	4b8b      	ldr	r3, [pc, #556]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10d      	bne.n	800470a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ee:	4b88      	ldr	r3, [pc, #544]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	4a87      	ldr	r2, [pc, #540]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f8:	61d3      	str	r3, [r2, #28]
 80046fa:	4b85      	ldr	r3, [pc, #532]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470a:	4b82      	ldr	r3, [pc, #520]	@ (8004914 <HAL_RCC_OscConfig+0x4c8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d118      	bne.n	8004748 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004716:	4b7f      	ldr	r3, [pc, #508]	@ (8004914 <HAL_RCC_OscConfig+0x4c8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a7e      	ldr	r2, [pc, #504]	@ (8004914 <HAL_RCC_OscConfig+0x4c8>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004722:	f7fd fe91 	bl	8002448 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fd fe8d 	bl	8002448 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b64      	cmp	r3, #100	@ 0x64
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e103      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473c:	4b75      	ldr	r3, [pc, #468]	@ (8004914 <HAL_RCC_OscConfig+0x4c8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d106      	bne.n	800475e <HAL_RCC_OscConfig+0x312>
 8004750:	4b6f      	ldr	r3, [pc, #444]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	4a6e      	ldr	r2, [pc, #440]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6213      	str	r3, [r2, #32]
 800475c:	e02d      	b.n	80047ba <HAL_RCC_OscConfig+0x36e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x334>
 8004766:	4b6a      	ldr	r3, [pc, #424]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	4a69      	ldr	r2, [pc, #420]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	6213      	str	r3, [r2, #32]
 8004772:	4b67      	ldr	r3, [pc, #412]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	4a66      	ldr	r2, [pc, #408]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	6213      	str	r3, [r2, #32]
 800477e:	e01c      	b.n	80047ba <HAL_RCC_OscConfig+0x36e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b05      	cmp	r3, #5
 8004786:	d10c      	bne.n	80047a2 <HAL_RCC_OscConfig+0x356>
 8004788:	4b61      	ldr	r3, [pc, #388]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	4a60      	ldr	r2, [pc, #384]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	6213      	str	r3, [r2, #32]
 8004794:	4b5e      	ldr	r3, [pc, #376]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	4a5d      	ldr	r2, [pc, #372]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	6213      	str	r3, [r2, #32]
 80047a0:	e00b      	b.n	80047ba <HAL_RCC_OscConfig+0x36e>
 80047a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	4a5a      	ldr	r2, [pc, #360]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	6213      	str	r3, [r2, #32]
 80047ae:	4b58      	ldr	r3, [pc, #352]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	4a57      	ldr	r2, [pc, #348]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	f023 0304 	bic.w	r3, r3, #4
 80047b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d015      	beq.n	80047ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c2:	f7fd fe41 	bl	8002448 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c8:	e00a      	b.n	80047e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ca:	f7fd fe3d 	bl	8002448 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d8:	4293      	cmp	r3, r2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e0b1      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0ee      	beq.n	80047ca <HAL_RCC_OscConfig+0x37e>
 80047ec:	e014      	b.n	8004818 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ee:	f7fd fe2b 	bl	8002448 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f4:	e00a      	b.n	800480c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fd fe27 	bl	8002448 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e09b      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480c:	4b40      	ldr	r3, [pc, #256]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1ee      	bne.n	80047f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d105      	bne.n	800482a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800481e:	4b3c      	ldr	r3, [pc, #240]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	4a3b      	ldr	r2, [pc, #236]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004828:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8087 	beq.w	8004942 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004834:	4b36      	ldr	r3, [pc, #216]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	2b08      	cmp	r3, #8
 800483e:	d061      	beq.n	8004904 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d146      	bne.n	80048d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004848:	4b33      	ldr	r3, [pc, #204]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484e:	f7fd fdfb 	bl	8002448 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004856:	f7fd fdf7 	bl	8002448 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e06d      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004868:	4b29      	ldr	r3, [pc, #164]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f0      	bne.n	8004856 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800487c:	d108      	bne.n	8004890 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800487e:	4b24      	ldr	r3, [pc, #144]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	4921      	ldr	r1, [pc, #132]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800488c:	4313      	orrs	r3, r2
 800488e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004890:	4b1f      	ldr	r3, [pc, #124]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a19      	ldr	r1, [r3, #32]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	430b      	orrs	r3, r1
 80048a2:	491b      	ldr	r1, [pc, #108]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ae:	f7fd fdcb 	bl	8002448 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b6:	f7fd fdc7 	bl	8002448 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e03d      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048c8:	4b11      	ldr	r3, [pc, #68]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x46a>
 80048d4:	e035      	b.n	8004942 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d6:	4b10      	ldr	r3, [pc, #64]	@ (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fd fdb4 	bl	8002448 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fd fdb0 	bl	8002448 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e026      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f6:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x498>
 8004902:	e01e      	b.n	8004942 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d107      	bne.n	800491c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e019      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
 8004910:	40021000 	.word	0x40021000
 8004914:	40007000 	.word	0x40007000
 8004918:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <HAL_RCC_OscConfig+0x500>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	429a      	cmp	r2, r3
 800492e:	d106      	bne.n	800493e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d001      	beq.n	8004942 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40021000 	.word	0x40021000

08004950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0d0      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004964:	4b6a      	ldr	r3, [pc, #424]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d910      	bls.n	8004994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b67      	ldr	r3, [pc, #412]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 0207 	bic.w	r2, r3, #7
 800497a:	4965      	ldr	r1, [pc, #404]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b63      	ldr	r3, [pc, #396]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0b8      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d020      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ac:	4b59      	ldr	r3, [pc, #356]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a58      	ldr	r2, [pc, #352]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c4:	4b53      	ldr	r3, [pc, #332]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	4a52      	ldr	r2, [pc, #328]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d0:	4b50      	ldr	r3, [pc, #320]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	494d      	ldr	r1, [pc, #308]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d040      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f6:	4b47      	ldr	r3, [pc, #284]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d115      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e07f      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0e:	4b41      	ldr	r3, [pc, #260]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e073      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e06b      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2e:	4b39      	ldr	r3, [pc, #228]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4936      	ldr	r1, [pc, #216]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a40:	f7fd fd02 	bl	8002448 <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a48:	f7fd fcfe 	bl	8002448 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e053      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 020c 	and.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1eb      	bne.n	8004a48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a70:	4b27      	ldr	r3, [pc, #156]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d210      	bcs.n	8004aa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b24      	ldr	r3, [pc, #144]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f023 0207 	bic.w	r2, r3, #7
 8004a86:	4922      	ldr	r1, [pc, #136]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	4b20      	ldr	r3, [pc, #128]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e032      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aac:	4b19      	ldr	r3, [pc, #100]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4916      	ldr	r1, [pc, #88]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aca:	4b12      	ldr	r3, [pc, #72]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	490e      	ldr	r1, [pc, #56]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ade:	f000 f821 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	490a      	ldr	r1, [pc, #40]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004af0:	5ccb      	ldrb	r3, [r1, r3]
 8004af2:	fa22 f303 	lsr.w	r3, r2, r3
 8004af6:	4a09      	ldr	r2, [pc, #36]	@ (8004b1c <HAL_RCC_ClockConfig+0x1cc>)
 8004af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004afa:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <HAL_RCC_ClockConfig+0x1d0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fd fc60 	bl	80023c4 <HAL_InitTick>

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40022000 	.word	0x40022000
 8004b14:	40021000 	.word	0x40021000
 8004b18:	0800a600 	.word	0x0800a600
 8004b1c:	20000020 	.word	0x20000020
 8004b20:	20000024 	.word	0x20000024

08004b24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	2300      	movs	r3, #0
 8004b38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d002      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0x30>
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d003      	beq.n	8004b5a <HAL_RCC_GetSysClockFreq+0x36>
 8004b52:	e027      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b54:	4b19      	ldr	r3, [pc, #100]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0x98>)
 8004b56:	613b      	str	r3, [r7, #16]
      break;
 8004b58:	e027      	b.n	8004baa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	0c9b      	lsrs	r3, r3, #18
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	4a17      	ldr	r2, [pc, #92]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b64:	5cd3      	ldrb	r3, [r2, r3]
 8004b66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d010      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b72:	4b11      	ldr	r3, [pc, #68]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	0c5b      	lsrs	r3, r3, #17
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	4a11      	ldr	r2, [pc, #68]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b7e:	5cd3      	ldrb	r3, [r2, r3]
 8004b80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a0d      	ldr	r2, [pc, #52]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0x98>)
 8004b86:	fb03 f202 	mul.w	r2, r3, r2
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	e004      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	613b      	str	r3, [r7, #16]
      break;
 8004ba2:	e002      	b.n	8004baa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ba4:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0x98>)
 8004ba6:	613b      	str	r3, [r7, #16]
      break;
 8004ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004baa:	693b      	ldr	r3, [r7, #16]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	007a1200 	.word	0x007a1200
 8004bc0:	0800a618 	.word	0x0800a618
 8004bc4:	0800a628 	.word	0x0800a628
 8004bc8:	003d0900 	.word	0x003d0900

08004bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd0:	4b02      	ldr	r3, [pc, #8]	@ (8004bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	20000020 	.word	0x20000020

08004be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004be4:	f7ff fff2 	bl	8004bcc <HAL_RCC_GetHCLKFreq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b05      	ldr	r3, [pc, #20]	@ (8004c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4903      	ldr	r1, [pc, #12]	@ (8004c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40021000 	.word	0x40021000
 8004c04:	0800a610 	.word	0x0800a610

08004c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c0c:	f7ff ffde 	bl	8004bcc <HAL_RCC_GetHCLKFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	0adb      	lsrs	r3, r3, #11
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4903      	ldr	r1, [pc, #12]	@ (8004c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	0800a610 	.word	0x0800a610

08004c30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c38:	4b0a      	ldr	r3, [pc, #40]	@ (8004c64 <RCC_Delay+0x34>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c68 <RCC_Delay+0x38>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	0a5b      	lsrs	r3, r3, #9
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c4c:	bf00      	nop
  }
  while (Delay --);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1e5a      	subs	r2, r3, #1
 8004c52:	60fa      	str	r2, [r7, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f9      	bne.n	8004c4c <RCC_Delay+0x1c>
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	20000020 	.word	0x20000020
 8004c68:	10624dd3 	.word	0x10624dd3

08004c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d07d      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10d      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c98:	4b4c      	ldr	r3, [pc, #304]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca2:	61d3      	str	r3, [r2, #28]
 8004ca4:	4b49      	ldr	r3, [pc, #292]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	4b46      	ldr	r3, [pc, #280]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d118      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc0:	4b43      	ldr	r3, [pc, #268]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a42      	ldr	r2, [pc, #264]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ccc:	f7fd fbbc 	bl	8002448 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd4:	f7fd fbb8 	bl	8002448 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b64      	cmp	r3, #100	@ 0x64
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e06d      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cf2:	4b36      	ldr	r3, [pc, #216]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d02e      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d027      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d10:	4b2e      	ldr	r3, [pc, #184]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d20:	4b2c      	ldr	r3, [pc, #176]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d26:	4a29      	ldr	r2, [pc, #164]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d014      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d36:	f7fd fb87 	bl	8002448 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3e:	f7fd fb83 	bl	8002448 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e036      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d54:	4b1d      	ldr	r3, [pc, #116]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0ee      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d60:	4b1a      	ldr	r3, [pc, #104]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4917      	ldr	r1, [pc, #92]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d105      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d78:	4b14      	ldr	r3, [pc, #80]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	4a13      	ldr	r2, [pc, #76]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d90:	4b0e      	ldr	r3, [pc, #56]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	490b      	ldr	r1, [pc, #44]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d008      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dae:	4b07      	ldr	r3, [pc, #28]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	4904      	ldr	r1, [pc, #16]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40007000 	.word	0x40007000
 8004dd4:	42420440 	.word	0x42420440

08004dd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	2300      	movs	r3, #0
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	2300      	movs	r3, #0
 8004dea:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	2300      	movs	r3, #0
 8004df2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d00a      	beq.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	f200 808a 	bhi.w	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d045      	beq.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d075      	beq.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004e0e:	e082      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004e10:	4b46      	ldr	r3, [pc, #280]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004e16:	4b45      	ldr	r3, [pc, #276]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d07b      	beq.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	0c9b      	lsrs	r3, r3, #18
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	4a41      	ldr	r2, [pc, #260]	@ (8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004e2c:	5cd3      	ldrb	r3, [r2, r3]
 8004e2e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d015      	beq.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e3a:	4b3c      	ldr	r3, [pc, #240]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	0c5b      	lsrs	r3, r3, #17
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	4a3b      	ldr	r2, [pc, #236]	@ (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004e46:	5cd3      	ldrb	r3, [r2, r3]
 8004e48:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00d      	beq.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004e54:	4a38      	ldr	r2, [pc, #224]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	fb02 f303 	mul.w	r3, r2, r3
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	e004      	b.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4a34      	ldr	r2, [pc, #208]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004e6a:	fb02 f303 	mul.w	r3, r2, r3
 8004e6e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004e70:	4b2e      	ldr	r3, [pc, #184]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e7c:	d102      	bne.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	61bb      	str	r3, [r7, #24]
      break;
 8004e82:	e04a      	b.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	4a2d      	ldr	r2, [pc, #180]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	61bb      	str	r3, [r7, #24]
      break;
 8004e92:	e042      	b.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004e94:	4b25      	ldr	r3, [pc, #148]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ea4:	d108      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004eb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	e01f      	b.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ec2:	d109      	bne.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004ec4:	4b19      	ldr	r3, [pc, #100]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004ed0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	e00f      	b.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ede:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ee2:	d11c      	bne.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004ee4:	4b11      	ldr	r3, [pc, #68]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d016      	beq.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004ef0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004ef4:	61bb      	str	r3, [r7, #24]
      break;
 8004ef6:	e012      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004ef8:	e011      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004efa:	f7ff fe85 	bl	8004c08 <HAL_RCC_GetPCLK2Freq>
 8004efe:	4602      	mov	r2, r0
 8004f00:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	0b9b      	lsrs	r3, r3, #14
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	61bb      	str	r3, [r7, #24]
      break;
 8004f14:	e004      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004f16:	bf00      	nop
 8004f18:	e002      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e000      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004f1e:	bf00      	nop
    }
  }
  return (frequency);
 8004f20:	69bb      	ldr	r3, [r7, #24]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	0800a62c 	.word	0x0800a62c
 8004f34:	0800a63c 	.word	0x0800a63c
 8004f38:	007a1200 	.word	0x007a1200
 8004f3c:	003d0900 	.word	0x003d0900
 8004f40:	aaaaaaab 	.word	0xaaaaaaab

08004f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e041      	b.n	8004fda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fd f80c 	bl	8001f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f000 f940 	bl	8005208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d001      	beq.n	8004ffc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e032      	b.n	8005062 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a18      	ldr	r2, [pc, #96]	@ (800506c <HAL_TIM_Base_Start+0x88>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00e      	beq.n	800502c <HAL_TIM_Base_Start+0x48>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005016:	d009      	beq.n	800502c <HAL_TIM_Base_Start+0x48>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a14      	ldr	r2, [pc, #80]	@ (8005070 <HAL_TIM_Base_Start+0x8c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_TIM_Base_Start+0x48>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a13      	ldr	r2, [pc, #76]	@ (8005074 <HAL_TIM_Base_Start+0x90>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d111      	bne.n	8005050 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b06      	cmp	r3, #6
 800503c:	d010      	beq.n	8005060 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0201 	orr.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504e:	e007      	b.n	8005060 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr
 800506c:	40012c00 	.word	0x40012c00
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800

08005078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_TIM_ConfigClockSource+0x1c>
 8005090:	2302      	movs	r3, #2
 8005092:	e0b4      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x186>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050cc:	d03e      	beq.n	800514c <HAL_TIM_ConfigClockSource+0xd4>
 80050ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050d2:	f200 8087 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050da:	f000 8086 	beq.w	80051ea <HAL_TIM_ConfigClockSource+0x172>
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e2:	d87f      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 80050e4:	2b70      	cmp	r3, #112	@ 0x70
 80050e6:	d01a      	beq.n	800511e <HAL_TIM_ConfigClockSource+0xa6>
 80050e8:	2b70      	cmp	r3, #112	@ 0x70
 80050ea:	d87b      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b60      	cmp	r3, #96	@ 0x60
 80050ee:	d050      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x11a>
 80050f0:	2b60      	cmp	r3, #96	@ 0x60
 80050f2:	d877      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 80050f4:	2b50      	cmp	r3, #80	@ 0x50
 80050f6:	d03c      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0xfa>
 80050f8:	2b50      	cmp	r3, #80	@ 0x50
 80050fa:	d873      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b40      	cmp	r3, #64	@ 0x40
 80050fe:	d058      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005100:	2b40      	cmp	r3, #64	@ 0x40
 8005102:	d86f      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b30      	cmp	r3, #48	@ 0x30
 8005106:	d064      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005108:	2b30      	cmp	r3, #48	@ 0x30
 800510a:	d86b      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b20      	cmp	r3, #32
 800510e:	d060      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005110:	2b20      	cmp	r3, #32
 8005112:	d867      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d05c      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005118:	2b10      	cmp	r3, #16
 800511a:	d05a      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x15a>
 800511c:	e062      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800512e:	f000 f950 	bl	80053d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005140:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	609a      	str	r2, [r3, #8]
      break;
 800514a:	e04f      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800515c:	f000 f939 	bl	80053d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800516e:	609a      	str	r2, [r3, #8]
      break;
 8005170:	e03c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800517e:	461a      	mov	r2, r3
 8005180:	f000 f8b0 	bl	80052e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2150      	movs	r1, #80	@ 0x50
 800518a:	4618      	mov	r0, r3
 800518c:	f000 f907 	bl	800539e <TIM_ITRx_SetConfig>
      break;
 8005190:	e02c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800519e:	461a      	mov	r2, r3
 80051a0:	f000 f8ce 	bl	8005340 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2160      	movs	r1, #96	@ 0x60
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 f8f7 	bl	800539e <TIM_ITRx_SetConfig>
      break;
 80051b0:	e01c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051be:	461a      	mov	r2, r3
 80051c0:	f000 f890 	bl	80052e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2140      	movs	r1, #64	@ 0x40
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 f8e7 	bl	800539e <TIM_ITRx_SetConfig>
      break;
 80051d0:	e00c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f000 f8de 	bl	800539e <TIM_ITRx_SetConfig>
      break;
 80051e2:	e003      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
      break;
 80051e8:	e000      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a2f      	ldr	r2, [pc, #188]	@ (80052d8 <TIM_Base_SetConfig+0xd0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00b      	beq.n	8005238 <TIM_Base_SetConfig+0x30>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005226:	d007      	beq.n	8005238 <TIM_Base_SetConfig+0x30>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a2c      	ldr	r2, [pc, #176]	@ (80052dc <TIM_Base_SetConfig+0xd4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_Base_SetConfig+0x30>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a2b      	ldr	r2, [pc, #172]	@ (80052e0 <TIM_Base_SetConfig+0xd8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d108      	bne.n	800524a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800523e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a22      	ldr	r2, [pc, #136]	@ (80052d8 <TIM_Base_SetConfig+0xd0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00b      	beq.n	800526a <TIM_Base_SetConfig+0x62>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005258:	d007      	beq.n	800526a <TIM_Base_SetConfig+0x62>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a1f      	ldr	r2, [pc, #124]	@ (80052dc <TIM_Base_SetConfig+0xd4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d003      	beq.n	800526a <TIM_Base_SetConfig+0x62>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a1e      	ldr	r2, [pc, #120]	@ (80052e0 <TIM_Base_SetConfig+0xd8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d108      	bne.n	800527c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a0d      	ldr	r2, [pc, #52]	@ (80052d8 <TIM_Base_SetConfig+0xd0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d103      	bne.n	80052b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f023 0201 	bic.w	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	611a      	str	r2, [r3, #16]
  }
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800

080052e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f023 0201 	bic.w	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800530e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f023 030a 	bic.w	r3, r3, #10
 8005320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f023 0210 	bic.w	r2, r3, #16
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800536a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	031b      	lsls	r3, r3, #12
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800537c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	621a      	str	r2, [r3, #32]
}
 8005394:	bf00      	nop
 8005396:	371c      	adds	r7, #28
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr

0800539e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f043 0307 	orr.w	r3, r3, #7
 80053c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	609a      	str	r2, [r3, #8]
}
 80053c8:	bf00      	nop
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b087      	sub	sp, #28
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	021a      	lsls	r2, r3, #8
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	431a      	orrs	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	609a      	str	r2, [r3, #8]
}
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005424:	2302      	movs	r3, #2
 8005426:	e046      	b.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a16      	ldr	r2, [pc, #88]	@ (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00e      	beq.n	800548a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005474:	d009      	beq.n	800548a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a12      	ldr	r2, [pc, #72]	@ (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a10      	ldr	r2, [pc, #64]	@ (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d10c      	bne.n	80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	4313      	orrs	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr
 80054c0:	40012c00 	.word	0x40012c00
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40000800 	.word	0x40000800

080054cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e042      	b.n	8005564 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fc fd64 	bl	8001fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2224      	movs	r2, #36	@ 0x24
 80054fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800550e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fdb7 	bl	8006084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695a      	ldr	r2, [r3, #20]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	@ 0x28
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b20      	cmp	r3, #32
 800558a:	d175      	bne.n	8005678 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_UART_Transmit+0x2c>
 8005592:	88fb      	ldrh	r3, [r7, #6]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e06e      	b.n	800567a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2221      	movs	r2, #33	@ 0x21
 80055a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055aa:	f7fc ff4d 	bl	8002448 <HAL_GetTick>
 80055ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	88fa      	ldrh	r2, [r7, #6]
 80055b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	88fa      	ldrh	r2, [r7, #6]
 80055ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055c4:	d108      	bne.n	80055d8 <HAL_UART_Transmit+0x6c>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d104      	bne.n	80055d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	e003      	b.n	80055e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055e0:	e02e      	b.n	8005640 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2200      	movs	r2, #0
 80055ea:	2180      	movs	r1, #128	@ 0x80
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 fb1c 	bl	8005c2a <UART_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e03a      	b.n	800567a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10b      	bne.n	8005622 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005618:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	3302      	adds	r3, #2
 800561e:	61bb      	str	r3, [r7, #24]
 8005620:	e007      	b.n	8005632 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	3301      	adds	r3, #1
 8005630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1cb      	bne.n	80055e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2200      	movs	r2, #0
 8005652:	2140      	movs	r1, #64	@ 0x40
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 fae8 	bl	8005c2a <UART_WaitOnFlagUntilTimeout>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e006      	b.n	800567a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005674:	2300      	movs	r3, #0
 8005676:	e000      	b.n	800567a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005678:	2302      	movs	r3, #2
  }
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	4613      	mov	r3, r2
 800568e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b20      	cmp	r3, #32
 800569a:	d112      	bne.n	80056c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_UART_Receive_IT+0x26>
 80056a2:	88fb      	ldrh	r3, [r7, #6]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e00b      	b.n	80056c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	461a      	mov	r2, r3
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 fb0f 	bl	8005cdc <UART_Start_Receive_IT>
 80056be:	4603      	mov	r3, r0
 80056c0:	e000      	b.n	80056c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056c2:	2302      	movs	r3, #2
  }
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b0ba      	sub	sp, #232	@ 0xe8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800570a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10f      	bne.n	8005732 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d009      	beq.n	8005732 <HAL_UART_IRQHandler+0x66>
 800571e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fbec 	bl	8005f08 <UART_Receive_IT>
      return;
 8005730:	e25b      	b.n	8005bea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 80de 	beq.w	80058f8 <HAL_UART_IRQHandler+0x22c>
 800573c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d106      	bne.n	8005756 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800574c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80d1 	beq.w	80058f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <HAL_UART_IRQHandler+0xae>
 8005762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	f043 0201 	orr.w	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800577a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800577e:	f003 0304 	and.w	r3, r3, #4
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00b      	beq.n	800579e <HAL_UART_IRQHandler+0xd2>
 8005786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005796:	f043 0202 	orr.w	r2, r3, #2
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800579e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00b      	beq.n	80057c2 <HAL_UART_IRQHandler+0xf6>
 80057aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ba:	f043 0204 	orr.w	r2, r3, #4
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d011      	beq.n	80057f2 <HAL_UART_IRQHandler+0x126>
 80057ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d105      	bne.n	80057e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ea:	f043 0208 	orr.w	r2, r3, #8
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 81f2 	beq.w	8005be0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b00      	cmp	r3, #0
 8005806:	d008      	beq.n	800581a <HAL_UART_IRQHandler+0x14e>
 8005808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fb77 	bl	8005f08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	bf14      	ite	ne
 8005828:	2301      	movne	r3, #1
 800582a:	2300      	moveq	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d103      	bne.n	8005846 <HAL_UART_IRQHandler+0x17a>
 800583e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d04f      	beq.n	80058e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fa81 	bl	8005d4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d041      	beq.n	80058de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3314      	adds	r3, #20
 8005860:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005870:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005874:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3314      	adds	r3, #20
 8005882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005886:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800588a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800589e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1d9      	bne.n	800585a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d013      	beq.n	80058d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b2:	4a7e      	ldr	r2, [pc, #504]	@ (8005aac <HAL_UART_IRQHandler+0x3e0>)
 80058b4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fd fb66 	bl	8002f8c <HAL_DMA_Abort_IT>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d016      	beq.n	80058f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058d0:	4610      	mov	r0, r2
 80058d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d4:	e00e      	b.n	80058f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f993 	bl	8005c02 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058dc:	e00a      	b.n	80058f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f98f 	bl	8005c02 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e4:	e006      	b.n	80058f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f98b 	bl	8005c02 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80058f2:	e175      	b.n	8005be0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f4:	bf00      	nop
    return;
 80058f6:	e173      	b.n	8005be0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	f040 814f 	bne.w	8005ba0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 8148 	beq.w	8005ba0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005914:	f003 0310 	and.w	r3, r3, #16
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8141 	beq.w	8005ba0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800591e:	2300      	movs	r3, #0
 8005920:	60bb      	str	r3, [r7, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 80b6 	beq.w	8005ab0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005950:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8145 	beq.w	8005be4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800595e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005962:	429a      	cmp	r2, r3
 8005964:	f080 813e 	bcs.w	8005be4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800596e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b20      	cmp	r3, #32
 8005978:	f000 8088 	beq.w	8005a8c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	330c      	adds	r3, #12
 8005982:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005992:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005996:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800599a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	330c      	adds	r3, #12
 80059a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80059a8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1d9      	bne.n	800597c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3314      	adds	r3, #20
 80059ce:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059da:	f023 0301 	bic.w	r3, r3, #1
 80059de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3314      	adds	r3, #20
 80059e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059ec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e1      	bne.n	80059c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3314      	adds	r3, #20
 8005a0a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3314      	adds	r3, #20
 8005a24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a28:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a2a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a2e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e3      	bne.n	8005a04 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	330c      	adds	r3, #12
 8005a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a5c:	f023 0310 	bic.w	r3, r3, #16
 8005a60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a6e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a70:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e3      	bne.n	8005a4a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fd fa45 	bl	8002f16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f8b6 	bl	8005c14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aa8:	e09c      	b.n	8005be4 <HAL_UART_IRQHandler+0x518>
 8005aaa:	bf00      	nop
 8005aac:	08005e13 	.word	0x08005e13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 808e 	beq.w	8005be8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 8089 	beq.w	8005be8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005afa:	647a      	str	r2, [r7, #68]	@ 0x44
 8005afc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e3      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3314      	adds	r3, #20
 8005b14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3314      	adds	r3, #20
 8005b2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b32:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e3      	bne.n	8005b0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0310 	bic.w	r3, r3, #16
 8005b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b78:	61fa      	str	r2, [r7, #28]
 8005b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	69b9      	ldr	r1, [r7, #24]
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	617b      	str	r3, [r7, #20]
   return(result);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e3      	bne.n	8005b54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b96:	4619      	mov	r1, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f83b 	bl	8005c14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b9e:	e023      	b.n	8005be8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d009      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x4f4>
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f93e 	bl	8005e3a <UART_Transmit_IT>
    return;
 8005bbe:	e014      	b.n	8005bea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00e      	beq.n	8005bea <HAL_UART_IRQHandler+0x51e>
 8005bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f97d 	bl	8005ed8 <UART_EndTransmit_IT>
    return;
 8005bde:	e004      	b.n	8005bea <HAL_UART_IRQHandler+0x51e>
    return;
 8005be0:	bf00      	nop
 8005be2:	e002      	b.n	8005bea <HAL_UART_IRQHandler+0x51e>
      return;
 8005be4:	bf00      	nop
 8005be6:	e000      	b.n	8005bea <HAL_UART_IRQHandler+0x51e>
      return;
 8005be8:	bf00      	nop
  }
}
 8005bea:	37e8      	adds	r7, #232	@ 0xe8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr

08005c02 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr

08005c14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b086      	sub	sp, #24
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	603b      	str	r3, [r7, #0]
 8005c36:	4613      	mov	r3, r2
 8005c38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c3a:	e03b      	b.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d037      	beq.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c44:	f7fc fc00 	bl	8002448 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	6a3a      	ldr	r2, [r7, #32]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d302      	bcc.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x30>
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e03a      	b.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d023      	beq.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b80      	cmp	r3, #128	@ 0x80
 8005c70:	d020      	beq.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b40      	cmp	r3, #64	@ 0x40
 8005c76:	d01d      	beq.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d116      	bne.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c86:	2300      	movs	r3, #0
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f856 	bl	8005d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e00f      	b.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	bf0c      	ite	eq
 8005cc4:	2301      	moveq	r3, #1
 8005cc6:	2300      	movne	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d0b4      	beq.n	8005c3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	88fa      	ldrh	r2, [r7, #6]
 8005cf4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	88fa      	ldrh	r2, [r7, #6]
 8005cfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2222      	movs	r2, #34	@ 0x22
 8005d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0201 	orr.w	r2, r2, #1
 8005d30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 0220 	orr.w	r2, r2, #32
 8005d40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr

08005d4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b095      	sub	sp, #84	@ 0x54
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	330c      	adds	r3, #12
 8005d5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	330c      	adds	r3, #12
 8005d74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d76:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e5      	bne.n	8005d56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3314      	adds	r3, #20
 8005d90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	f023 0301 	bic.w	r3, r3, #1
 8005da0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3314      	adds	r3, #20
 8005da8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005daa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005db0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e5      	bne.n	8005d8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d119      	bne.n	8005dfa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f023 0310 	bic.w	r3, r3, #16
 8005ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	330c      	adds	r3, #12
 8005de4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005de6:	61ba      	str	r2, [r7, #24]
 8005de8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6979      	ldr	r1, [r7, #20]
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	613b      	str	r3, [r7, #16]
   return(result);
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e5      	bne.n	8005dc6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e08:	bf00      	nop
 8005e0a:	3754      	adds	r7, #84	@ 0x54
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr

08005e12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f7ff fee8 	bl	8005c02 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e32:	bf00      	nop
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b21      	cmp	r3, #33	@ 0x21
 8005e4c:	d13e      	bne.n	8005ecc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e56:	d114      	bne.n	8005e82 <UART_Transmit_IT+0x48>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d110      	bne.n	8005e82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	1c9a      	adds	r2, r3, #2
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	621a      	str	r2, [r3, #32]
 8005e80:	e008      	b.n	8005e94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	1c59      	adds	r1, r3, #1
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6211      	str	r1, [r2, #32]
 8005e8c:	781a      	ldrb	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10f      	bne.n	8005ec8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005eb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ec6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e000      	b.n	8005ece <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ecc:	2302      	movs	r3, #2
  }
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff fe79 	bl	8005bf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08c      	sub	sp, #48	@ 0x30
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b22      	cmp	r3, #34	@ 0x22
 8005f1a:	f040 80ae 	bne.w	800607a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f26:	d117      	bne.n	8005f58 <UART_Receive_IT+0x50>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d113      	bne.n	8005f58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f30:	2300      	movs	r3, #0
 8005f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f50:	1c9a      	adds	r2, r3, #2
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f56:	e026      	b.n	8005fa6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f6a:	d007      	beq.n	8005f7c <UART_Receive_IT+0x74>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <UART_Receive_IT+0x82>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d106      	bne.n	8005f8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	e008      	b.n	8005f9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d15d      	bne.n	8006076 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0220 	bic.w	r2, r2, #32
 8005fc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695a      	ldr	r2, [r3, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0201 	bic.w	r2, r2, #1
 8005fe8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d135      	bne.n	800606c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	330c      	adds	r3, #12
 800600c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	613b      	str	r3, [r7, #16]
   return(result);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f023 0310 	bic.w	r3, r3, #16
 800601c:	627b      	str	r3, [r7, #36]	@ 0x24
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	330c      	adds	r3, #12
 8006024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006026:	623a      	str	r2, [r7, #32]
 8006028:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	69f9      	ldr	r1, [r7, #28]
 800602c:	6a3a      	ldr	r2, [r7, #32]
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	61bb      	str	r3, [r7, #24]
   return(result);
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e5      	bne.n	8006006 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b10      	cmp	r3, #16
 8006046:	d10a      	bne.n	800605e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fdd5 	bl	8005c14 <HAL_UARTEx_RxEventCallback>
 800606a:	e002      	b.n	8006072 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fb faf7 	bl	8001660 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	e002      	b.n	800607c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	e000      	b.n	800607c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800607a:	2302      	movs	r3, #2
  }
}
 800607c:	4618      	mov	r0, r3
 800607e:	3730      	adds	r7, #48	@ 0x30
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80060be:	f023 030c 	bic.w	r3, r3, #12
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6812      	ldr	r2, [r2, #0]
 80060c6:	68b9      	ldr	r1, [r7, #8]
 80060c8:	430b      	orrs	r3, r1
 80060ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006198 <UART_SetConfig+0x114>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d103      	bne.n	80060f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060ec:	f7fe fd8c 	bl	8004c08 <HAL_RCC_GetPCLK2Freq>
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	e002      	b.n	80060fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80060f4:	f7fe fd74 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 80060f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	009a      	lsls	r2, r3, #2
 8006104:	441a      	add	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006110:	4a22      	ldr	r2, [pc, #136]	@ (800619c <UART_SetConfig+0x118>)
 8006112:	fba2 2303 	umull	r2, r3, r2, r3
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	0119      	lsls	r1, r3, #4
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009a      	lsls	r2, r3, #2
 8006124:	441a      	add	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006130:	4b1a      	ldr	r3, [pc, #104]	@ (800619c <UART_SetConfig+0x118>)
 8006132:	fba3 0302 	umull	r0, r3, r3, r2
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	2064      	movs	r0, #100	@ 0x64
 800613a:	fb00 f303 	mul.w	r3, r0, r3
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	3332      	adds	r3, #50	@ 0x32
 8006144:	4a15      	ldr	r2, [pc, #84]	@ (800619c <UART_SetConfig+0x118>)
 8006146:	fba2 2303 	umull	r2, r3, r2, r3
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006150:	4419      	add	r1, r3
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	009a      	lsls	r2, r3, #2
 800615c:	441a      	add	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	fbb2 f2f3 	udiv	r2, r2, r3
 8006168:	4b0c      	ldr	r3, [pc, #48]	@ (800619c <UART_SetConfig+0x118>)
 800616a:	fba3 0302 	umull	r0, r3, r3, r2
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	2064      	movs	r0, #100	@ 0x64
 8006172:	fb00 f303 	mul.w	r3, r0, r3
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	3332      	adds	r3, #50	@ 0x32
 800617c:	4a07      	ldr	r2, [pc, #28]	@ (800619c <UART_SetConfig+0x118>)
 800617e:	fba2 2303 	umull	r2, r3, r2, r3
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	f003 020f 	and.w	r2, r3, #15
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	440a      	add	r2, r1
 800618e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40013800 	.word	0x40013800
 800619c:	51eb851f 	.word	0x51eb851f

080061a0 <atof>:
 80061a0:	2100      	movs	r1, #0
 80061a2:	f000 bdf9 	b.w	8006d98 <strtod>

080061a6 <sulp>:
 80061a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061aa:	460f      	mov	r7, r1
 80061ac:	4690      	mov	r8, r2
 80061ae:	f003 fb01 	bl	80097b4 <__ulp>
 80061b2:	4604      	mov	r4, r0
 80061b4:	460d      	mov	r5, r1
 80061b6:	f1b8 0f00 	cmp.w	r8, #0
 80061ba:	d011      	beq.n	80061e0 <sulp+0x3a>
 80061bc:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80061c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dd0b      	ble.n	80061e0 <sulp+0x3a>
 80061c8:	2400      	movs	r4, #0
 80061ca:	051b      	lsls	r3, r3, #20
 80061cc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80061d0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80061d4:	4622      	mov	r2, r4
 80061d6:	462b      	mov	r3, r5
 80061d8:	f7fa f97e 	bl	80004d8 <__aeabi_dmul>
 80061dc:	4604      	mov	r4, r0
 80061de:	460d      	mov	r5, r1
 80061e0:	4620      	mov	r0, r4
 80061e2:	4629      	mov	r1, r5
 80061e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080061e8 <_strtod_l>:
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	b09f      	sub	sp, #124	@ 0x7c
 80061ee:	9217      	str	r2, [sp, #92]	@ 0x5c
 80061f0:	2200      	movs	r2, #0
 80061f2:	460c      	mov	r4, r1
 80061f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80061f6:	f04f 0a00 	mov.w	sl, #0
 80061fa:	f04f 0b00 	mov.w	fp, #0
 80061fe:	460a      	mov	r2, r1
 8006200:	9005      	str	r0, [sp, #20]
 8006202:	9219      	str	r2, [sp, #100]	@ 0x64
 8006204:	7811      	ldrb	r1, [r2, #0]
 8006206:	292b      	cmp	r1, #43	@ 0x2b
 8006208:	d048      	beq.n	800629c <_strtod_l+0xb4>
 800620a:	d836      	bhi.n	800627a <_strtod_l+0x92>
 800620c:	290d      	cmp	r1, #13
 800620e:	d830      	bhi.n	8006272 <_strtod_l+0x8a>
 8006210:	2908      	cmp	r1, #8
 8006212:	d830      	bhi.n	8006276 <_strtod_l+0x8e>
 8006214:	2900      	cmp	r1, #0
 8006216:	d039      	beq.n	800628c <_strtod_l+0xa4>
 8006218:	2200      	movs	r2, #0
 800621a:	920e      	str	r2, [sp, #56]	@ 0x38
 800621c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800621e:	782a      	ldrb	r2, [r5, #0]
 8006220:	2a30      	cmp	r2, #48	@ 0x30
 8006222:	f040 80b0 	bne.w	8006386 <_strtod_l+0x19e>
 8006226:	786a      	ldrb	r2, [r5, #1]
 8006228:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800622c:	2a58      	cmp	r2, #88	@ 0x58
 800622e:	d16c      	bne.n	800630a <_strtod_l+0x122>
 8006230:	9302      	str	r3, [sp, #8]
 8006232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006234:	4a8f      	ldr	r2, [pc, #572]	@ (8006474 <_strtod_l+0x28c>)
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	ab1a      	add	r3, sp, #104	@ 0x68
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	9805      	ldr	r0, [sp, #20]
 800623e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006240:	a919      	add	r1, sp, #100	@ 0x64
 8006242:	f002 fbb1 	bl	80089a8 <__gethex>
 8006246:	f010 060f 	ands.w	r6, r0, #15
 800624a:	4604      	mov	r4, r0
 800624c:	d005      	beq.n	800625a <_strtod_l+0x72>
 800624e:	2e06      	cmp	r6, #6
 8006250:	d126      	bne.n	80062a0 <_strtod_l+0xb8>
 8006252:	2300      	movs	r3, #0
 8006254:	3501      	adds	r5, #1
 8006256:	9519      	str	r5, [sp, #100]	@ 0x64
 8006258:	930e      	str	r3, [sp, #56]	@ 0x38
 800625a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800625c:	2b00      	cmp	r3, #0
 800625e:	f040 8582 	bne.w	8006d66 <_strtod_l+0xb7e>
 8006262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006264:	b1bb      	cbz	r3, 8006296 <_strtod_l+0xae>
 8006266:	4650      	mov	r0, sl
 8006268:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800626c:	b01f      	add	sp, #124	@ 0x7c
 800626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006272:	2920      	cmp	r1, #32
 8006274:	d1d0      	bne.n	8006218 <_strtod_l+0x30>
 8006276:	3201      	adds	r2, #1
 8006278:	e7c3      	b.n	8006202 <_strtod_l+0x1a>
 800627a:	292d      	cmp	r1, #45	@ 0x2d
 800627c:	d1cc      	bne.n	8006218 <_strtod_l+0x30>
 800627e:	2101      	movs	r1, #1
 8006280:	910e      	str	r1, [sp, #56]	@ 0x38
 8006282:	1c51      	adds	r1, r2, #1
 8006284:	9119      	str	r1, [sp, #100]	@ 0x64
 8006286:	7852      	ldrb	r2, [r2, #1]
 8006288:	2a00      	cmp	r2, #0
 800628a:	d1c7      	bne.n	800621c <_strtod_l+0x34>
 800628c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800628e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006290:	2b00      	cmp	r3, #0
 8006292:	f040 8566 	bne.w	8006d62 <_strtod_l+0xb7a>
 8006296:	4650      	mov	r0, sl
 8006298:	4659      	mov	r1, fp
 800629a:	e7e7      	b.n	800626c <_strtod_l+0x84>
 800629c:	2100      	movs	r1, #0
 800629e:	e7ef      	b.n	8006280 <_strtod_l+0x98>
 80062a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80062a2:	b13a      	cbz	r2, 80062b4 <_strtod_l+0xcc>
 80062a4:	2135      	movs	r1, #53	@ 0x35
 80062a6:	a81c      	add	r0, sp, #112	@ 0x70
 80062a8:	f003 fb74 	bl	8009994 <__copybits>
 80062ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80062ae:	9805      	ldr	r0, [sp, #20]
 80062b0:	f002 ff54 	bl	800915c <_Bfree>
 80062b4:	3e01      	subs	r6, #1
 80062b6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80062b8:	2e04      	cmp	r6, #4
 80062ba:	d806      	bhi.n	80062ca <_strtod_l+0xe2>
 80062bc:	e8df f006 	tbb	[pc, r6]
 80062c0:	201d0314 	.word	0x201d0314
 80062c4:	14          	.byte	0x14
 80062c5:	00          	.byte	0x00
 80062c6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80062ca:	05e1      	lsls	r1, r4, #23
 80062cc:	bf48      	it	mi
 80062ce:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80062d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80062d6:	0d1b      	lsrs	r3, r3, #20
 80062d8:	051b      	lsls	r3, r3, #20
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1bd      	bne.n	800625a <_strtod_l+0x72>
 80062de:	f001 fbdf 	bl	8007aa0 <__errno>
 80062e2:	2322      	movs	r3, #34	@ 0x22
 80062e4:	6003      	str	r3, [r0, #0]
 80062e6:	e7b8      	b.n	800625a <_strtod_l+0x72>
 80062e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80062ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80062f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80062f4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80062f8:	e7e7      	b.n	80062ca <_strtod_l+0xe2>
 80062fa:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006478 <_strtod_l+0x290>
 80062fe:	e7e4      	b.n	80062ca <_strtod_l+0xe2>
 8006300:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006304:	f04f 3aff 	mov.w	sl, #4294967295
 8006308:	e7df      	b.n	80062ca <_strtod_l+0xe2>
 800630a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	2b30      	cmp	r3, #48	@ 0x30
 8006314:	d0f9      	beq.n	800630a <_strtod_l+0x122>
 8006316:	2b00      	cmp	r3, #0
 8006318:	d09f      	beq.n	800625a <_strtod_l+0x72>
 800631a:	2301      	movs	r3, #1
 800631c:	2700      	movs	r7, #0
 800631e:	220a      	movs	r2, #10
 8006320:	46b9      	mov	r9, r7
 8006322:	9308      	str	r3, [sp, #32]
 8006324:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006326:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006328:	930c      	str	r3, [sp, #48]	@ 0x30
 800632a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800632c:	7805      	ldrb	r5, [r0, #0]
 800632e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006332:	b2d9      	uxtb	r1, r3
 8006334:	2909      	cmp	r1, #9
 8006336:	d928      	bls.n	800638a <_strtod_l+0x1a2>
 8006338:	2201      	movs	r2, #1
 800633a:	4950      	ldr	r1, [pc, #320]	@ (800647c <_strtod_l+0x294>)
 800633c:	f001 faf7 	bl	800792e <strncmp>
 8006340:	2800      	cmp	r0, #0
 8006342:	d032      	beq.n	80063aa <_strtod_l+0x1c2>
 8006344:	2000      	movs	r0, #0
 8006346:	462a      	mov	r2, r5
 8006348:	4603      	mov	r3, r0
 800634a:	464d      	mov	r5, r9
 800634c:	900a      	str	r0, [sp, #40]	@ 0x28
 800634e:	2a65      	cmp	r2, #101	@ 0x65
 8006350:	d001      	beq.n	8006356 <_strtod_l+0x16e>
 8006352:	2a45      	cmp	r2, #69	@ 0x45
 8006354:	d114      	bne.n	8006380 <_strtod_l+0x198>
 8006356:	b91d      	cbnz	r5, 8006360 <_strtod_l+0x178>
 8006358:	9a08      	ldr	r2, [sp, #32]
 800635a:	4302      	orrs	r2, r0
 800635c:	d096      	beq.n	800628c <_strtod_l+0xa4>
 800635e:	2500      	movs	r5, #0
 8006360:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006362:	1c62      	adds	r2, r4, #1
 8006364:	9219      	str	r2, [sp, #100]	@ 0x64
 8006366:	7862      	ldrb	r2, [r4, #1]
 8006368:	2a2b      	cmp	r2, #43	@ 0x2b
 800636a:	d07a      	beq.n	8006462 <_strtod_l+0x27a>
 800636c:	2a2d      	cmp	r2, #45	@ 0x2d
 800636e:	d07e      	beq.n	800646e <_strtod_l+0x286>
 8006370:	f04f 0c00 	mov.w	ip, #0
 8006374:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006378:	2909      	cmp	r1, #9
 800637a:	f240 8085 	bls.w	8006488 <_strtod_l+0x2a0>
 800637e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006380:	f04f 0800 	mov.w	r8, #0
 8006384:	e0a5      	b.n	80064d2 <_strtod_l+0x2ea>
 8006386:	2300      	movs	r3, #0
 8006388:	e7c8      	b.n	800631c <_strtod_l+0x134>
 800638a:	f1b9 0f08 	cmp.w	r9, #8
 800638e:	bfd8      	it	le
 8006390:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006392:	f100 0001 	add.w	r0, r0, #1
 8006396:	bfd6      	itet	le
 8006398:	fb02 3301 	mlale	r3, r2, r1, r3
 800639c:	fb02 3707 	mlagt	r7, r2, r7, r3
 80063a0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80063a2:	f109 0901 	add.w	r9, r9, #1
 80063a6:	9019      	str	r0, [sp, #100]	@ 0x64
 80063a8:	e7bf      	b.n	800632a <_strtod_l+0x142>
 80063aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80063b0:	785a      	ldrb	r2, [r3, #1]
 80063b2:	f1b9 0f00 	cmp.w	r9, #0
 80063b6:	d03b      	beq.n	8006430 <_strtod_l+0x248>
 80063b8:	464d      	mov	r5, r9
 80063ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80063bc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80063c0:	2b09      	cmp	r3, #9
 80063c2:	d912      	bls.n	80063ea <_strtod_l+0x202>
 80063c4:	2301      	movs	r3, #1
 80063c6:	e7c2      	b.n	800634e <_strtod_l+0x166>
 80063c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063ca:	3001      	adds	r0, #1
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80063d0:	785a      	ldrb	r2, [r3, #1]
 80063d2:	2a30      	cmp	r2, #48	@ 0x30
 80063d4:	d0f8      	beq.n	80063c8 <_strtod_l+0x1e0>
 80063d6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80063da:	2b08      	cmp	r3, #8
 80063dc:	f200 84c8 	bhi.w	8006d70 <_strtod_l+0xb88>
 80063e0:	900a      	str	r0, [sp, #40]	@ 0x28
 80063e2:	2000      	movs	r0, #0
 80063e4:	4605      	mov	r5, r0
 80063e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80063ea:	3a30      	subs	r2, #48	@ 0x30
 80063ec:	f100 0301 	add.w	r3, r0, #1
 80063f0:	d018      	beq.n	8006424 <_strtod_l+0x23c>
 80063f2:	462e      	mov	r6, r5
 80063f4:	f04f 0e0a 	mov.w	lr, #10
 80063f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063fa:	4419      	add	r1, r3
 80063fc:	910a      	str	r1, [sp, #40]	@ 0x28
 80063fe:	1c71      	adds	r1, r6, #1
 8006400:	eba1 0c05 	sub.w	ip, r1, r5
 8006404:	4563      	cmp	r3, ip
 8006406:	dc15      	bgt.n	8006434 <_strtod_l+0x24c>
 8006408:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800640c:	182b      	adds	r3, r5, r0
 800640e:	2b08      	cmp	r3, #8
 8006410:	f105 0501 	add.w	r5, r5, #1
 8006414:	4405      	add	r5, r0
 8006416:	dc1a      	bgt.n	800644e <_strtod_l+0x266>
 8006418:	230a      	movs	r3, #10
 800641a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800641c:	fb03 2301 	mla	r3, r3, r1, r2
 8006420:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006422:	2300      	movs	r3, #0
 8006424:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006426:	4618      	mov	r0, r3
 8006428:	1c51      	adds	r1, r2, #1
 800642a:	9119      	str	r1, [sp, #100]	@ 0x64
 800642c:	7852      	ldrb	r2, [r2, #1]
 800642e:	e7c5      	b.n	80063bc <_strtod_l+0x1d4>
 8006430:	4648      	mov	r0, r9
 8006432:	e7ce      	b.n	80063d2 <_strtod_l+0x1ea>
 8006434:	2e08      	cmp	r6, #8
 8006436:	dc05      	bgt.n	8006444 <_strtod_l+0x25c>
 8006438:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800643a:	fb0e f606 	mul.w	r6, lr, r6
 800643e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006440:	460e      	mov	r6, r1
 8006442:	e7dc      	b.n	80063fe <_strtod_l+0x216>
 8006444:	2910      	cmp	r1, #16
 8006446:	bfd8      	it	le
 8006448:	fb0e f707 	mulle.w	r7, lr, r7
 800644c:	e7f8      	b.n	8006440 <_strtod_l+0x258>
 800644e:	2b0f      	cmp	r3, #15
 8006450:	bfdc      	itt	le
 8006452:	230a      	movle	r3, #10
 8006454:	fb03 2707 	mlale	r7, r3, r7, r2
 8006458:	e7e3      	b.n	8006422 <_strtod_l+0x23a>
 800645a:	2300      	movs	r3, #0
 800645c:	930a      	str	r3, [sp, #40]	@ 0x28
 800645e:	2301      	movs	r3, #1
 8006460:	e77a      	b.n	8006358 <_strtod_l+0x170>
 8006462:	f04f 0c00 	mov.w	ip, #0
 8006466:	1ca2      	adds	r2, r4, #2
 8006468:	9219      	str	r2, [sp, #100]	@ 0x64
 800646a:	78a2      	ldrb	r2, [r4, #2]
 800646c:	e782      	b.n	8006374 <_strtod_l+0x18c>
 800646e:	f04f 0c01 	mov.w	ip, #1
 8006472:	e7f8      	b.n	8006466 <_strtod_l+0x27e>
 8006474:	0800a880 	.word	0x0800a880
 8006478:	7ff00000 	.word	0x7ff00000
 800647c:	0800a63e 	.word	0x0800a63e
 8006480:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006482:	1c51      	adds	r1, r2, #1
 8006484:	9119      	str	r1, [sp, #100]	@ 0x64
 8006486:	7852      	ldrb	r2, [r2, #1]
 8006488:	2a30      	cmp	r2, #48	@ 0x30
 800648a:	d0f9      	beq.n	8006480 <_strtod_l+0x298>
 800648c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006490:	2908      	cmp	r1, #8
 8006492:	f63f af75 	bhi.w	8006380 <_strtod_l+0x198>
 8006496:	f04f 080a 	mov.w	r8, #10
 800649a:	3a30      	subs	r2, #48	@ 0x30
 800649c:	9209      	str	r2, [sp, #36]	@ 0x24
 800649e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80064a0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80064a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80064a4:	1c56      	adds	r6, r2, #1
 80064a6:	9619      	str	r6, [sp, #100]	@ 0x64
 80064a8:	7852      	ldrb	r2, [r2, #1]
 80064aa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80064ae:	f1be 0f09 	cmp.w	lr, #9
 80064b2:	d939      	bls.n	8006528 <_strtod_l+0x340>
 80064b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80064b6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80064ba:	1a76      	subs	r6, r6, r1
 80064bc:	2e08      	cmp	r6, #8
 80064be:	dc03      	bgt.n	80064c8 <_strtod_l+0x2e0>
 80064c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80064c2:	4588      	cmp	r8, r1
 80064c4:	bfa8      	it	ge
 80064c6:	4688      	movge	r8, r1
 80064c8:	f1bc 0f00 	cmp.w	ip, #0
 80064cc:	d001      	beq.n	80064d2 <_strtod_l+0x2ea>
 80064ce:	f1c8 0800 	rsb	r8, r8, #0
 80064d2:	2d00      	cmp	r5, #0
 80064d4:	d14e      	bne.n	8006574 <_strtod_l+0x38c>
 80064d6:	9908      	ldr	r1, [sp, #32]
 80064d8:	4308      	orrs	r0, r1
 80064da:	f47f aebe 	bne.w	800625a <_strtod_l+0x72>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f47f aed4 	bne.w	800628c <_strtod_l+0xa4>
 80064e4:	2a69      	cmp	r2, #105	@ 0x69
 80064e6:	d028      	beq.n	800653a <_strtod_l+0x352>
 80064e8:	dc25      	bgt.n	8006536 <_strtod_l+0x34e>
 80064ea:	2a49      	cmp	r2, #73	@ 0x49
 80064ec:	d025      	beq.n	800653a <_strtod_l+0x352>
 80064ee:	2a4e      	cmp	r2, #78	@ 0x4e
 80064f0:	f47f aecc 	bne.w	800628c <_strtod_l+0xa4>
 80064f4:	4999      	ldr	r1, [pc, #612]	@ (800675c <_strtod_l+0x574>)
 80064f6:	a819      	add	r0, sp, #100	@ 0x64
 80064f8:	f002 fc78 	bl	8008dec <__match>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	f43f aec5 	beq.w	800628c <_strtod_l+0xa4>
 8006502:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b28      	cmp	r3, #40	@ 0x28
 8006508:	d12e      	bne.n	8006568 <_strtod_l+0x380>
 800650a:	4995      	ldr	r1, [pc, #596]	@ (8006760 <_strtod_l+0x578>)
 800650c:	aa1c      	add	r2, sp, #112	@ 0x70
 800650e:	a819      	add	r0, sp, #100	@ 0x64
 8006510:	f002 fc80 	bl	8008e14 <__hexnan>
 8006514:	2805      	cmp	r0, #5
 8006516:	d127      	bne.n	8006568 <_strtod_l+0x380>
 8006518:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800651a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800651e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006522:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006526:	e698      	b.n	800625a <_strtod_l+0x72>
 8006528:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800652a:	fb08 2101 	mla	r1, r8, r1, r2
 800652e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006532:	9209      	str	r2, [sp, #36]	@ 0x24
 8006534:	e7b5      	b.n	80064a2 <_strtod_l+0x2ba>
 8006536:	2a6e      	cmp	r2, #110	@ 0x6e
 8006538:	e7da      	b.n	80064f0 <_strtod_l+0x308>
 800653a:	498a      	ldr	r1, [pc, #552]	@ (8006764 <_strtod_l+0x57c>)
 800653c:	a819      	add	r0, sp, #100	@ 0x64
 800653e:	f002 fc55 	bl	8008dec <__match>
 8006542:	2800      	cmp	r0, #0
 8006544:	f43f aea2 	beq.w	800628c <_strtod_l+0xa4>
 8006548:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800654a:	4987      	ldr	r1, [pc, #540]	@ (8006768 <_strtod_l+0x580>)
 800654c:	3b01      	subs	r3, #1
 800654e:	a819      	add	r0, sp, #100	@ 0x64
 8006550:	9319      	str	r3, [sp, #100]	@ 0x64
 8006552:	f002 fc4b 	bl	8008dec <__match>
 8006556:	b910      	cbnz	r0, 800655e <_strtod_l+0x376>
 8006558:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800655a:	3301      	adds	r3, #1
 800655c:	9319      	str	r3, [sp, #100]	@ 0x64
 800655e:	f04f 0a00 	mov.w	sl, #0
 8006562:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800676c <_strtod_l+0x584>
 8006566:	e678      	b.n	800625a <_strtod_l+0x72>
 8006568:	4881      	ldr	r0, [pc, #516]	@ (8006770 <_strtod_l+0x588>)
 800656a:	f001 faeb 	bl	8007b44 <nan>
 800656e:	4682      	mov	sl, r0
 8006570:	468b      	mov	fp, r1
 8006572:	e672      	b.n	800625a <_strtod_l+0x72>
 8006574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006576:	f1b9 0f00 	cmp.w	r9, #0
 800657a:	bf08      	it	eq
 800657c:	46a9      	moveq	r9, r5
 800657e:	eba8 0303 	sub.w	r3, r8, r3
 8006582:	2d10      	cmp	r5, #16
 8006584:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006586:	462c      	mov	r4, r5
 8006588:	9309      	str	r3, [sp, #36]	@ 0x24
 800658a:	bfa8      	it	ge
 800658c:	2410      	movge	r4, #16
 800658e:	f7f9 ff29 	bl	80003e4 <__aeabi_ui2d>
 8006592:	2d09      	cmp	r5, #9
 8006594:	4682      	mov	sl, r0
 8006596:	468b      	mov	fp, r1
 8006598:	dc11      	bgt.n	80065be <_strtod_l+0x3d6>
 800659a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	f43f ae5c 	beq.w	800625a <_strtod_l+0x72>
 80065a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a4:	dd76      	ble.n	8006694 <_strtod_l+0x4ac>
 80065a6:	2b16      	cmp	r3, #22
 80065a8:	dc5d      	bgt.n	8006666 <_strtod_l+0x47e>
 80065aa:	4972      	ldr	r1, [pc, #456]	@ (8006774 <_strtod_l+0x58c>)
 80065ac:	4652      	mov	r2, sl
 80065ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80065b2:	465b      	mov	r3, fp
 80065b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065b8:	f7f9 ff8e 	bl	80004d8 <__aeabi_dmul>
 80065bc:	e7d7      	b.n	800656e <_strtod_l+0x386>
 80065be:	4b6d      	ldr	r3, [pc, #436]	@ (8006774 <_strtod_l+0x58c>)
 80065c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80065c8:	f7f9 ff86 	bl	80004d8 <__aeabi_dmul>
 80065cc:	4682      	mov	sl, r0
 80065ce:	4638      	mov	r0, r7
 80065d0:	468b      	mov	fp, r1
 80065d2:	f7f9 ff07 	bl	80003e4 <__aeabi_ui2d>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4650      	mov	r0, sl
 80065dc:	4659      	mov	r1, fp
 80065de:	f7f9 fdc5 	bl	800016c <__adddf3>
 80065e2:	2d0f      	cmp	r5, #15
 80065e4:	4682      	mov	sl, r0
 80065e6:	468b      	mov	fp, r1
 80065e8:	ddd7      	ble.n	800659a <_strtod_l+0x3b2>
 80065ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ec:	1b2c      	subs	r4, r5, r4
 80065ee:	441c      	add	r4, r3
 80065f0:	2c00      	cmp	r4, #0
 80065f2:	f340 8093 	ble.w	800671c <_strtod_l+0x534>
 80065f6:	f014 030f 	ands.w	r3, r4, #15
 80065fa:	d00a      	beq.n	8006612 <_strtod_l+0x42a>
 80065fc:	495d      	ldr	r1, [pc, #372]	@ (8006774 <_strtod_l+0x58c>)
 80065fe:	4652      	mov	r2, sl
 8006600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006608:	465b      	mov	r3, fp
 800660a:	f7f9 ff65 	bl	80004d8 <__aeabi_dmul>
 800660e:	4682      	mov	sl, r0
 8006610:	468b      	mov	fp, r1
 8006612:	f034 040f 	bics.w	r4, r4, #15
 8006616:	d073      	beq.n	8006700 <_strtod_l+0x518>
 8006618:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800661c:	dd49      	ble.n	80066b2 <_strtod_l+0x4ca>
 800661e:	2400      	movs	r4, #0
 8006620:	46a0      	mov	r8, r4
 8006622:	46a1      	mov	r9, r4
 8006624:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006626:	2322      	movs	r3, #34	@ 0x22
 8006628:	f04f 0a00 	mov.w	sl, #0
 800662c:	9a05      	ldr	r2, [sp, #20]
 800662e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800676c <_strtod_l+0x584>
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006636:	2b00      	cmp	r3, #0
 8006638:	f43f ae0f 	beq.w	800625a <_strtod_l+0x72>
 800663c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800663e:	9805      	ldr	r0, [sp, #20]
 8006640:	f002 fd8c 	bl	800915c <_Bfree>
 8006644:	4649      	mov	r1, r9
 8006646:	9805      	ldr	r0, [sp, #20]
 8006648:	f002 fd88 	bl	800915c <_Bfree>
 800664c:	4641      	mov	r1, r8
 800664e:	9805      	ldr	r0, [sp, #20]
 8006650:	f002 fd84 	bl	800915c <_Bfree>
 8006654:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006656:	9805      	ldr	r0, [sp, #20]
 8006658:	f002 fd80 	bl	800915c <_Bfree>
 800665c:	4621      	mov	r1, r4
 800665e:	9805      	ldr	r0, [sp, #20]
 8006660:	f002 fd7c 	bl	800915c <_Bfree>
 8006664:	e5f9      	b.n	800625a <_strtod_l+0x72>
 8006666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006668:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800666c:	4293      	cmp	r3, r2
 800666e:	dbbc      	blt.n	80065ea <_strtod_l+0x402>
 8006670:	4c40      	ldr	r4, [pc, #256]	@ (8006774 <_strtod_l+0x58c>)
 8006672:	f1c5 050f 	rsb	r5, r5, #15
 8006676:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800667a:	4652      	mov	r2, sl
 800667c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006680:	465b      	mov	r3, fp
 8006682:	f7f9 ff29 	bl	80004d8 <__aeabi_dmul>
 8006686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006688:	1b5d      	subs	r5, r3, r5
 800668a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800668e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006692:	e791      	b.n	80065b8 <_strtod_l+0x3d0>
 8006694:	3316      	adds	r3, #22
 8006696:	dba8      	blt.n	80065ea <_strtod_l+0x402>
 8006698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800669a:	4650      	mov	r0, sl
 800669c:	eba3 0808 	sub.w	r8, r3, r8
 80066a0:	4b34      	ldr	r3, [pc, #208]	@ (8006774 <_strtod_l+0x58c>)
 80066a2:	4659      	mov	r1, fp
 80066a4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80066a8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80066ac:	f7fa f83e 	bl	800072c <__aeabi_ddiv>
 80066b0:	e75d      	b.n	800656e <_strtod_l+0x386>
 80066b2:	2300      	movs	r3, #0
 80066b4:	4650      	mov	r0, sl
 80066b6:	4659      	mov	r1, fp
 80066b8:	461e      	mov	r6, r3
 80066ba:	4f2f      	ldr	r7, [pc, #188]	@ (8006778 <_strtod_l+0x590>)
 80066bc:	1124      	asrs	r4, r4, #4
 80066be:	2c01      	cmp	r4, #1
 80066c0:	dc21      	bgt.n	8006706 <_strtod_l+0x51e>
 80066c2:	b10b      	cbz	r3, 80066c8 <_strtod_l+0x4e0>
 80066c4:	4682      	mov	sl, r0
 80066c6:	468b      	mov	fp, r1
 80066c8:	492b      	ldr	r1, [pc, #172]	@ (8006778 <_strtod_l+0x590>)
 80066ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80066ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80066d2:	4652      	mov	r2, sl
 80066d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066d8:	465b      	mov	r3, fp
 80066da:	f7f9 fefd 	bl	80004d8 <__aeabi_dmul>
 80066de:	4b23      	ldr	r3, [pc, #140]	@ (800676c <_strtod_l+0x584>)
 80066e0:	460a      	mov	r2, r1
 80066e2:	400b      	ands	r3, r1
 80066e4:	4925      	ldr	r1, [pc, #148]	@ (800677c <_strtod_l+0x594>)
 80066e6:	4682      	mov	sl, r0
 80066e8:	428b      	cmp	r3, r1
 80066ea:	d898      	bhi.n	800661e <_strtod_l+0x436>
 80066ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80066f0:	428b      	cmp	r3, r1
 80066f2:	bf86      	itte	hi
 80066f4:	f04f 3aff 	movhi.w	sl, #4294967295
 80066f8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006780 <_strtod_l+0x598>
 80066fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006700:	2300      	movs	r3, #0
 8006702:	9308      	str	r3, [sp, #32]
 8006704:	e076      	b.n	80067f4 <_strtod_l+0x60c>
 8006706:	07e2      	lsls	r2, r4, #31
 8006708:	d504      	bpl.n	8006714 <_strtod_l+0x52c>
 800670a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800670e:	f7f9 fee3 	bl	80004d8 <__aeabi_dmul>
 8006712:	2301      	movs	r3, #1
 8006714:	3601      	adds	r6, #1
 8006716:	1064      	asrs	r4, r4, #1
 8006718:	3708      	adds	r7, #8
 800671a:	e7d0      	b.n	80066be <_strtod_l+0x4d6>
 800671c:	d0f0      	beq.n	8006700 <_strtod_l+0x518>
 800671e:	4264      	negs	r4, r4
 8006720:	f014 020f 	ands.w	r2, r4, #15
 8006724:	d00a      	beq.n	800673c <_strtod_l+0x554>
 8006726:	4b13      	ldr	r3, [pc, #76]	@ (8006774 <_strtod_l+0x58c>)
 8006728:	4650      	mov	r0, sl
 800672a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800672e:	4659      	mov	r1, fp
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f7f9 fffa 	bl	800072c <__aeabi_ddiv>
 8006738:	4682      	mov	sl, r0
 800673a:	468b      	mov	fp, r1
 800673c:	1124      	asrs	r4, r4, #4
 800673e:	d0df      	beq.n	8006700 <_strtod_l+0x518>
 8006740:	2c1f      	cmp	r4, #31
 8006742:	dd1f      	ble.n	8006784 <_strtod_l+0x59c>
 8006744:	2400      	movs	r4, #0
 8006746:	46a0      	mov	r8, r4
 8006748:	46a1      	mov	r9, r4
 800674a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800674c:	2322      	movs	r3, #34	@ 0x22
 800674e:	9a05      	ldr	r2, [sp, #20]
 8006750:	f04f 0a00 	mov.w	sl, #0
 8006754:	f04f 0b00 	mov.w	fp, #0
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	e76b      	b.n	8006634 <_strtod_l+0x44c>
 800675c:	0800a64d 	.word	0x0800a64d
 8006760:	0800a86c 	.word	0x0800a86c
 8006764:	0800a645 	.word	0x0800a645
 8006768:	0800a72c 	.word	0x0800a72c
 800676c:	7ff00000 	.word	0x7ff00000
 8006770:	0800a728 	.word	0x0800a728
 8006774:	0800a8f8 	.word	0x0800a8f8
 8006778:	0800a8d0 	.word	0x0800a8d0
 800677c:	7ca00000 	.word	0x7ca00000
 8006780:	7fefffff 	.word	0x7fefffff
 8006784:	f014 0310 	ands.w	r3, r4, #16
 8006788:	bf18      	it	ne
 800678a:	236a      	movne	r3, #106	@ 0x6a
 800678c:	4650      	mov	r0, sl
 800678e:	9308      	str	r3, [sp, #32]
 8006790:	4659      	mov	r1, fp
 8006792:	2300      	movs	r3, #0
 8006794:	4e77      	ldr	r6, [pc, #476]	@ (8006974 <_strtod_l+0x78c>)
 8006796:	07e7      	lsls	r7, r4, #31
 8006798:	d504      	bpl.n	80067a4 <_strtod_l+0x5bc>
 800679a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800679e:	f7f9 fe9b 	bl	80004d8 <__aeabi_dmul>
 80067a2:	2301      	movs	r3, #1
 80067a4:	1064      	asrs	r4, r4, #1
 80067a6:	f106 0608 	add.w	r6, r6, #8
 80067aa:	d1f4      	bne.n	8006796 <_strtod_l+0x5ae>
 80067ac:	b10b      	cbz	r3, 80067b2 <_strtod_l+0x5ca>
 80067ae:	4682      	mov	sl, r0
 80067b0:	468b      	mov	fp, r1
 80067b2:	9b08      	ldr	r3, [sp, #32]
 80067b4:	b1b3      	cbz	r3, 80067e4 <_strtod_l+0x5fc>
 80067b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80067ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80067be:	2b00      	cmp	r3, #0
 80067c0:	4659      	mov	r1, fp
 80067c2:	dd0f      	ble.n	80067e4 <_strtod_l+0x5fc>
 80067c4:	2b1f      	cmp	r3, #31
 80067c6:	dd58      	ble.n	800687a <_strtod_l+0x692>
 80067c8:	2b34      	cmp	r3, #52	@ 0x34
 80067ca:	bfd8      	it	le
 80067cc:	f04f 33ff 	movle.w	r3, #4294967295
 80067d0:	f04f 0a00 	mov.w	sl, #0
 80067d4:	bfcf      	iteee	gt
 80067d6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80067da:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80067de:	4093      	lslle	r3, r2
 80067e0:	ea03 0b01 	andle.w	fp, r3, r1
 80067e4:	2200      	movs	r2, #0
 80067e6:	2300      	movs	r3, #0
 80067e8:	4650      	mov	r0, sl
 80067ea:	4659      	mov	r1, fp
 80067ec:	f7fa f8dc 	bl	80009a8 <__aeabi_dcmpeq>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d1a7      	bne.n	8006744 <_strtod_l+0x55c>
 80067f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067f6:	464a      	mov	r2, r9
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80067fc:	462b      	mov	r3, r5
 80067fe:	9805      	ldr	r0, [sp, #20]
 8006800:	f002 fd14 	bl	800922c <__s2b>
 8006804:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006806:	2800      	cmp	r0, #0
 8006808:	f43f af09 	beq.w	800661e <_strtod_l+0x436>
 800680c:	2400      	movs	r4, #0
 800680e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006810:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006812:	2a00      	cmp	r2, #0
 8006814:	eba3 0308 	sub.w	r3, r3, r8
 8006818:	bfa8      	it	ge
 800681a:	2300      	movge	r3, #0
 800681c:	46a0      	mov	r8, r4
 800681e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006820:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006824:	9316      	str	r3, [sp, #88]	@ 0x58
 8006826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006828:	9805      	ldr	r0, [sp, #20]
 800682a:	6859      	ldr	r1, [r3, #4]
 800682c:	f002 fc56 	bl	80090dc <_Balloc>
 8006830:	4681      	mov	r9, r0
 8006832:	2800      	cmp	r0, #0
 8006834:	f43f aef7 	beq.w	8006626 <_strtod_l+0x43e>
 8006838:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800683a:	300c      	adds	r0, #12
 800683c:	691a      	ldr	r2, [r3, #16]
 800683e:	f103 010c 	add.w	r1, r3, #12
 8006842:	3202      	adds	r2, #2
 8006844:	0092      	lsls	r2, r2, #2
 8006846:	f001 f96e 	bl	8007b26 <memcpy>
 800684a:	ab1c      	add	r3, sp, #112	@ 0x70
 800684c:	9301      	str	r3, [sp, #4]
 800684e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	4652      	mov	r2, sl
 8006854:	465b      	mov	r3, fp
 8006856:	9805      	ldr	r0, [sp, #20]
 8006858:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800685c:	f003 f812 	bl	8009884 <__d2b>
 8006860:	901a      	str	r0, [sp, #104]	@ 0x68
 8006862:	2800      	cmp	r0, #0
 8006864:	f43f aedf 	beq.w	8006626 <_strtod_l+0x43e>
 8006868:	2101      	movs	r1, #1
 800686a:	9805      	ldr	r0, [sp, #20]
 800686c:	f002 fd74 	bl	8009358 <__i2b>
 8006870:	4680      	mov	r8, r0
 8006872:	b948      	cbnz	r0, 8006888 <_strtod_l+0x6a0>
 8006874:	f04f 0800 	mov.w	r8, #0
 8006878:	e6d5      	b.n	8006626 <_strtod_l+0x43e>
 800687a:	f04f 32ff 	mov.w	r2, #4294967295
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	ea03 0a0a 	and.w	sl, r3, sl
 8006886:	e7ad      	b.n	80067e4 <_strtod_l+0x5fc>
 8006888:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800688a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800688c:	2d00      	cmp	r5, #0
 800688e:	bfab      	itete	ge
 8006890:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006892:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006894:	18ef      	addge	r7, r5, r3
 8006896:	1b5e      	sublt	r6, r3, r5
 8006898:	9b08      	ldr	r3, [sp, #32]
 800689a:	bfa8      	it	ge
 800689c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800689e:	eba5 0503 	sub.w	r5, r5, r3
 80068a2:	4415      	add	r5, r2
 80068a4:	4b34      	ldr	r3, [pc, #208]	@ (8006978 <_strtod_l+0x790>)
 80068a6:	f105 35ff 	add.w	r5, r5, #4294967295
 80068aa:	bfb8      	it	lt
 80068ac:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80068ae:	429d      	cmp	r5, r3
 80068b0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80068b4:	da50      	bge.n	8006958 <_strtod_l+0x770>
 80068b6:	1b5b      	subs	r3, r3, r5
 80068b8:	2b1f      	cmp	r3, #31
 80068ba:	f04f 0101 	mov.w	r1, #1
 80068be:	eba2 0203 	sub.w	r2, r2, r3
 80068c2:	dc3d      	bgt.n	8006940 <_strtod_l+0x758>
 80068c4:	fa01 f303 	lsl.w	r3, r1, r3
 80068c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80068ca:	2300      	movs	r3, #0
 80068cc:	9310      	str	r3, [sp, #64]	@ 0x40
 80068ce:	18bd      	adds	r5, r7, r2
 80068d0:	9b08      	ldr	r3, [sp, #32]
 80068d2:	42af      	cmp	r7, r5
 80068d4:	4416      	add	r6, r2
 80068d6:	441e      	add	r6, r3
 80068d8:	463b      	mov	r3, r7
 80068da:	bfa8      	it	ge
 80068dc:	462b      	movge	r3, r5
 80068de:	42b3      	cmp	r3, r6
 80068e0:	bfa8      	it	ge
 80068e2:	4633      	movge	r3, r6
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bfc2      	ittt	gt
 80068e8:	1aed      	subgt	r5, r5, r3
 80068ea:	1af6      	subgt	r6, r6, r3
 80068ec:	1aff      	subgt	r7, r7, r3
 80068ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	dd16      	ble.n	8006922 <_strtod_l+0x73a>
 80068f4:	4641      	mov	r1, r8
 80068f6:	461a      	mov	r2, r3
 80068f8:	9805      	ldr	r0, [sp, #20]
 80068fa:	f002 fde5 	bl	80094c8 <__pow5mult>
 80068fe:	4680      	mov	r8, r0
 8006900:	2800      	cmp	r0, #0
 8006902:	d0b7      	beq.n	8006874 <_strtod_l+0x68c>
 8006904:	4601      	mov	r1, r0
 8006906:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006908:	9805      	ldr	r0, [sp, #20]
 800690a:	f002 fd3b 	bl	8009384 <__multiply>
 800690e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006910:	2800      	cmp	r0, #0
 8006912:	f43f ae88 	beq.w	8006626 <_strtod_l+0x43e>
 8006916:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006918:	9805      	ldr	r0, [sp, #20]
 800691a:	f002 fc1f 	bl	800915c <_Bfree>
 800691e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006920:	931a      	str	r3, [sp, #104]	@ 0x68
 8006922:	2d00      	cmp	r5, #0
 8006924:	dc1d      	bgt.n	8006962 <_strtod_l+0x77a>
 8006926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006928:	2b00      	cmp	r3, #0
 800692a:	dd27      	ble.n	800697c <_strtod_l+0x794>
 800692c:	4649      	mov	r1, r9
 800692e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006930:	9805      	ldr	r0, [sp, #20]
 8006932:	f002 fdc9 	bl	80094c8 <__pow5mult>
 8006936:	4681      	mov	r9, r0
 8006938:	bb00      	cbnz	r0, 800697c <_strtod_l+0x794>
 800693a:	f04f 0900 	mov.w	r9, #0
 800693e:	e672      	b.n	8006626 <_strtod_l+0x43e>
 8006940:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006944:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006948:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800694c:	35e2      	adds	r5, #226	@ 0xe2
 800694e:	fa01 f305 	lsl.w	r3, r1, r5
 8006952:	9310      	str	r3, [sp, #64]	@ 0x40
 8006954:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006956:	e7ba      	b.n	80068ce <_strtod_l+0x6e6>
 8006958:	2300      	movs	r3, #0
 800695a:	9310      	str	r3, [sp, #64]	@ 0x40
 800695c:	2301      	movs	r3, #1
 800695e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006960:	e7b5      	b.n	80068ce <_strtod_l+0x6e6>
 8006962:	462a      	mov	r2, r5
 8006964:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006966:	9805      	ldr	r0, [sp, #20]
 8006968:	f002 fe08 	bl	800957c <__lshift>
 800696c:	901a      	str	r0, [sp, #104]	@ 0x68
 800696e:	2800      	cmp	r0, #0
 8006970:	d1d9      	bne.n	8006926 <_strtod_l+0x73e>
 8006972:	e658      	b.n	8006626 <_strtod_l+0x43e>
 8006974:	0800a898 	.word	0x0800a898
 8006978:	fffffc02 	.word	0xfffffc02
 800697c:	2e00      	cmp	r6, #0
 800697e:	dd07      	ble.n	8006990 <_strtod_l+0x7a8>
 8006980:	4649      	mov	r1, r9
 8006982:	4632      	mov	r2, r6
 8006984:	9805      	ldr	r0, [sp, #20]
 8006986:	f002 fdf9 	bl	800957c <__lshift>
 800698a:	4681      	mov	r9, r0
 800698c:	2800      	cmp	r0, #0
 800698e:	d0d4      	beq.n	800693a <_strtod_l+0x752>
 8006990:	2f00      	cmp	r7, #0
 8006992:	dd08      	ble.n	80069a6 <_strtod_l+0x7be>
 8006994:	4641      	mov	r1, r8
 8006996:	463a      	mov	r2, r7
 8006998:	9805      	ldr	r0, [sp, #20]
 800699a:	f002 fdef 	bl	800957c <__lshift>
 800699e:	4680      	mov	r8, r0
 80069a0:	2800      	cmp	r0, #0
 80069a2:	f43f ae40 	beq.w	8006626 <_strtod_l+0x43e>
 80069a6:	464a      	mov	r2, r9
 80069a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069aa:	9805      	ldr	r0, [sp, #20]
 80069ac:	f002 fe6e 	bl	800968c <__mdiff>
 80069b0:	4604      	mov	r4, r0
 80069b2:	2800      	cmp	r0, #0
 80069b4:	f43f ae37 	beq.w	8006626 <_strtod_l+0x43e>
 80069b8:	68c3      	ldr	r3, [r0, #12]
 80069ba:	4641      	mov	r1, r8
 80069bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80069be:	2300      	movs	r3, #0
 80069c0:	60c3      	str	r3, [r0, #12]
 80069c2:	f002 fe47 	bl	8009654 <__mcmp>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	da3d      	bge.n	8006a46 <_strtod_l+0x85e>
 80069ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069cc:	ea53 030a 	orrs.w	r3, r3, sl
 80069d0:	d163      	bne.n	8006a9a <_strtod_l+0x8b2>
 80069d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d15f      	bne.n	8006a9a <_strtod_l+0x8b2>
 80069da:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80069de:	0d1b      	lsrs	r3, r3, #20
 80069e0:	051b      	lsls	r3, r3, #20
 80069e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80069e6:	d958      	bls.n	8006a9a <_strtod_l+0x8b2>
 80069e8:	6963      	ldr	r3, [r4, #20]
 80069ea:	b913      	cbnz	r3, 80069f2 <_strtod_l+0x80a>
 80069ec:	6923      	ldr	r3, [r4, #16]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	dd53      	ble.n	8006a9a <_strtod_l+0x8b2>
 80069f2:	4621      	mov	r1, r4
 80069f4:	2201      	movs	r2, #1
 80069f6:	9805      	ldr	r0, [sp, #20]
 80069f8:	f002 fdc0 	bl	800957c <__lshift>
 80069fc:	4641      	mov	r1, r8
 80069fe:	4604      	mov	r4, r0
 8006a00:	f002 fe28 	bl	8009654 <__mcmp>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	dd48      	ble.n	8006a9a <_strtod_l+0x8b2>
 8006a08:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006a0c:	9a08      	ldr	r2, [sp, #32]
 8006a0e:	0d1b      	lsrs	r3, r3, #20
 8006a10:	051b      	lsls	r3, r3, #20
 8006a12:	2a00      	cmp	r2, #0
 8006a14:	d062      	beq.n	8006adc <_strtod_l+0x8f4>
 8006a16:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006a1a:	d85f      	bhi.n	8006adc <_strtod_l+0x8f4>
 8006a1c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006a20:	f67f ae94 	bls.w	800674c <_strtod_l+0x564>
 8006a24:	4650      	mov	r0, sl
 8006a26:	4659      	mov	r1, fp
 8006a28:	4ba3      	ldr	r3, [pc, #652]	@ (8006cb8 <_strtod_l+0xad0>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f7f9 fd54 	bl	80004d8 <__aeabi_dmul>
 8006a30:	4ba2      	ldr	r3, [pc, #648]	@ (8006cbc <_strtod_l+0xad4>)
 8006a32:	4682      	mov	sl, r0
 8006a34:	400b      	ands	r3, r1
 8006a36:	468b      	mov	fp, r1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f47f adff 	bne.w	800663c <_strtod_l+0x454>
 8006a3e:	2322      	movs	r3, #34	@ 0x22
 8006a40:	9a05      	ldr	r2, [sp, #20]
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	e5fa      	b.n	800663c <_strtod_l+0x454>
 8006a46:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006a4a:	d165      	bne.n	8006b18 <_strtod_l+0x930>
 8006a4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006a4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a52:	b35a      	cbz	r2, 8006aac <_strtod_l+0x8c4>
 8006a54:	4a9a      	ldr	r2, [pc, #616]	@ (8006cc0 <_strtod_l+0xad8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d12b      	bne.n	8006ab2 <_strtod_l+0x8ca>
 8006a5a:	9b08      	ldr	r3, [sp, #32]
 8006a5c:	4651      	mov	r1, sl
 8006a5e:	b303      	cbz	r3, 8006aa2 <_strtod_l+0x8ba>
 8006a60:	465a      	mov	r2, fp
 8006a62:	4b96      	ldr	r3, [pc, #600]	@ (8006cbc <_strtod_l+0xad4>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6e:	d81b      	bhi.n	8006aa8 <_strtod_l+0x8c0>
 8006a70:	0d1b      	lsrs	r3, r3, #20
 8006a72:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	4299      	cmp	r1, r3
 8006a7c:	d119      	bne.n	8006ab2 <_strtod_l+0x8ca>
 8006a7e:	4b91      	ldr	r3, [pc, #580]	@ (8006cc4 <_strtod_l+0xadc>)
 8006a80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d102      	bne.n	8006a8c <_strtod_l+0x8a4>
 8006a86:	3101      	adds	r1, #1
 8006a88:	f43f adcd 	beq.w	8006626 <_strtod_l+0x43e>
 8006a8c:	f04f 0a00 	mov.w	sl, #0
 8006a90:	4b8a      	ldr	r3, [pc, #552]	@ (8006cbc <_strtod_l+0xad4>)
 8006a92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a94:	401a      	ands	r2, r3
 8006a96:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006a9a:	9b08      	ldr	r3, [sp, #32]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1c1      	bne.n	8006a24 <_strtod_l+0x83c>
 8006aa0:	e5cc      	b.n	800663c <_strtod_l+0x454>
 8006aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa6:	e7e8      	b.n	8006a7a <_strtod_l+0x892>
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	e7e6      	b.n	8006a7a <_strtod_l+0x892>
 8006aac:	ea53 030a 	orrs.w	r3, r3, sl
 8006ab0:	d0aa      	beq.n	8006a08 <_strtod_l+0x820>
 8006ab2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ab4:	b1db      	cbz	r3, 8006aee <_strtod_l+0x906>
 8006ab6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ab8:	4213      	tst	r3, r2
 8006aba:	d0ee      	beq.n	8006a9a <_strtod_l+0x8b2>
 8006abc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006abe:	4650      	mov	r0, sl
 8006ac0:	4659      	mov	r1, fp
 8006ac2:	9a08      	ldr	r2, [sp, #32]
 8006ac4:	b1bb      	cbz	r3, 8006af6 <_strtod_l+0x90e>
 8006ac6:	f7ff fb6e 	bl	80061a6 <sulp>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ad2:	f7f9 fb4b 	bl	800016c <__adddf3>
 8006ad6:	4682      	mov	sl, r0
 8006ad8:	468b      	mov	fp, r1
 8006ada:	e7de      	b.n	8006a9a <_strtod_l+0x8b2>
 8006adc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006ae0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006ae4:	f04f 3aff 	mov.w	sl, #4294967295
 8006ae8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006aec:	e7d5      	b.n	8006a9a <_strtod_l+0x8b2>
 8006aee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006af0:	ea13 0f0a 	tst.w	r3, sl
 8006af4:	e7e1      	b.n	8006aba <_strtod_l+0x8d2>
 8006af6:	f7ff fb56 	bl	80061a6 <sulp>
 8006afa:	4602      	mov	r2, r0
 8006afc:	460b      	mov	r3, r1
 8006afe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b02:	f7f9 fb31 	bl	8000168 <__aeabi_dsub>
 8006b06:	2200      	movs	r2, #0
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4682      	mov	sl, r0
 8006b0c:	468b      	mov	fp, r1
 8006b0e:	f7f9 ff4b 	bl	80009a8 <__aeabi_dcmpeq>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d0c1      	beq.n	8006a9a <_strtod_l+0x8b2>
 8006b16:	e619      	b.n	800674c <_strtod_l+0x564>
 8006b18:	4641      	mov	r1, r8
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f002 ff0a 	bl	8009934 <__ratio>
 8006b20:	2200      	movs	r2, #0
 8006b22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006b26:	4606      	mov	r6, r0
 8006b28:	460f      	mov	r7, r1
 8006b2a:	f7f9 ff51 	bl	80009d0 <__aeabi_dcmple>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d06d      	beq.n	8006c0e <_strtod_l+0xa26>
 8006b32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d178      	bne.n	8006c2a <_strtod_l+0xa42>
 8006b38:	f1ba 0f00 	cmp.w	sl, #0
 8006b3c:	d156      	bne.n	8006bec <_strtod_l+0xa04>
 8006b3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d158      	bne.n	8006bfa <_strtod_l+0xa12>
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	4b5e      	ldr	r3, [pc, #376]	@ (8006cc8 <_strtod_l+0xae0>)
 8006b50:	f7f9 ff34 	bl	80009bc <__aeabi_dcmplt>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d157      	bne.n	8006c08 <_strtod_l+0xa20>
 8006b58:	4630      	mov	r0, r6
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	4b5b      	ldr	r3, [pc, #364]	@ (8006ccc <_strtod_l+0xae4>)
 8006b60:	f7f9 fcba 	bl	80004d8 <__aeabi_dmul>
 8006b64:	4606      	mov	r6, r0
 8006b66:	460f      	mov	r7, r1
 8006b68:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006b6c:	9606      	str	r6, [sp, #24]
 8006b6e:	9307      	str	r3, [sp, #28]
 8006b70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b74:	4d51      	ldr	r5, [pc, #324]	@ (8006cbc <_strtod_l+0xad4>)
 8006b76:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006b7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b7c:	401d      	ands	r5, r3
 8006b7e:	4b54      	ldr	r3, [pc, #336]	@ (8006cd0 <_strtod_l+0xae8>)
 8006b80:	429d      	cmp	r5, r3
 8006b82:	f040 80ab 	bne.w	8006cdc <_strtod_l+0xaf4>
 8006b86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b88:	4650      	mov	r0, sl
 8006b8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006b8e:	4659      	mov	r1, fp
 8006b90:	f002 fe10 	bl	80097b4 <__ulp>
 8006b94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b98:	f7f9 fc9e 	bl	80004d8 <__aeabi_dmul>
 8006b9c:	4652      	mov	r2, sl
 8006b9e:	465b      	mov	r3, fp
 8006ba0:	f7f9 fae4 	bl	800016c <__adddf3>
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4945      	ldr	r1, [pc, #276]	@ (8006cbc <_strtod_l+0xad4>)
 8006ba8:	4a4a      	ldr	r2, [pc, #296]	@ (8006cd4 <_strtod_l+0xaec>)
 8006baa:	4019      	ands	r1, r3
 8006bac:	4291      	cmp	r1, r2
 8006bae:	4682      	mov	sl, r0
 8006bb0:	d942      	bls.n	8006c38 <_strtod_l+0xa50>
 8006bb2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006bb4:	4b43      	ldr	r3, [pc, #268]	@ (8006cc4 <_strtod_l+0xadc>)
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d103      	bne.n	8006bc2 <_strtod_l+0x9da>
 8006bba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	f43f ad32 	beq.w	8006626 <_strtod_l+0x43e>
 8006bc2:	f04f 3aff 	mov.w	sl, #4294967295
 8006bc6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8006cc4 <_strtod_l+0xadc>
 8006bca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bcc:	9805      	ldr	r0, [sp, #20]
 8006bce:	f002 fac5 	bl	800915c <_Bfree>
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	9805      	ldr	r0, [sp, #20]
 8006bd6:	f002 fac1 	bl	800915c <_Bfree>
 8006bda:	4641      	mov	r1, r8
 8006bdc:	9805      	ldr	r0, [sp, #20]
 8006bde:	f002 fabd 	bl	800915c <_Bfree>
 8006be2:	4621      	mov	r1, r4
 8006be4:	9805      	ldr	r0, [sp, #20]
 8006be6:	f002 fab9 	bl	800915c <_Bfree>
 8006bea:	e61c      	b.n	8006826 <_strtod_l+0x63e>
 8006bec:	f1ba 0f01 	cmp.w	sl, #1
 8006bf0:	d103      	bne.n	8006bfa <_strtod_l+0xa12>
 8006bf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f43f ada9 	beq.w	800674c <_strtod_l+0x564>
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4b36      	ldr	r3, [pc, #216]	@ (8006cd8 <_strtod_l+0xaf0>)
 8006bfe:	2600      	movs	r6, #0
 8006c00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c04:	4f30      	ldr	r7, [pc, #192]	@ (8006cc8 <_strtod_l+0xae0>)
 8006c06:	e7b3      	b.n	8006b70 <_strtod_l+0x988>
 8006c08:	2600      	movs	r6, #0
 8006c0a:	4f30      	ldr	r7, [pc, #192]	@ (8006ccc <_strtod_l+0xae4>)
 8006c0c:	e7ac      	b.n	8006b68 <_strtod_l+0x980>
 8006c0e:	4630      	mov	r0, r6
 8006c10:	4639      	mov	r1, r7
 8006c12:	4b2e      	ldr	r3, [pc, #184]	@ (8006ccc <_strtod_l+0xae4>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	f7f9 fc5f 	bl	80004d8 <__aeabi_dmul>
 8006c1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	460f      	mov	r7, r1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0a1      	beq.n	8006b68 <_strtod_l+0x980>
 8006c24:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006c28:	e7a2      	b.n	8006b70 <_strtod_l+0x988>
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	4b26      	ldr	r3, [pc, #152]	@ (8006cc8 <_strtod_l+0xae0>)
 8006c2e:	4616      	mov	r6, r2
 8006c30:	461f      	mov	r7, r3
 8006c32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c36:	e79b      	b.n	8006b70 <_strtod_l+0x988>
 8006c38:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006c3c:	9b08      	ldr	r3, [sp, #32]
 8006c3e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1c1      	bne.n	8006bca <_strtod_l+0x9e2>
 8006c46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c4a:	0d1b      	lsrs	r3, r3, #20
 8006c4c:	051b      	lsls	r3, r3, #20
 8006c4e:	429d      	cmp	r5, r3
 8006c50:	d1bb      	bne.n	8006bca <_strtod_l+0x9e2>
 8006c52:	4630      	mov	r0, r6
 8006c54:	4639      	mov	r1, r7
 8006c56:	f7fa fa0b 	bl	8001070 <__aeabi_d2lz>
 8006c5a:	f7f9 fc0f 	bl	800047c <__aeabi_l2d>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4630      	mov	r0, r6
 8006c64:	4639      	mov	r1, r7
 8006c66:	f7f9 fa7f 	bl	8000168 <__aeabi_dsub>
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006c72:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006c76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c78:	ea46 060a 	orr.w	r6, r6, sl
 8006c7c:	431e      	orrs	r6, r3
 8006c7e:	d06a      	beq.n	8006d56 <_strtod_l+0xb6e>
 8006c80:	a309      	add	r3, pc, #36	@ (adr r3, 8006ca8 <_strtod_l+0xac0>)
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f7f9 fe99 	bl	80009bc <__aeabi_dcmplt>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f47f acd6 	bne.w	800663c <_strtod_l+0x454>
 8006c90:	a307      	add	r3, pc, #28	@ (adr r3, 8006cb0 <_strtod_l+0xac8>)
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c9a:	f7f9 fead 	bl	80009f8 <__aeabi_dcmpgt>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d093      	beq.n	8006bca <_strtod_l+0x9e2>
 8006ca2:	e4cb      	b.n	800663c <_strtod_l+0x454>
 8006ca4:	f3af 8000 	nop.w
 8006ca8:	94a03595 	.word	0x94a03595
 8006cac:	3fdfffff 	.word	0x3fdfffff
 8006cb0:	35afe535 	.word	0x35afe535
 8006cb4:	3fe00000 	.word	0x3fe00000
 8006cb8:	39500000 	.word	0x39500000
 8006cbc:	7ff00000 	.word	0x7ff00000
 8006cc0:	000fffff 	.word	0x000fffff
 8006cc4:	7fefffff 	.word	0x7fefffff
 8006cc8:	3ff00000 	.word	0x3ff00000
 8006ccc:	3fe00000 	.word	0x3fe00000
 8006cd0:	7fe00000 	.word	0x7fe00000
 8006cd4:	7c9fffff 	.word	0x7c9fffff
 8006cd8:	bff00000 	.word	0xbff00000
 8006cdc:	9b08      	ldr	r3, [sp, #32]
 8006cde:	b323      	cbz	r3, 8006d2a <_strtod_l+0xb42>
 8006ce0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006ce4:	d821      	bhi.n	8006d2a <_strtod_l+0xb42>
 8006ce6:	a328      	add	r3, pc, #160	@ (adr r3, 8006d88 <_strtod_l+0xba0>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	4630      	mov	r0, r6
 8006cee:	4639      	mov	r1, r7
 8006cf0:	f7f9 fe6e 	bl	80009d0 <__aeabi_dcmple>
 8006cf4:	b1a0      	cbz	r0, 8006d20 <_strtod_l+0xb38>
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f7f9 fec5 	bl	8000a88 <__aeabi_d2uiz>
 8006cfe:	2801      	cmp	r0, #1
 8006d00:	bf38      	it	cc
 8006d02:	2001      	movcc	r0, #1
 8006d04:	f7f9 fb6e 	bl	80003e4 <__aeabi_ui2d>
 8006d08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	460f      	mov	r7, r1
 8006d0e:	b9fb      	cbnz	r3, 8006d50 <_strtod_l+0xb68>
 8006d10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006d14:	9014      	str	r0, [sp, #80]	@ 0x50
 8006d16:	9315      	str	r3, [sp, #84]	@ 0x54
 8006d18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006d1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006d20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006d22:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006d26:	1b5b      	subs	r3, r3, r5
 8006d28:	9311      	str	r3, [sp, #68]	@ 0x44
 8006d2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d2e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006d32:	f002 fd3f 	bl	80097b4 <__ulp>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4650      	mov	r0, sl
 8006d3c:	4659      	mov	r1, fp
 8006d3e:	f7f9 fbcb 	bl	80004d8 <__aeabi_dmul>
 8006d42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006d46:	f7f9 fa11 	bl	800016c <__adddf3>
 8006d4a:	4682      	mov	sl, r0
 8006d4c:	468b      	mov	fp, r1
 8006d4e:	e775      	b.n	8006c3c <_strtod_l+0xa54>
 8006d50:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006d54:	e7e0      	b.n	8006d18 <_strtod_l+0xb30>
 8006d56:	a30e      	add	r3, pc, #56	@ (adr r3, 8006d90 <_strtod_l+0xba8>)
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	f7f9 fe2e 	bl	80009bc <__aeabi_dcmplt>
 8006d60:	e79d      	b.n	8006c9e <_strtod_l+0xab6>
 8006d62:	2300      	movs	r3, #0
 8006d64:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d68:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	f7ff ba79 	b.w	8006262 <_strtod_l+0x7a>
 8006d70:	2a65      	cmp	r2, #101	@ 0x65
 8006d72:	f43f ab72 	beq.w	800645a <_strtod_l+0x272>
 8006d76:	2a45      	cmp	r2, #69	@ 0x45
 8006d78:	f43f ab6f 	beq.w	800645a <_strtod_l+0x272>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f7ff bbaa 	b.w	80064d6 <_strtod_l+0x2ee>
 8006d82:	bf00      	nop
 8006d84:	f3af 8000 	nop.w
 8006d88:	ffc00000 	.word	0xffc00000
 8006d8c:	41dfffff 	.word	0x41dfffff
 8006d90:	94a03595 	.word	0x94a03595
 8006d94:	3fcfffff 	.word	0x3fcfffff

08006d98 <strtod>:
 8006d98:	460a      	mov	r2, r1
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	4802      	ldr	r0, [pc, #8]	@ (8006da8 <strtod+0x10>)
 8006d9e:	4b03      	ldr	r3, [pc, #12]	@ (8006dac <strtod+0x14>)
 8006da0:	6800      	ldr	r0, [r0, #0]
 8006da2:	f7ff ba21 	b.w	80061e8 <_strtod_l>
 8006da6:	bf00      	nop
 8006da8:	200001a4 	.word	0x200001a4
 8006dac:	20000038 	.word	0x20000038

08006db0 <__cvt>:
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db6:	461d      	mov	r5, r3
 8006db8:	bfbb      	ittet	lt
 8006dba:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006dbe:	461d      	movlt	r5, r3
 8006dc0:	2300      	movge	r3, #0
 8006dc2:	232d      	movlt	r3, #45	@ 0x2d
 8006dc4:	b088      	sub	sp, #32
 8006dc6:	4614      	mov	r4, r2
 8006dc8:	bfb8      	it	lt
 8006dca:	4614      	movlt	r4, r2
 8006dcc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006dce:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006dd0:	7013      	strb	r3, [r2, #0]
 8006dd2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006dd4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006dd8:	f023 0820 	bic.w	r8, r3, #32
 8006ddc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006de0:	d005      	beq.n	8006dee <__cvt+0x3e>
 8006de2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006de6:	d100      	bne.n	8006dea <__cvt+0x3a>
 8006de8:	3601      	adds	r6, #1
 8006dea:	2302      	movs	r3, #2
 8006dec:	e000      	b.n	8006df0 <__cvt+0x40>
 8006dee:	2303      	movs	r3, #3
 8006df0:	aa07      	add	r2, sp, #28
 8006df2:	9204      	str	r2, [sp, #16]
 8006df4:	aa06      	add	r2, sp, #24
 8006df6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006dfa:	e9cd 3600 	strd	r3, r6, [sp]
 8006dfe:	4622      	mov	r2, r4
 8006e00:	462b      	mov	r3, r5
 8006e02:	f000 ff4d 	bl	8007ca0 <_dtoa_r>
 8006e06:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e0a:	4607      	mov	r7, r0
 8006e0c:	d119      	bne.n	8006e42 <__cvt+0x92>
 8006e0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e10:	07db      	lsls	r3, r3, #31
 8006e12:	d50e      	bpl.n	8006e32 <__cvt+0x82>
 8006e14:	eb00 0906 	add.w	r9, r0, r6
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 fdc2 	bl	80009a8 <__aeabi_dcmpeq>
 8006e24:	b108      	cbz	r0, 8006e2a <__cvt+0x7a>
 8006e26:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e2a:	2230      	movs	r2, #48	@ 0x30
 8006e2c:	9b07      	ldr	r3, [sp, #28]
 8006e2e:	454b      	cmp	r3, r9
 8006e30:	d31e      	bcc.n	8006e70 <__cvt+0xc0>
 8006e32:	4638      	mov	r0, r7
 8006e34:	9b07      	ldr	r3, [sp, #28]
 8006e36:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006e38:	1bdb      	subs	r3, r3, r7
 8006e3a:	6013      	str	r3, [r2, #0]
 8006e3c:	b008      	add	sp, #32
 8006e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e42:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e46:	eb00 0906 	add.w	r9, r0, r6
 8006e4a:	d1e5      	bne.n	8006e18 <__cvt+0x68>
 8006e4c:	7803      	ldrb	r3, [r0, #0]
 8006e4e:	2b30      	cmp	r3, #48	@ 0x30
 8006e50:	d10a      	bne.n	8006e68 <__cvt+0xb8>
 8006e52:	2200      	movs	r2, #0
 8006e54:	2300      	movs	r3, #0
 8006e56:	4620      	mov	r0, r4
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f7f9 fda5 	bl	80009a8 <__aeabi_dcmpeq>
 8006e5e:	b918      	cbnz	r0, 8006e68 <__cvt+0xb8>
 8006e60:	f1c6 0601 	rsb	r6, r6, #1
 8006e64:	f8ca 6000 	str.w	r6, [sl]
 8006e68:	f8da 3000 	ldr.w	r3, [sl]
 8006e6c:	4499      	add	r9, r3
 8006e6e:	e7d3      	b.n	8006e18 <__cvt+0x68>
 8006e70:	1c59      	adds	r1, r3, #1
 8006e72:	9107      	str	r1, [sp, #28]
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	e7d9      	b.n	8006e2c <__cvt+0x7c>

08006e78 <__exponent>:
 8006e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e7a:	2900      	cmp	r1, #0
 8006e7c:	bfb6      	itet	lt
 8006e7e:	232d      	movlt	r3, #45	@ 0x2d
 8006e80:	232b      	movge	r3, #43	@ 0x2b
 8006e82:	4249      	neglt	r1, r1
 8006e84:	2909      	cmp	r1, #9
 8006e86:	7002      	strb	r2, [r0, #0]
 8006e88:	7043      	strb	r3, [r0, #1]
 8006e8a:	dd29      	ble.n	8006ee0 <__exponent+0x68>
 8006e8c:	f10d 0307 	add.w	r3, sp, #7
 8006e90:	461d      	mov	r5, r3
 8006e92:	270a      	movs	r7, #10
 8006e94:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e98:	461a      	mov	r2, r3
 8006e9a:	fb07 1416 	mls	r4, r7, r6, r1
 8006e9e:	3430      	adds	r4, #48	@ 0x30
 8006ea0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	2c63      	cmp	r4, #99	@ 0x63
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	f103 33ff 	add.w	r3, r3, #4294967295
 8006eae:	dcf1      	bgt.n	8006e94 <__exponent+0x1c>
 8006eb0:	3130      	adds	r1, #48	@ 0x30
 8006eb2:	1e94      	subs	r4, r2, #2
 8006eb4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006eb8:	4623      	mov	r3, r4
 8006eba:	1c41      	adds	r1, r0, #1
 8006ebc:	42ab      	cmp	r3, r5
 8006ebe:	d30a      	bcc.n	8006ed6 <__exponent+0x5e>
 8006ec0:	f10d 0309 	add.w	r3, sp, #9
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	42ac      	cmp	r4, r5
 8006ec8:	bf88      	it	hi
 8006eca:	2300      	movhi	r3, #0
 8006ecc:	3302      	adds	r3, #2
 8006ece:	4403      	add	r3, r0
 8006ed0:	1a18      	subs	r0, r3, r0
 8006ed2:	b003      	add	sp, #12
 8006ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ed6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006eda:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ede:	e7ed      	b.n	8006ebc <__exponent+0x44>
 8006ee0:	2330      	movs	r3, #48	@ 0x30
 8006ee2:	3130      	adds	r1, #48	@ 0x30
 8006ee4:	7083      	strb	r3, [r0, #2]
 8006ee6:	70c1      	strb	r1, [r0, #3]
 8006ee8:	1d03      	adds	r3, r0, #4
 8006eea:	e7f1      	b.n	8006ed0 <__exponent+0x58>

08006eec <_printf_float>:
 8006eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef0:	b091      	sub	sp, #68	@ 0x44
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006ef8:	4616      	mov	r6, r2
 8006efa:	461f      	mov	r7, r3
 8006efc:	4605      	mov	r5, r0
 8006efe:	f000 fd85 	bl	8007a0c <_localeconv_r>
 8006f02:	6803      	ldr	r3, [r0, #0]
 8006f04:	4618      	mov	r0, r3
 8006f06:	9308      	str	r3, [sp, #32]
 8006f08:	f7f9 f922 	bl	8000150 <strlen>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f10:	f8d8 3000 	ldr.w	r3, [r8]
 8006f14:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f16:	3307      	adds	r3, #7
 8006f18:	f023 0307 	bic.w	r3, r3, #7
 8006f1c:	f103 0208 	add.w	r2, r3, #8
 8006f20:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f24:	f8d4 b000 	ldr.w	fp, [r4]
 8006f28:	f8c8 2000 	str.w	r2, [r8]
 8006f2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f30:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f36:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f46:	4b9c      	ldr	r3, [pc, #624]	@ (80071b8 <_printf_float+0x2cc>)
 8006f48:	f7f9 fd60 	bl	8000a0c <__aeabi_dcmpun>
 8006f4c:	bb70      	cbnz	r0, 8006fac <_printf_float+0xc0>
 8006f4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f52:	f04f 32ff 	mov.w	r2, #4294967295
 8006f56:	4b98      	ldr	r3, [pc, #608]	@ (80071b8 <_printf_float+0x2cc>)
 8006f58:	f7f9 fd3a 	bl	80009d0 <__aeabi_dcmple>
 8006f5c:	bb30      	cbnz	r0, 8006fac <_printf_float+0xc0>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2300      	movs	r3, #0
 8006f62:	4640      	mov	r0, r8
 8006f64:	4649      	mov	r1, r9
 8006f66:	f7f9 fd29 	bl	80009bc <__aeabi_dcmplt>
 8006f6a:	b110      	cbz	r0, 8006f72 <_printf_float+0x86>
 8006f6c:	232d      	movs	r3, #45	@ 0x2d
 8006f6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f72:	4a92      	ldr	r2, [pc, #584]	@ (80071bc <_printf_float+0x2d0>)
 8006f74:	4b92      	ldr	r3, [pc, #584]	@ (80071c0 <_printf_float+0x2d4>)
 8006f76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f7a:	bf8c      	ite	hi
 8006f7c:	4690      	movhi	r8, r2
 8006f7e:	4698      	movls	r8, r3
 8006f80:	2303      	movs	r3, #3
 8006f82:	f04f 0900 	mov.w	r9, #0
 8006f86:	6123      	str	r3, [r4, #16]
 8006f88:	f02b 0304 	bic.w	r3, fp, #4
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	4633      	mov	r3, r6
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	9700      	str	r7, [sp, #0]
 8006f96:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006f98:	f000 f9d4 	bl	8007344 <_printf_common>
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	f040 8090 	bne.w	80070c2 <_printf_float+0x1d6>
 8006fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa6:	b011      	add	sp, #68	@ 0x44
 8006fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fac:	4642      	mov	r2, r8
 8006fae:	464b      	mov	r3, r9
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	f7f9 fd2a 	bl	8000a0c <__aeabi_dcmpun>
 8006fb8:	b148      	cbz	r0, 8006fce <_printf_float+0xe2>
 8006fba:	464b      	mov	r3, r9
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bfb8      	it	lt
 8006fc0:	232d      	movlt	r3, #45	@ 0x2d
 8006fc2:	4a80      	ldr	r2, [pc, #512]	@ (80071c4 <_printf_float+0x2d8>)
 8006fc4:	bfb8      	it	lt
 8006fc6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006fca:	4b7f      	ldr	r3, [pc, #508]	@ (80071c8 <_printf_float+0x2dc>)
 8006fcc:	e7d3      	b.n	8006f76 <_printf_float+0x8a>
 8006fce:	6863      	ldr	r3, [r4, #4]
 8006fd0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	d13f      	bne.n	8007058 <_printf_float+0x16c>
 8006fd8:	2306      	movs	r3, #6
 8006fda:	6063      	str	r3, [r4, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006fe2:	6023      	str	r3, [r4, #0]
 8006fe4:	9206      	str	r2, [sp, #24]
 8006fe6:	aa0e      	add	r2, sp, #56	@ 0x38
 8006fe8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006fec:	aa0d      	add	r2, sp, #52	@ 0x34
 8006fee:	9203      	str	r2, [sp, #12]
 8006ff0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006ff4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ff8:	6863      	ldr	r3, [r4, #4]
 8006ffa:	4642      	mov	r2, r8
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	4628      	mov	r0, r5
 8007000:	464b      	mov	r3, r9
 8007002:	910a      	str	r1, [sp, #40]	@ 0x28
 8007004:	f7ff fed4 	bl	8006db0 <__cvt>
 8007008:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800700a:	4680      	mov	r8, r0
 800700c:	2947      	cmp	r1, #71	@ 0x47
 800700e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007010:	d128      	bne.n	8007064 <_printf_float+0x178>
 8007012:	1cc8      	adds	r0, r1, #3
 8007014:	db02      	blt.n	800701c <_printf_float+0x130>
 8007016:	6863      	ldr	r3, [r4, #4]
 8007018:	4299      	cmp	r1, r3
 800701a:	dd40      	ble.n	800709e <_printf_float+0x1b2>
 800701c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007020:	fa5f fa8a 	uxtb.w	sl, sl
 8007024:	4652      	mov	r2, sl
 8007026:	3901      	subs	r1, #1
 8007028:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800702c:	910d      	str	r1, [sp, #52]	@ 0x34
 800702e:	f7ff ff23 	bl	8006e78 <__exponent>
 8007032:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007034:	4681      	mov	r9, r0
 8007036:	1813      	adds	r3, r2, r0
 8007038:	2a01      	cmp	r2, #1
 800703a:	6123      	str	r3, [r4, #16]
 800703c:	dc02      	bgt.n	8007044 <_printf_float+0x158>
 800703e:	6822      	ldr	r2, [r4, #0]
 8007040:	07d2      	lsls	r2, r2, #31
 8007042:	d501      	bpl.n	8007048 <_printf_float+0x15c>
 8007044:	3301      	adds	r3, #1
 8007046:	6123      	str	r3, [r4, #16]
 8007048:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800704c:	2b00      	cmp	r3, #0
 800704e:	d09e      	beq.n	8006f8e <_printf_float+0xa2>
 8007050:	232d      	movs	r3, #45	@ 0x2d
 8007052:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007056:	e79a      	b.n	8006f8e <_printf_float+0xa2>
 8007058:	2947      	cmp	r1, #71	@ 0x47
 800705a:	d1bf      	bne.n	8006fdc <_printf_float+0xf0>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1bd      	bne.n	8006fdc <_printf_float+0xf0>
 8007060:	2301      	movs	r3, #1
 8007062:	e7ba      	b.n	8006fda <_printf_float+0xee>
 8007064:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007068:	d9dc      	bls.n	8007024 <_printf_float+0x138>
 800706a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800706e:	d118      	bne.n	80070a2 <_printf_float+0x1b6>
 8007070:	2900      	cmp	r1, #0
 8007072:	6863      	ldr	r3, [r4, #4]
 8007074:	dd0b      	ble.n	800708e <_printf_float+0x1a2>
 8007076:	6121      	str	r1, [r4, #16]
 8007078:	b913      	cbnz	r3, 8007080 <_printf_float+0x194>
 800707a:	6822      	ldr	r2, [r4, #0]
 800707c:	07d0      	lsls	r0, r2, #31
 800707e:	d502      	bpl.n	8007086 <_printf_float+0x19a>
 8007080:	3301      	adds	r3, #1
 8007082:	440b      	add	r3, r1
 8007084:	6123      	str	r3, [r4, #16]
 8007086:	f04f 0900 	mov.w	r9, #0
 800708a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800708c:	e7dc      	b.n	8007048 <_printf_float+0x15c>
 800708e:	b913      	cbnz	r3, 8007096 <_printf_float+0x1aa>
 8007090:	6822      	ldr	r2, [r4, #0]
 8007092:	07d2      	lsls	r2, r2, #31
 8007094:	d501      	bpl.n	800709a <_printf_float+0x1ae>
 8007096:	3302      	adds	r3, #2
 8007098:	e7f4      	b.n	8007084 <_printf_float+0x198>
 800709a:	2301      	movs	r3, #1
 800709c:	e7f2      	b.n	8007084 <_printf_float+0x198>
 800709e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80070a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070a4:	4299      	cmp	r1, r3
 80070a6:	db05      	blt.n	80070b4 <_printf_float+0x1c8>
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	6121      	str	r1, [r4, #16]
 80070ac:	07d8      	lsls	r0, r3, #31
 80070ae:	d5ea      	bpl.n	8007086 <_printf_float+0x19a>
 80070b0:	1c4b      	adds	r3, r1, #1
 80070b2:	e7e7      	b.n	8007084 <_printf_float+0x198>
 80070b4:	2900      	cmp	r1, #0
 80070b6:	bfcc      	ite	gt
 80070b8:	2201      	movgt	r2, #1
 80070ba:	f1c1 0202 	rsble	r2, r1, #2
 80070be:	4413      	add	r3, r2
 80070c0:	e7e0      	b.n	8007084 <_printf_float+0x198>
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	055a      	lsls	r2, r3, #21
 80070c6:	d407      	bmi.n	80070d8 <_printf_float+0x1ec>
 80070c8:	6923      	ldr	r3, [r4, #16]
 80070ca:	4642      	mov	r2, r8
 80070cc:	4631      	mov	r1, r6
 80070ce:	4628      	mov	r0, r5
 80070d0:	47b8      	blx	r7
 80070d2:	3001      	adds	r0, #1
 80070d4:	d12b      	bne.n	800712e <_printf_float+0x242>
 80070d6:	e764      	b.n	8006fa2 <_printf_float+0xb6>
 80070d8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070dc:	f240 80dc 	bls.w	8007298 <_printf_float+0x3ac>
 80070e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070e4:	2200      	movs	r2, #0
 80070e6:	2300      	movs	r3, #0
 80070e8:	f7f9 fc5e 	bl	80009a8 <__aeabi_dcmpeq>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d033      	beq.n	8007158 <_printf_float+0x26c>
 80070f0:	2301      	movs	r3, #1
 80070f2:	4631      	mov	r1, r6
 80070f4:	4628      	mov	r0, r5
 80070f6:	4a35      	ldr	r2, [pc, #212]	@ (80071cc <_printf_float+0x2e0>)
 80070f8:	47b8      	blx	r7
 80070fa:	3001      	adds	r0, #1
 80070fc:	f43f af51 	beq.w	8006fa2 <_printf_float+0xb6>
 8007100:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007104:	4543      	cmp	r3, r8
 8007106:	db02      	blt.n	800710e <_printf_float+0x222>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	07d8      	lsls	r0, r3, #31
 800710c:	d50f      	bpl.n	800712e <_printf_float+0x242>
 800710e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007112:	4631      	mov	r1, r6
 8007114:	4628      	mov	r0, r5
 8007116:	47b8      	blx	r7
 8007118:	3001      	adds	r0, #1
 800711a:	f43f af42 	beq.w	8006fa2 <_printf_float+0xb6>
 800711e:	f04f 0900 	mov.w	r9, #0
 8007122:	f108 38ff 	add.w	r8, r8, #4294967295
 8007126:	f104 0a1a 	add.w	sl, r4, #26
 800712a:	45c8      	cmp	r8, r9
 800712c:	dc09      	bgt.n	8007142 <_printf_float+0x256>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	079b      	lsls	r3, r3, #30
 8007132:	f100 8102 	bmi.w	800733a <_printf_float+0x44e>
 8007136:	68e0      	ldr	r0, [r4, #12]
 8007138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800713a:	4298      	cmp	r0, r3
 800713c:	bfb8      	it	lt
 800713e:	4618      	movlt	r0, r3
 8007140:	e731      	b.n	8006fa6 <_printf_float+0xba>
 8007142:	2301      	movs	r3, #1
 8007144:	4652      	mov	r2, sl
 8007146:	4631      	mov	r1, r6
 8007148:	4628      	mov	r0, r5
 800714a:	47b8      	blx	r7
 800714c:	3001      	adds	r0, #1
 800714e:	f43f af28 	beq.w	8006fa2 <_printf_float+0xb6>
 8007152:	f109 0901 	add.w	r9, r9, #1
 8007156:	e7e8      	b.n	800712a <_printf_float+0x23e>
 8007158:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800715a:	2b00      	cmp	r3, #0
 800715c:	dc38      	bgt.n	80071d0 <_printf_float+0x2e4>
 800715e:	2301      	movs	r3, #1
 8007160:	4631      	mov	r1, r6
 8007162:	4628      	mov	r0, r5
 8007164:	4a19      	ldr	r2, [pc, #100]	@ (80071cc <_printf_float+0x2e0>)
 8007166:	47b8      	blx	r7
 8007168:	3001      	adds	r0, #1
 800716a:	f43f af1a 	beq.w	8006fa2 <_printf_float+0xb6>
 800716e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007172:	ea59 0303 	orrs.w	r3, r9, r3
 8007176:	d102      	bne.n	800717e <_printf_float+0x292>
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	07d9      	lsls	r1, r3, #31
 800717c:	d5d7      	bpl.n	800712e <_printf_float+0x242>
 800717e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007182:	4631      	mov	r1, r6
 8007184:	4628      	mov	r0, r5
 8007186:	47b8      	blx	r7
 8007188:	3001      	adds	r0, #1
 800718a:	f43f af0a 	beq.w	8006fa2 <_printf_float+0xb6>
 800718e:	f04f 0a00 	mov.w	sl, #0
 8007192:	f104 0b1a 	add.w	fp, r4, #26
 8007196:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007198:	425b      	negs	r3, r3
 800719a:	4553      	cmp	r3, sl
 800719c:	dc01      	bgt.n	80071a2 <_printf_float+0x2b6>
 800719e:	464b      	mov	r3, r9
 80071a0:	e793      	b.n	80070ca <_printf_float+0x1de>
 80071a2:	2301      	movs	r3, #1
 80071a4:	465a      	mov	r2, fp
 80071a6:	4631      	mov	r1, r6
 80071a8:	4628      	mov	r0, r5
 80071aa:	47b8      	blx	r7
 80071ac:	3001      	adds	r0, #1
 80071ae:	f43f aef8 	beq.w	8006fa2 <_printf_float+0xb6>
 80071b2:	f10a 0a01 	add.w	sl, sl, #1
 80071b6:	e7ee      	b.n	8007196 <_printf_float+0x2aa>
 80071b8:	7fefffff 	.word	0x7fefffff
 80071bc:	0800a644 	.word	0x0800a644
 80071c0:	0800a640 	.word	0x0800a640
 80071c4:	0800a64c 	.word	0x0800a64c
 80071c8:	0800a648 	.word	0x0800a648
 80071cc:	0800a650 	.word	0x0800a650
 80071d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071d2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80071d6:	4553      	cmp	r3, sl
 80071d8:	bfa8      	it	ge
 80071da:	4653      	movge	r3, sl
 80071dc:	2b00      	cmp	r3, #0
 80071de:	4699      	mov	r9, r3
 80071e0:	dc36      	bgt.n	8007250 <_printf_float+0x364>
 80071e2:	f04f 0b00 	mov.w	fp, #0
 80071e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071ea:	f104 021a 	add.w	r2, r4, #26
 80071ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80071f2:	eba3 0309 	sub.w	r3, r3, r9
 80071f6:	455b      	cmp	r3, fp
 80071f8:	dc31      	bgt.n	800725e <_printf_float+0x372>
 80071fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071fc:	459a      	cmp	sl, r3
 80071fe:	dc3a      	bgt.n	8007276 <_printf_float+0x38a>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	07da      	lsls	r2, r3, #31
 8007204:	d437      	bmi.n	8007276 <_printf_float+0x38a>
 8007206:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007208:	ebaa 0903 	sub.w	r9, sl, r3
 800720c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800720e:	ebaa 0303 	sub.w	r3, sl, r3
 8007212:	4599      	cmp	r9, r3
 8007214:	bfa8      	it	ge
 8007216:	4699      	movge	r9, r3
 8007218:	f1b9 0f00 	cmp.w	r9, #0
 800721c:	dc33      	bgt.n	8007286 <_printf_float+0x39a>
 800721e:	f04f 0800 	mov.w	r8, #0
 8007222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007226:	f104 0b1a 	add.w	fp, r4, #26
 800722a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800722c:	ebaa 0303 	sub.w	r3, sl, r3
 8007230:	eba3 0309 	sub.w	r3, r3, r9
 8007234:	4543      	cmp	r3, r8
 8007236:	f77f af7a 	ble.w	800712e <_printf_float+0x242>
 800723a:	2301      	movs	r3, #1
 800723c:	465a      	mov	r2, fp
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	f43f aeac 	beq.w	8006fa2 <_printf_float+0xb6>
 800724a:	f108 0801 	add.w	r8, r8, #1
 800724e:	e7ec      	b.n	800722a <_printf_float+0x33e>
 8007250:	4642      	mov	r2, r8
 8007252:	4631      	mov	r1, r6
 8007254:	4628      	mov	r0, r5
 8007256:	47b8      	blx	r7
 8007258:	3001      	adds	r0, #1
 800725a:	d1c2      	bne.n	80071e2 <_printf_float+0x2f6>
 800725c:	e6a1      	b.n	8006fa2 <_printf_float+0xb6>
 800725e:	2301      	movs	r3, #1
 8007260:	4631      	mov	r1, r6
 8007262:	4628      	mov	r0, r5
 8007264:	920a      	str	r2, [sp, #40]	@ 0x28
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	f43f ae9a 	beq.w	8006fa2 <_printf_float+0xb6>
 800726e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007270:	f10b 0b01 	add.w	fp, fp, #1
 8007274:	e7bb      	b.n	80071ee <_printf_float+0x302>
 8007276:	4631      	mov	r1, r6
 8007278:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800727c:	4628      	mov	r0, r5
 800727e:	47b8      	blx	r7
 8007280:	3001      	adds	r0, #1
 8007282:	d1c0      	bne.n	8007206 <_printf_float+0x31a>
 8007284:	e68d      	b.n	8006fa2 <_printf_float+0xb6>
 8007286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007288:	464b      	mov	r3, r9
 800728a:	4631      	mov	r1, r6
 800728c:	4628      	mov	r0, r5
 800728e:	4442      	add	r2, r8
 8007290:	47b8      	blx	r7
 8007292:	3001      	adds	r0, #1
 8007294:	d1c3      	bne.n	800721e <_printf_float+0x332>
 8007296:	e684      	b.n	8006fa2 <_printf_float+0xb6>
 8007298:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800729c:	f1ba 0f01 	cmp.w	sl, #1
 80072a0:	dc01      	bgt.n	80072a6 <_printf_float+0x3ba>
 80072a2:	07db      	lsls	r3, r3, #31
 80072a4:	d536      	bpl.n	8007314 <_printf_float+0x428>
 80072a6:	2301      	movs	r3, #1
 80072a8:	4642      	mov	r2, r8
 80072aa:	4631      	mov	r1, r6
 80072ac:	4628      	mov	r0, r5
 80072ae:	47b8      	blx	r7
 80072b0:	3001      	adds	r0, #1
 80072b2:	f43f ae76 	beq.w	8006fa2 <_printf_float+0xb6>
 80072b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072ba:	4631      	mov	r1, r6
 80072bc:	4628      	mov	r0, r5
 80072be:	47b8      	blx	r7
 80072c0:	3001      	adds	r0, #1
 80072c2:	f43f ae6e 	beq.w	8006fa2 <_printf_float+0xb6>
 80072c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072ca:	2200      	movs	r2, #0
 80072cc:	2300      	movs	r3, #0
 80072ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072d2:	f7f9 fb69 	bl	80009a8 <__aeabi_dcmpeq>
 80072d6:	b9c0      	cbnz	r0, 800730a <_printf_float+0x41e>
 80072d8:	4653      	mov	r3, sl
 80072da:	f108 0201 	add.w	r2, r8, #1
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b8      	blx	r7
 80072e4:	3001      	adds	r0, #1
 80072e6:	d10c      	bne.n	8007302 <_printf_float+0x416>
 80072e8:	e65b      	b.n	8006fa2 <_printf_float+0xb6>
 80072ea:	2301      	movs	r3, #1
 80072ec:	465a      	mov	r2, fp
 80072ee:	4631      	mov	r1, r6
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b8      	blx	r7
 80072f4:	3001      	adds	r0, #1
 80072f6:	f43f ae54 	beq.w	8006fa2 <_printf_float+0xb6>
 80072fa:	f108 0801 	add.w	r8, r8, #1
 80072fe:	45d0      	cmp	r8, sl
 8007300:	dbf3      	blt.n	80072ea <_printf_float+0x3fe>
 8007302:	464b      	mov	r3, r9
 8007304:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007308:	e6e0      	b.n	80070cc <_printf_float+0x1e0>
 800730a:	f04f 0800 	mov.w	r8, #0
 800730e:	f104 0b1a 	add.w	fp, r4, #26
 8007312:	e7f4      	b.n	80072fe <_printf_float+0x412>
 8007314:	2301      	movs	r3, #1
 8007316:	4642      	mov	r2, r8
 8007318:	e7e1      	b.n	80072de <_printf_float+0x3f2>
 800731a:	2301      	movs	r3, #1
 800731c:	464a      	mov	r2, r9
 800731e:	4631      	mov	r1, r6
 8007320:	4628      	mov	r0, r5
 8007322:	47b8      	blx	r7
 8007324:	3001      	adds	r0, #1
 8007326:	f43f ae3c 	beq.w	8006fa2 <_printf_float+0xb6>
 800732a:	f108 0801 	add.w	r8, r8, #1
 800732e:	68e3      	ldr	r3, [r4, #12]
 8007330:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007332:	1a5b      	subs	r3, r3, r1
 8007334:	4543      	cmp	r3, r8
 8007336:	dcf0      	bgt.n	800731a <_printf_float+0x42e>
 8007338:	e6fd      	b.n	8007136 <_printf_float+0x24a>
 800733a:	f04f 0800 	mov.w	r8, #0
 800733e:	f104 0919 	add.w	r9, r4, #25
 8007342:	e7f4      	b.n	800732e <_printf_float+0x442>

08007344 <_printf_common>:
 8007344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007348:	4616      	mov	r6, r2
 800734a:	4698      	mov	r8, r3
 800734c:	688a      	ldr	r2, [r1, #8]
 800734e:	690b      	ldr	r3, [r1, #16]
 8007350:	4607      	mov	r7, r0
 8007352:	4293      	cmp	r3, r2
 8007354:	bfb8      	it	lt
 8007356:	4613      	movlt	r3, r2
 8007358:	6033      	str	r3, [r6, #0]
 800735a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800735e:	460c      	mov	r4, r1
 8007360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007364:	b10a      	cbz	r2, 800736a <_printf_common+0x26>
 8007366:	3301      	adds	r3, #1
 8007368:	6033      	str	r3, [r6, #0]
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	0699      	lsls	r1, r3, #26
 800736e:	bf42      	ittt	mi
 8007370:	6833      	ldrmi	r3, [r6, #0]
 8007372:	3302      	addmi	r3, #2
 8007374:	6033      	strmi	r3, [r6, #0]
 8007376:	6825      	ldr	r5, [r4, #0]
 8007378:	f015 0506 	ands.w	r5, r5, #6
 800737c:	d106      	bne.n	800738c <_printf_common+0x48>
 800737e:	f104 0a19 	add.w	sl, r4, #25
 8007382:	68e3      	ldr	r3, [r4, #12]
 8007384:	6832      	ldr	r2, [r6, #0]
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	42ab      	cmp	r3, r5
 800738a:	dc2b      	bgt.n	80073e4 <_printf_common+0xa0>
 800738c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007390:	6822      	ldr	r2, [r4, #0]
 8007392:	3b00      	subs	r3, #0
 8007394:	bf18      	it	ne
 8007396:	2301      	movne	r3, #1
 8007398:	0692      	lsls	r2, r2, #26
 800739a:	d430      	bmi.n	80073fe <_printf_common+0xba>
 800739c:	4641      	mov	r1, r8
 800739e:	4638      	mov	r0, r7
 80073a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073a4:	47c8      	blx	r9
 80073a6:	3001      	adds	r0, #1
 80073a8:	d023      	beq.n	80073f2 <_printf_common+0xae>
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	6922      	ldr	r2, [r4, #16]
 80073ae:	f003 0306 	and.w	r3, r3, #6
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	bf14      	ite	ne
 80073b6:	2500      	movne	r5, #0
 80073b8:	6833      	ldreq	r3, [r6, #0]
 80073ba:	f04f 0600 	mov.w	r6, #0
 80073be:	bf08      	it	eq
 80073c0:	68e5      	ldreq	r5, [r4, #12]
 80073c2:	f104 041a 	add.w	r4, r4, #26
 80073c6:	bf08      	it	eq
 80073c8:	1aed      	subeq	r5, r5, r3
 80073ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80073ce:	bf08      	it	eq
 80073d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073d4:	4293      	cmp	r3, r2
 80073d6:	bfc4      	itt	gt
 80073d8:	1a9b      	subgt	r3, r3, r2
 80073da:	18ed      	addgt	r5, r5, r3
 80073dc:	42b5      	cmp	r5, r6
 80073de:	d11a      	bne.n	8007416 <_printf_common+0xd2>
 80073e0:	2000      	movs	r0, #0
 80073e2:	e008      	b.n	80073f6 <_printf_common+0xb2>
 80073e4:	2301      	movs	r3, #1
 80073e6:	4652      	mov	r2, sl
 80073e8:	4641      	mov	r1, r8
 80073ea:	4638      	mov	r0, r7
 80073ec:	47c8      	blx	r9
 80073ee:	3001      	adds	r0, #1
 80073f0:	d103      	bne.n	80073fa <_printf_common+0xb6>
 80073f2:	f04f 30ff 	mov.w	r0, #4294967295
 80073f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fa:	3501      	adds	r5, #1
 80073fc:	e7c1      	b.n	8007382 <_printf_common+0x3e>
 80073fe:	2030      	movs	r0, #48	@ 0x30
 8007400:	18e1      	adds	r1, r4, r3
 8007402:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800740c:	4422      	add	r2, r4
 800740e:	3302      	adds	r3, #2
 8007410:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007414:	e7c2      	b.n	800739c <_printf_common+0x58>
 8007416:	2301      	movs	r3, #1
 8007418:	4622      	mov	r2, r4
 800741a:	4641      	mov	r1, r8
 800741c:	4638      	mov	r0, r7
 800741e:	47c8      	blx	r9
 8007420:	3001      	adds	r0, #1
 8007422:	d0e6      	beq.n	80073f2 <_printf_common+0xae>
 8007424:	3601      	adds	r6, #1
 8007426:	e7d9      	b.n	80073dc <_printf_common+0x98>

08007428 <_printf_i>:
 8007428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800742c:	7e0f      	ldrb	r7, [r1, #24]
 800742e:	4691      	mov	r9, r2
 8007430:	2f78      	cmp	r7, #120	@ 0x78
 8007432:	4680      	mov	r8, r0
 8007434:	460c      	mov	r4, r1
 8007436:	469a      	mov	sl, r3
 8007438:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800743a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800743e:	d807      	bhi.n	8007450 <_printf_i+0x28>
 8007440:	2f62      	cmp	r7, #98	@ 0x62
 8007442:	d80a      	bhi.n	800745a <_printf_i+0x32>
 8007444:	2f00      	cmp	r7, #0
 8007446:	f000 80d1 	beq.w	80075ec <_printf_i+0x1c4>
 800744a:	2f58      	cmp	r7, #88	@ 0x58
 800744c:	f000 80b8 	beq.w	80075c0 <_printf_i+0x198>
 8007450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007454:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007458:	e03a      	b.n	80074d0 <_printf_i+0xa8>
 800745a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800745e:	2b15      	cmp	r3, #21
 8007460:	d8f6      	bhi.n	8007450 <_printf_i+0x28>
 8007462:	a101      	add	r1, pc, #4	@ (adr r1, 8007468 <_printf_i+0x40>)
 8007464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007468:	080074c1 	.word	0x080074c1
 800746c:	080074d5 	.word	0x080074d5
 8007470:	08007451 	.word	0x08007451
 8007474:	08007451 	.word	0x08007451
 8007478:	08007451 	.word	0x08007451
 800747c:	08007451 	.word	0x08007451
 8007480:	080074d5 	.word	0x080074d5
 8007484:	08007451 	.word	0x08007451
 8007488:	08007451 	.word	0x08007451
 800748c:	08007451 	.word	0x08007451
 8007490:	08007451 	.word	0x08007451
 8007494:	080075d3 	.word	0x080075d3
 8007498:	080074ff 	.word	0x080074ff
 800749c:	0800758d 	.word	0x0800758d
 80074a0:	08007451 	.word	0x08007451
 80074a4:	08007451 	.word	0x08007451
 80074a8:	080075f5 	.word	0x080075f5
 80074ac:	08007451 	.word	0x08007451
 80074b0:	080074ff 	.word	0x080074ff
 80074b4:	08007451 	.word	0x08007451
 80074b8:	08007451 	.word	0x08007451
 80074bc:	08007595 	.word	0x08007595
 80074c0:	6833      	ldr	r3, [r6, #0]
 80074c2:	1d1a      	adds	r2, r3, #4
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6032      	str	r2, [r6, #0]
 80074c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074d0:	2301      	movs	r3, #1
 80074d2:	e09c      	b.n	800760e <_printf_i+0x1e6>
 80074d4:	6833      	ldr	r3, [r6, #0]
 80074d6:	6820      	ldr	r0, [r4, #0]
 80074d8:	1d19      	adds	r1, r3, #4
 80074da:	6031      	str	r1, [r6, #0]
 80074dc:	0606      	lsls	r6, r0, #24
 80074de:	d501      	bpl.n	80074e4 <_printf_i+0xbc>
 80074e0:	681d      	ldr	r5, [r3, #0]
 80074e2:	e003      	b.n	80074ec <_printf_i+0xc4>
 80074e4:	0645      	lsls	r5, r0, #25
 80074e6:	d5fb      	bpl.n	80074e0 <_printf_i+0xb8>
 80074e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074ec:	2d00      	cmp	r5, #0
 80074ee:	da03      	bge.n	80074f8 <_printf_i+0xd0>
 80074f0:	232d      	movs	r3, #45	@ 0x2d
 80074f2:	426d      	negs	r5, r5
 80074f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074f8:	230a      	movs	r3, #10
 80074fa:	4858      	ldr	r0, [pc, #352]	@ (800765c <_printf_i+0x234>)
 80074fc:	e011      	b.n	8007522 <_printf_i+0xfa>
 80074fe:	6821      	ldr	r1, [r4, #0]
 8007500:	6833      	ldr	r3, [r6, #0]
 8007502:	0608      	lsls	r0, r1, #24
 8007504:	f853 5b04 	ldr.w	r5, [r3], #4
 8007508:	d402      	bmi.n	8007510 <_printf_i+0xe8>
 800750a:	0649      	lsls	r1, r1, #25
 800750c:	bf48      	it	mi
 800750e:	b2ad      	uxthmi	r5, r5
 8007510:	2f6f      	cmp	r7, #111	@ 0x6f
 8007512:	6033      	str	r3, [r6, #0]
 8007514:	bf14      	ite	ne
 8007516:	230a      	movne	r3, #10
 8007518:	2308      	moveq	r3, #8
 800751a:	4850      	ldr	r0, [pc, #320]	@ (800765c <_printf_i+0x234>)
 800751c:	2100      	movs	r1, #0
 800751e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007522:	6866      	ldr	r6, [r4, #4]
 8007524:	2e00      	cmp	r6, #0
 8007526:	60a6      	str	r6, [r4, #8]
 8007528:	db05      	blt.n	8007536 <_printf_i+0x10e>
 800752a:	6821      	ldr	r1, [r4, #0]
 800752c:	432e      	orrs	r6, r5
 800752e:	f021 0104 	bic.w	r1, r1, #4
 8007532:	6021      	str	r1, [r4, #0]
 8007534:	d04b      	beq.n	80075ce <_printf_i+0x1a6>
 8007536:	4616      	mov	r6, r2
 8007538:	fbb5 f1f3 	udiv	r1, r5, r3
 800753c:	fb03 5711 	mls	r7, r3, r1, r5
 8007540:	5dc7      	ldrb	r7, [r0, r7]
 8007542:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007546:	462f      	mov	r7, r5
 8007548:	42bb      	cmp	r3, r7
 800754a:	460d      	mov	r5, r1
 800754c:	d9f4      	bls.n	8007538 <_printf_i+0x110>
 800754e:	2b08      	cmp	r3, #8
 8007550:	d10b      	bne.n	800756a <_printf_i+0x142>
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	07df      	lsls	r7, r3, #31
 8007556:	d508      	bpl.n	800756a <_printf_i+0x142>
 8007558:	6923      	ldr	r3, [r4, #16]
 800755a:	6861      	ldr	r1, [r4, #4]
 800755c:	4299      	cmp	r1, r3
 800755e:	bfde      	ittt	le
 8007560:	2330      	movle	r3, #48	@ 0x30
 8007562:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007566:	f106 36ff 	addle.w	r6, r6, #4294967295
 800756a:	1b92      	subs	r2, r2, r6
 800756c:	6122      	str	r2, [r4, #16]
 800756e:	464b      	mov	r3, r9
 8007570:	4621      	mov	r1, r4
 8007572:	4640      	mov	r0, r8
 8007574:	f8cd a000 	str.w	sl, [sp]
 8007578:	aa03      	add	r2, sp, #12
 800757a:	f7ff fee3 	bl	8007344 <_printf_common>
 800757e:	3001      	adds	r0, #1
 8007580:	d14a      	bne.n	8007618 <_printf_i+0x1f0>
 8007582:	f04f 30ff 	mov.w	r0, #4294967295
 8007586:	b004      	add	sp, #16
 8007588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	f043 0320 	orr.w	r3, r3, #32
 8007592:	6023      	str	r3, [r4, #0]
 8007594:	2778      	movs	r7, #120	@ 0x78
 8007596:	4832      	ldr	r0, [pc, #200]	@ (8007660 <_printf_i+0x238>)
 8007598:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	6831      	ldr	r1, [r6, #0]
 80075a0:	061f      	lsls	r7, r3, #24
 80075a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80075a6:	d402      	bmi.n	80075ae <_printf_i+0x186>
 80075a8:	065f      	lsls	r7, r3, #25
 80075aa:	bf48      	it	mi
 80075ac:	b2ad      	uxthmi	r5, r5
 80075ae:	6031      	str	r1, [r6, #0]
 80075b0:	07d9      	lsls	r1, r3, #31
 80075b2:	bf44      	itt	mi
 80075b4:	f043 0320 	orrmi.w	r3, r3, #32
 80075b8:	6023      	strmi	r3, [r4, #0]
 80075ba:	b11d      	cbz	r5, 80075c4 <_printf_i+0x19c>
 80075bc:	2310      	movs	r3, #16
 80075be:	e7ad      	b.n	800751c <_printf_i+0xf4>
 80075c0:	4826      	ldr	r0, [pc, #152]	@ (800765c <_printf_i+0x234>)
 80075c2:	e7e9      	b.n	8007598 <_printf_i+0x170>
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	f023 0320 	bic.w	r3, r3, #32
 80075ca:	6023      	str	r3, [r4, #0]
 80075cc:	e7f6      	b.n	80075bc <_printf_i+0x194>
 80075ce:	4616      	mov	r6, r2
 80075d0:	e7bd      	b.n	800754e <_printf_i+0x126>
 80075d2:	6833      	ldr	r3, [r6, #0]
 80075d4:	6825      	ldr	r5, [r4, #0]
 80075d6:	1d18      	adds	r0, r3, #4
 80075d8:	6961      	ldr	r1, [r4, #20]
 80075da:	6030      	str	r0, [r6, #0]
 80075dc:	062e      	lsls	r6, r5, #24
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	d501      	bpl.n	80075e6 <_printf_i+0x1be>
 80075e2:	6019      	str	r1, [r3, #0]
 80075e4:	e002      	b.n	80075ec <_printf_i+0x1c4>
 80075e6:	0668      	lsls	r0, r5, #25
 80075e8:	d5fb      	bpl.n	80075e2 <_printf_i+0x1ba>
 80075ea:	8019      	strh	r1, [r3, #0]
 80075ec:	2300      	movs	r3, #0
 80075ee:	4616      	mov	r6, r2
 80075f0:	6123      	str	r3, [r4, #16]
 80075f2:	e7bc      	b.n	800756e <_printf_i+0x146>
 80075f4:	6833      	ldr	r3, [r6, #0]
 80075f6:	2100      	movs	r1, #0
 80075f8:	1d1a      	adds	r2, r3, #4
 80075fa:	6032      	str	r2, [r6, #0]
 80075fc:	681e      	ldr	r6, [r3, #0]
 80075fe:	6862      	ldr	r2, [r4, #4]
 8007600:	4630      	mov	r0, r6
 8007602:	f000 fa82 	bl	8007b0a <memchr>
 8007606:	b108      	cbz	r0, 800760c <_printf_i+0x1e4>
 8007608:	1b80      	subs	r0, r0, r6
 800760a:	6060      	str	r0, [r4, #4]
 800760c:	6863      	ldr	r3, [r4, #4]
 800760e:	6123      	str	r3, [r4, #16]
 8007610:	2300      	movs	r3, #0
 8007612:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007616:	e7aa      	b.n	800756e <_printf_i+0x146>
 8007618:	4632      	mov	r2, r6
 800761a:	4649      	mov	r1, r9
 800761c:	4640      	mov	r0, r8
 800761e:	6923      	ldr	r3, [r4, #16]
 8007620:	47d0      	blx	sl
 8007622:	3001      	adds	r0, #1
 8007624:	d0ad      	beq.n	8007582 <_printf_i+0x15a>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	079b      	lsls	r3, r3, #30
 800762a:	d413      	bmi.n	8007654 <_printf_i+0x22c>
 800762c:	68e0      	ldr	r0, [r4, #12]
 800762e:	9b03      	ldr	r3, [sp, #12]
 8007630:	4298      	cmp	r0, r3
 8007632:	bfb8      	it	lt
 8007634:	4618      	movlt	r0, r3
 8007636:	e7a6      	b.n	8007586 <_printf_i+0x15e>
 8007638:	2301      	movs	r3, #1
 800763a:	4632      	mov	r2, r6
 800763c:	4649      	mov	r1, r9
 800763e:	4640      	mov	r0, r8
 8007640:	47d0      	blx	sl
 8007642:	3001      	adds	r0, #1
 8007644:	d09d      	beq.n	8007582 <_printf_i+0x15a>
 8007646:	3501      	adds	r5, #1
 8007648:	68e3      	ldr	r3, [r4, #12]
 800764a:	9903      	ldr	r1, [sp, #12]
 800764c:	1a5b      	subs	r3, r3, r1
 800764e:	42ab      	cmp	r3, r5
 8007650:	dcf2      	bgt.n	8007638 <_printf_i+0x210>
 8007652:	e7eb      	b.n	800762c <_printf_i+0x204>
 8007654:	2500      	movs	r5, #0
 8007656:	f104 0619 	add.w	r6, r4, #25
 800765a:	e7f5      	b.n	8007648 <_printf_i+0x220>
 800765c:	0800a652 	.word	0x0800a652
 8007660:	0800a663 	.word	0x0800a663

08007664 <std>:
 8007664:	2300      	movs	r3, #0
 8007666:	b510      	push	{r4, lr}
 8007668:	4604      	mov	r4, r0
 800766a:	e9c0 3300 	strd	r3, r3, [r0]
 800766e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007672:	6083      	str	r3, [r0, #8]
 8007674:	8181      	strh	r1, [r0, #12]
 8007676:	6643      	str	r3, [r0, #100]	@ 0x64
 8007678:	81c2      	strh	r2, [r0, #14]
 800767a:	6183      	str	r3, [r0, #24]
 800767c:	4619      	mov	r1, r3
 800767e:	2208      	movs	r2, #8
 8007680:	305c      	adds	r0, #92	@ 0x5c
 8007682:	f000 f94c 	bl	800791e <memset>
 8007686:	4b0d      	ldr	r3, [pc, #52]	@ (80076bc <std+0x58>)
 8007688:	6224      	str	r4, [r4, #32]
 800768a:	6263      	str	r3, [r4, #36]	@ 0x24
 800768c:	4b0c      	ldr	r3, [pc, #48]	@ (80076c0 <std+0x5c>)
 800768e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007690:	4b0c      	ldr	r3, [pc, #48]	@ (80076c4 <std+0x60>)
 8007692:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007694:	4b0c      	ldr	r3, [pc, #48]	@ (80076c8 <std+0x64>)
 8007696:	6323      	str	r3, [r4, #48]	@ 0x30
 8007698:	4b0c      	ldr	r3, [pc, #48]	@ (80076cc <std+0x68>)
 800769a:	429c      	cmp	r4, r3
 800769c:	d006      	beq.n	80076ac <std+0x48>
 800769e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076a2:	4294      	cmp	r4, r2
 80076a4:	d002      	beq.n	80076ac <std+0x48>
 80076a6:	33d0      	adds	r3, #208	@ 0xd0
 80076a8:	429c      	cmp	r4, r3
 80076aa:	d105      	bne.n	80076b8 <std+0x54>
 80076ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076b4:	f000 ba1e 	b.w	8007af4 <__retarget_lock_init_recursive>
 80076b8:	bd10      	pop	{r4, pc}
 80076ba:	bf00      	nop
 80076bc:	08007899 	.word	0x08007899
 80076c0:	080078bb 	.word	0x080078bb
 80076c4:	080078f3 	.word	0x080078f3
 80076c8:	08007917 	.word	0x08007917
 80076cc:	20000644 	.word	0x20000644

080076d0 <stdio_exit_handler>:
 80076d0:	4a02      	ldr	r2, [pc, #8]	@ (80076dc <stdio_exit_handler+0xc>)
 80076d2:	4903      	ldr	r1, [pc, #12]	@ (80076e0 <stdio_exit_handler+0x10>)
 80076d4:	4803      	ldr	r0, [pc, #12]	@ (80076e4 <stdio_exit_handler+0x14>)
 80076d6:	f000 b869 	b.w	80077ac <_fwalk_sglue>
 80076da:	bf00      	nop
 80076dc:	2000002c 	.word	0x2000002c
 80076e0:	08009de5 	.word	0x08009de5
 80076e4:	200001a8 	.word	0x200001a8

080076e8 <cleanup_stdio>:
 80076e8:	6841      	ldr	r1, [r0, #4]
 80076ea:	4b0c      	ldr	r3, [pc, #48]	@ (800771c <cleanup_stdio+0x34>)
 80076ec:	b510      	push	{r4, lr}
 80076ee:	4299      	cmp	r1, r3
 80076f0:	4604      	mov	r4, r0
 80076f2:	d001      	beq.n	80076f8 <cleanup_stdio+0x10>
 80076f4:	f002 fb76 	bl	8009de4 <_fflush_r>
 80076f8:	68a1      	ldr	r1, [r4, #8]
 80076fa:	4b09      	ldr	r3, [pc, #36]	@ (8007720 <cleanup_stdio+0x38>)
 80076fc:	4299      	cmp	r1, r3
 80076fe:	d002      	beq.n	8007706 <cleanup_stdio+0x1e>
 8007700:	4620      	mov	r0, r4
 8007702:	f002 fb6f 	bl	8009de4 <_fflush_r>
 8007706:	68e1      	ldr	r1, [r4, #12]
 8007708:	4b06      	ldr	r3, [pc, #24]	@ (8007724 <cleanup_stdio+0x3c>)
 800770a:	4299      	cmp	r1, r3
 800770c:	d004      	beq.n	8007718 <cleanup_stdio+0x30>
 800770e:	4620      	mov	r0, r4
 8007710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007714:	f002 bb66 	b.w	8009de4 <_fflush_r>
 8007718:	bd10      	pop	{r4, pc}
 800771a:	bf00      	nop
 800771c:	20000644 	.word	0x20000644
 8007720:	200006ac 	.word	0x200006ac
 8007724:	20000714 	.word	0x20000714

08007728 <global_stdio_init.part.0>:
 8007728:	b510      	push	{r4, lr}
 800772a:	4b0b      	ldr	r3, [pc, #44]	@ (8007758 <global_stdio_init.part.0+0x30>)
 800772c:	4c0b      	ldr	r4, [pc, #44]	@ (800775c <global_stdio_init.part.0+0x34>)
 800772e:	4a0c      	ldr	r2, [pc, #48]	@ (8007760 <global_stdio_init.part.0+0x38>)
 8007730:	4620      	mov	r0, r4
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	2104      	movs	r1, #4
 8007736:	2200      	movs	r2, #0
 8007738:	f7ff ff94 	bl	8007664 <std>
 800773c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007740:	2201      	movs	r2, #1
 8007742:	2109      	movs	r1, #9
 8007744:	f7ff ff8e 	bl	8007664 <std>
 8007748:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800774c:	2202      	movs	r2, #2
 800774e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007752:	2112      	movs	r1, #18
 8007754:	f7ff bf86 	b.w	8007664 <std>
 8007758:	2000077c 	.word	0x2000077c
 800775c:	20000644 	.word	0x20000644
 8007760:	080076d1 	.word	0x080076d1

08007764 <__sfp_lock_acquire>:
 8007764:	4801      	ldr	r0, [pc, #4]	@ (800776c <__sfp_lock_acquire+0x8>)
 8007766:	f000 b9c6 	b.w	8007af6 <__retarget_lock_acquire_recursive>
 800776a:	bf00      	nop
 800776c:	20000785 	.word	0x20000785

08007770 <__sfp_lock_release>:
 8007770:	4801      	ldr	r0, [pc, #4]	@ (8007778 <__sfp_lock_release+0x8>)
 8007772:	f000 b9c1 	b.w	8007af8 <__retarget_lock_release_recursive>
 8007776:	bf00      	nop
 8007778:	20000785 	.word	0x20000785

0800777c <__sinit>:
 800777c:	b510      	push	{r4, lr}
 800777e:	4604      	mov	r4, r0
 8007780:	f7ff fff0 	bl	8007764 <__sfp_lock_acquire>
 8007784:	6a23      	ldr	r3, [r4, #32]
 8007786:	b11b      	cbz	r3, 8007790 <__sinit+0x14>
 8007788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800778c:	f7ff bff0 	b.w	8007770 <__sfp_lock_release>
 8007790:	4b04      	ldr	r3, [pc, #16]	@ (80077a4 <__sinit+0x28>)
 8007792:	6223      	str	r3, [r4, #32]
 8007794:	4b04      	ldr	r3, [pc, #16]	@ (80077a8 <__sinit+0x2c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1f5      	bne.n	8007788 <__sinit+0xc>
 800779c:	f7ff ffc4 	bl	8007728 <global_stdio_init.part.0>
 80077a0:	e7f2      	b.n	8007788 <__sinit+0xc>
 80077a2:	bf00      	nop
 80077a4:	080076e9 	.word	0x080076e9
 80077a8:	2000077c 	.word	0x2000077c

080077ac <_fwalk_sglue>:
 80077ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077b0:	4607      	mov	r7, r0
 80077b2:	4688      	mov	r8, r1
 80077b4:	4614      	mov	r4, r2
 80077b6:	2600      	movs	r6, #0
 80077b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077bc:	f1b9 0901 	subs.w	r9, r9, #1
 80077c0:	d505      	bpl.n	80077ce <_fwalk_sglue+0x22>
 80077c2:	6824      	ldr	r4, [r4, #0]
 80077c4:	2c00      	cmp	r4, #0
 80077c6:	d1f7      	bne.n	80077b8 <_fwalk_sglue+0xc>
 80077c8:	4630      	mov	r0, r6
 80077ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ce:	89ab      	ldrh	r3, [r5, #12]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d907      	bls.n	80077e4 <_fwalk_sglue+0x38>
 80077d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077d8:	3301      	adds	r3, #1
 80077da:	d003      	beq.n	80077e4 <_fwalk_sglue+0x38>
 80077dc:	4629      	mov	r1, r5
 80077de:	4638      	mov	r0, r7
 80077e0:	47c0      	blx	r8
 80077e2:	4306      	orrs	r6, r0
 80077e4:	3568      	adds	r5, #104	@ 0x68
 80077e6:	e7e9      	b.n	80077bc <_fwalk_sglue+0x10>

080077e8 <sniprintf>:
 80077e8:	b40c      	push	{r2, r3}
 80077ea:	b530      	push	{r4, r5, lr}
 80077ec:	4b18      	ldr	r3, [pc, #96]	@ (8007850 <sniprintf+0x68>)
 80077ee:	1e0c      	subs	r4, r1, #0
 80077f0:	681d      	ldr	r5, [r3, #0]
 80077f2:	b09d      	sub	sp, #116	@ 0x74
 80077f4:	da08      	bge.n	8007808 <sniprintf+0x20>
 80077f6:	238b      	movs	r3, #139	@ 0x8b
 80077f8:	f04f 30ff 	mov.w	r0, #4294967295
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	b01d      	add	sp, #116	@ 0x74
 8007800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007804:	b002      	add	sp, #8
 8007806:	4770      	bx	lr
 8007808:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800780c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007810:	f04f 0300 	mov.w	r3, #0
 8007814:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007816:	bf0c      	ite	eq
 8007818:	4623      	moveq	r3, r4
 800781a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800781e:	9304      	str	r3, [sp, #16]
 8007820:	9307      	str	r3, [sp, #28]
 8007822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007826:	9002      	str	r0, [sp, #8]
 8007828:	9006      	str	r0, [sp, #24]
 800782a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800782e:	4628      	mov	r0, r5
 8007830:	ab21      	add	r3, sp, #132	@ 0x84
 8007832:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007834:	a902      	add	r1, sp, #8
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	f002 f958 	bl	8009aec <_svfiprintf_r>
 800783c:	1c43      	adds	r3, r0, #1
 800783e:	bfbc      	itt	lt
 8007840:	238b      	movlt	r3, #139	@ 0x8b
 8007842:	602b      	strlt	r3, [r5, #0]
 8007844:	2c00      	cmp	r4, #0
 8007846:	d0da      	beq.n	80077fe <sniprintf+0x16>
 8007848:	2200      	movs	r2, #0
 800784a:	9b02      	ldr	r3, [sp, #8]
 800784c:	701a      	strb	r2, [r3, #0]
 800784e:	e7d6      	b.n	80077fe <sniprintf+0x16>
 8007850:	200001a4 	.word	0x200001a4

08007854 <siprintf>:
 8007854:	b40e      	push	{r1, r2, r3}
 8007856:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800785a:	b510      	push	{r4, lr}
 800785c:	2400      	movs	r4, #0
 800785e:	b09d      	sub	sp, #116	@ 0x74
 8007860:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007862:	9002      	str	r0, [sp, #8]
 8007864:	9006      	str	r0, [sp, #24]
 8007866:	9107      	str	r1, [sp, #28]
 8007868:	9104      	str	r1, [sp, #16]
 800786a:	4809      	ldr	r0, [pc, #36]	@ (8007890 <siprintf+0x3c>)
 800786c:	4909      	ldr	r1, [pc, #36]	@ (8007894 <siprintf+0x40>)
 800786e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007872:	9105      	str	r1, [sp, #20]
 8007874:	6800      	ldr	r0, [r0, #0]
 8007876:	a902      	add	r1, sp, #8
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800787c:	f002 f936 	bl	8009aec <_svfiprintf_r>
 8007880:	9b02      	ldr	r3, [sp, #8]
 8007882:	701c      	strb	r4, [r3, #0]
 8007884:	b01d      	add	sp, #116	@ 0x74
 8007886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800788a:	b003      	add	sp, #12
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	200001a4 	.word	0x200001a4
 8007894:	ffff0208 	.word	0xffff0208

08007898 <__sread>:
 8007898:	b510      	push	{r4, lr}
 800789a:	460c      	mov	r4, r1
 800789c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a0:	f000 f8da 	bl	8007a58 <_read_r>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	bfab      	itete	ge
 80078a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078aa:	89a3      	ldrhlt	r3, [r4, #12]
 80078ac:	181b      	addge	r3, r3, r0
 80078ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078b2:	bfac      	ite	ge
 80078b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078b6:	81a3      	strhlt	r3, [r4, #12]
 80078b8:	bd10      	pop	{r4, pc}

080078ba <__swrite>:
 80078ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078be:	461f      	mov	r7, r3
 80078c0:	898b      	ldrh	r3, [r1, #12]
 80078c2:	4605      	mov	r5, r0
 80078c4:	05db      	lsls	r3, r3, #23
 80078c6:	460c      	mov	r4, r1
 80078c8:	4616      	mov	r6, r2
 80078ca:	d505      	bpl.n	80078d8 <__swrite+0x1e>
 80078cc:	2302      	movs	r3, #2
 80078ce:	2200      	movs	r2, #0
 80078d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d4:	f000 f8ae 	bl	8007a34 <_lseek_r>
 80078d8:	89a3      	ldrh	r3, [r4, #12]
 80078da:	4632      	mov	r2, r6
 80078dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078e0:	81a3      	strh	r3, [r4, #12]
 80078e2:	4628      	mov	r0, r5
 80078e4:	463b      	mov	r3, r7
 80078e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ee:	f000 b8c5 	b.w	8007a7c <_write_r>

080078f2 <__sseek>:
 80078f2:	b510      	push	{r4, lr}
 80078f4:	460c      	mov	r4, r1
 80078f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fa:	f000 f89b 	bl	8007a34 <_lseek_r>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	bf15      	itete	ne
 8007904:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007906:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800790a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800790e:	81a3      	strheq	r3, [r4, #12]
 8007910:	bf18      	it	ne
 8007912:	81a3      	strhne	r3, [r4, #12]
 8007914:	bd10      	pop	{r4, pc}

08007916 <__sclose>:
 8007916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791a:	f000 b87b 	b.w	8007a14 <_close_r>

0800791e <memset>:
 800791e:	4603      	mov	r3, r0
 8007920:	4402      	add	r2, r0
 8007922:	4293      	cmp	r3, r2
 8007924:	d100      	bne.n	8007928 <memset+0xa>
 8007926:	4770      	bx	lr
 8007928:	f803 1b01 	strb.w	r1, [r3], #1
 800792c:	e7f9      	b.n	8007922 <memset+0x4>

0800792e <strncmp>:
 800792e:	b510      	push	{r4, lr}
 8007930:	b16a      	cbz	r2, 800794e <strncmp+0x20>
 8007932:	3901      	subs	r1, #1
 8007934:	1884      	adds	r4, r0, r2
 8007936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800793a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800793e:	429a      	cmp	r2, r3
 8007940:	d103      	bne.n	800794a <strncmp+0x1c>
 8007942:	42a0      	cmp	r0, r4
 8007944:	d001      	beq.n	800794a <strncmp+0x1c>
 8007946:	2a00      	cmp	r2, #0
 8007948:	d1f5      	bne.n	8007936 <strncmp+0x8>
 800794a:	1ad0      	subs	r0, r2, r3
 800794c:	bd10      	pop	{r4, pc}
 800794e:	4610      	mov	r0, r2
 8007950:	e7fc      	b.n	800794c <strncmp+0x1e>
	...

08007954 <strtok>:
 8007954:	4b16      	ldr	r3, [pc, #88]	@ (80079b0 <strtok+0x5c>)
 8007956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800795a:	681f      	ldr	r7, [r3, #0]
 800795c:	4605      	mov	r5, r0
 800795e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007960:	460e      	mov	r6, r1
 8007962:	b9ec      	cbnz	r4, 80079a0 <strtok+0x4c>
 8007964:	2050      	movs	r0, #80	@ 0x50
 8007966:	f001 faf1 	bl	8008f4c <malloc>
 800796a:	4602      	mov	r2, r0
 800796c:	6478      	str	r0, [r7, #68]	@ 0x44
 800796e:	b920      	cbnz	r0, 800797a <strtok+0x26>
 8007970:	215b      	movs	r1, #91	@ 0x5b
 8007972:	4b10      	ldr	r3, [pc, #64]	@ (80079b4 <strtok+0x60>)
 8007974:	4810      	ldr	r0, [pc, #64]	@ (80079b8 <strtok+0x64>)
 8007976:	f000 f8eb 	bl	8007b50 <__assert_func>
 800797a:	e9c0 4400 	strd	r4, r4, [r0]
 800797e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007982:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007986:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800798a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800798e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007992:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007996:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800799a:	6184      	str	r4, [r0, #24]
 800799c:	7704      	strb	r4, [r0, #28]
 800799e:	6244      	str	r4, [r0, #36]	@ 0x24
 80079a0:	4631      	mov	r1, r6
 80079a2:	4628      	mov	r0, r5
 80079a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079a6:	2301      	movs	r3, #1
 80079a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	f000 b806 	b.w	80079bc <__strtok_r>
 80079b0:	200001a4 	.word	0x200001a4
 80079b4:	0800a674 	.word	0x0800a674
 80079b8:	0800a68b 	.word	0x0800a68b

080079bc <__strtok_r>:
 80079bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079be:	4604      	mov	r4, r0
 80079c0:	b908      	cbnz	r0, 80079c6 <__strtok_r+0xa>
 80079c2:	6814      	ldr	r4, [r2, #0]
 80079c4:	b144      	cbz	r4, 80079d8 <__strtok_r+0x1c>
 80079c6:	460f      	mov	r7, r1
 80079c8:	4620      	mov	r0, r4
 80079ca:	f814 5b01 	ldrb.w	r5, [r4], #1
 80079ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 80079d2:	b91e      	cbnz	r6, 80079dc <__strtok_r+0x20>
 80079d4:	b965      	cbnz	r5, 80079f0 <__strtok_r+0x34>
 80079d6:	6015      	str	r5, [r2, #0]
 80079d8:	2000      	movs	r0, #0
 80079da:	e005      	b.n	80079e8 <__strtok_r+0x2c>
 80079dc:	42b5      	cmp	r5, r6
 80079de:	d1f6      	bne.n	80079ce <__strtok_r+0x12>
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1f0      	bne.n	80079c6 <__strtok_r+0xa>
 80079e4:	6014      	str	r4, [r2, #0]
 80079e6:	7003      	strb	r3, [r0, #0]
 80079e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ea:	461c      	mov	r4, r3
 80079ec:	e00c      	b.n	8007a08 <__strtok_r+0x4c>
 80079ee:	b91d      	cbnz	r5, 80079f8 <__strtok_r+0x3c>
 80079f0:	460e      	mov	r6, r1
 80079f2:	4627      	mov	r7, r4
 80079f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079f8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80079fc:	42ab      	cmp	r3, r5
 80079fe:	d1f6      	bne.n	80079ee <__strtok_r+0x32>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0f2      	beq.n	80079ea <__strtok_r+0x2e>
 8007a04:	2300      	movs	r3, #0
 8007a06:	703b      	strb	r3, [r7, #0]
 8007a08:	6014      	str	r4, [r2, #0]
 8007a0a:	e7ed      	b.n	80079e8 <__strtok_r+0x2c>

08007a0c <_localeconv_r>:
 8007a0c:	4800      	ldr	r0, [pc, #0]	@ (8007a10 <_localeconv_r+0x4>)
 8007a0e:	4770      	bx	lr
 8007a10:	20000128 	.word	0x20000128

08007a14 <_close_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	2300      	movs	r3, #0
 8007a18:	4d05      	ldr	r5, [pc, #20]	@ (8007a30 <_close_r+0x1c>)
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	4608      	mov	r0, r1
 8007a1e:	602b      	str	r3, [r5, #0]
 8007a20:	f7fa fc27 	bl	8002272 <_close>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d102      	bne.n	8007a2e <_close_r+0x1a>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	b103      	cbz	r3, 8007a2e <_close_r+0x1a>
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	20000780 	.word	0x20000780

08007a34 <_lseek_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	4d05      	ldr	r5, [pc, #20]	@ (8007a54 <_lseek_r+0x20>)
 8007a40:	602a      	str	r2, [r5, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	f7fa fc39 	bl	80022ba <_lseek>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	d102      	bne.n	8007a52 <_lseek_r+0x1e>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	b103      	cbz	r3, 8007a52 <_lseek_r+0x1e>
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	20000780 	.word	0x20000780

08007a58 <_read_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	4611      	mov	r1, r2
 8007a60:	2200      	movs	r2, #0
 8007a62:	4d05      	ldr	r5, [pc, #20]	@ (8007a78 <_read_r+0x20>)
 8007a64:	602a      	str	r2, [r5, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	f7fa fbca 	bl	8002200 <_read>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_read_r+0x1e>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_read_r+0x1e>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	20000780 	.word	0x20000780

08007a7c <_write_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4604      	mov	r4, r0
 8007a80:	4608      	mov	r0, r1
 8007a82:	4611      	mov	r1, r2
 8007a84:	2200      	movs	r2, #0
 8007a86:	4d05      	ldr	r5, [pc, #20]	@ (8007a9c <_write_r+0x20>)
 8007a88:	602a      	str	r2, [r5, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f7fa fbd5 	bl	800223a <_write>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_write_r+0x1e>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_write_r+0x1e>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	20000780 	.word	0x20000780

08007aa0 <__errno>:
 8007aa0:	4b01      	ldr	r3, [pc, #4]	@ (8007aa8 <__errno+0x8>)
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	200001a4 	.word	0x200001a4

08007aac <__libc_init_array>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	2600      	movs	r6, #0
 8007ab0:	4d0c      	ldr	r5, [pc, #48]	@ (8007ae4 <__libc_init_array+0x38>)
 8007ab2:	4c0d      	ldr	r4, [pc, #52]	@ (8007ae8 <__libc_init_array+0x3c>)
 8007ab4:	1b64      	subs	r4, r4, r5
 8007ab6:	10a4      	asrs	r4, r4, #2
 8007ab8:	42a6      	cmp	r6, r4
 8007aba:	d109      	bne.n	8007ad0 <__libc_init_array+0x24>
 8007abc:	f002 fce2 	bl	800a484 <_init>
 8007ac0:	2600      	movs	r6, #0
 8007ac2:	4d0a      	ldr	r5, [pc, #40]	@ (8007aec <__libc_init_array+0x40>)
 8007ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8007af0 <__libc_init_array+0x44>)
 8007ac6:	1b64      	subs	r4, r4, r5
 8007ac8:	10a4      	asrs	r4, r4, #2
 8007aca:	42a6      	cmp	r6, r4
 8007acc:	d105      	bne.n	8007ada <__libc_init_array+0x2e>
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad4:	4798      	blx	r3
 8007ad6:	3601      	adds	r6, #1
 8007ad8:	e7ee      	b.n	8007ab8 <__libc_init_array+0xc>
 8007ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ade:	4798      	blx	r3
 8007ae0:	3601      	adds	r6, #1
 8007ae2:	e7f2      	b.n	8007aca <__libc_init_array+0x1e>
 8007ae4:	0800aacc 	.word	0x0800aacc
 8007ae8:	0800aacc 	.word	0x0800aacc
 8007aec:	0800aacc 	.word	0x0800aacc
 8007af0:	0800aad0 	.word	0x0800aad0

08007af4 <__retarget_lock_init_recursive>:
 8007af4:	4770      	bx	lr

08007af6 <__retarget_lock_acquire_recursive>:
 8007af6:	4770      	bx	lr

08007af8 <__retarget_lock_release_recursive>:
 8007af8:	4770      	bx	lr

08007afa <strcpy>:
 8007afa:	4603      	mov	r3, r0
 8007afc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b00:	f803 2b01 	strb.w	r2, [r3], #1
 8007b04:	2a00      	cmp	r2, #0
 8007b06:	d1f9      	bne.n	8007afc <strcpy+0x2>
 8007b08:	4770      	bx	lr

08007b0a <memchr>:
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	b2c9      	uxtb	r1, r1
 8007b10:	4402      	add	r2, r0
 8007b12:	4293      	cmp	r3, r2
 8007b14:	4618      	mov	r0, r3
 8007b16:	d101      	bne.n	8007b1c <memchr+0x12>
 8007b18:	2000      	movs	r0, #0
 8007b1a:	e003      	b.n	8007b24 <memchr+0x1a>
 8007b1c:	7804      	ldrb	r4, [r0, #0]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	428c      	cmp	r4, r1
 8007b22:	d1f6      	bne.n	8007b12 <memchr+0x8>
 8007b24:	bd10      	pop	{r4, pc}

08007b26 <memcpy>:
 8007b26:	440a      	add	r2, r1
 8007b28:	4291      	cmp	r1, r2
 8007b2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b2e:	d100      	bne.n	8007b32 <memcpy+0xc>
 8007b30:	4770      	bx	lr
 8007b32:	b510      	push	{r4, lr}
 8007b34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b38:	4291      	cmp	r1, r2
 8007b3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b3e:	d1f9      	bne.n	8007b34 <memcpy+0xe>
 8007b40:	bd10      	pop	{r4, pc}
	...

08007b44 <nan>:
 8007b44:	2000      	movs	r0, #0
 8007b46:	4901      	ldr	r1, [pc, #4]	@ (8007b4c <nan+0x8>)
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	7ff80000 	.word	0x7ff80000

08007b50 <__assert_func>:
 8007b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b52:	4614      	mov	r4, r2
 8007b54:	461a      	mov	r2, r3
 8007b56:	4b09      	ldr	r3, [pc, #36]	@ (8007b7c <__assert_func+0x2c>)
 8007b58:	4605      	mov	r5, r0
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68d8      	ldr	r0, [r3, #12]
 8007b5e:	b14c      	cbz	r4, 8007b74 <__assert_func+0x24>
 8007b60:	4b07      	ldr	r3, [pc, #28]	@ (8007b80 <__assert_func+0x30>)
 8007b62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b66:	9100      	str	r1, [sp, #0]
 8007b68:	462b      	mov	r3, r5
 8007b6a:	4906      	ldr	r1, [pc, #24]	@ (8007b84 <__assert_func+0x34>)
 8007b6c:	f002 f962 	bl	8009e34 <fiprintf>
 8007b70:	f002 f99c 	bl	8009eac <abort>
 8007b74:	4b04      	ldr	r3, [pc, #16]	@ (8007b88 <__assert_func+0x38>)
 8007b76:	461c      	mov	r4, r3
 8007b78:	e7f3      	b.n	8007b62 <__assert_func+0x12>
 8007b7a:	bf00      	nop
 8007b7c:	200001a4 	.word	0x200001a4
 8007b80:	0800a6ed 	.word	0x0800a6ed
 8007b84:	0800a6fa 	.word	0x0800a6fa
 8007b88:	0800a728 	.word	0x0800a728

08007b8c <quorem>:
 8007b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b90:	6903      	ldr	r3, [r0, #16]
 8007b92:	690c      	ldr	r4, [r1, #16]
 8007b94:	4607      	mov	r7, r0
 8007b96:	42a3      	cmp	r3, r4
 8007b98:	db7e      	blt.n	8007c98 <quorem+0x10c>
 8007b9a:	3c01      	subs	r4, #1
 8007b9c:	00a3      	lsls	r3, r4, #2
 8007b9e:	f100 0514 	add.w	r5, r0, #20
 8007ba2:	f101 0814 	add.w	r8, r1, #20
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bc2:	d32e      	bcc.n	8007c22 <quorem+0x96>
 8007bc4:	f04f 0a00 	mov.w	sl, #0
 8007bc8:	46c4      	mov	ip, r8
 8007bca:	46ae      	mov	lr, r5
 8007bcc:	46d3      	mov	fp, sl
 8007bce:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bd2:	b298      	uxth	r0, r3
 8007bd4:	fb06 a000 	mla	r0, r6, r0, sl
 8007bd8:	0c1b      	lsrs	r3, r3, #16
 8007bda:	0c02      	lsrs	r2, r0, #16
 8007bdc:	fb06 2303 	mla	r3, r6, r3, r2
 8007be0:	f8de 2000 	ldr.w	r2, [lr]
 8007be4:	b280      	uxth	r0, r0
 8007be6:	b292      	uxth	r2, r2
 8007be8:	1a12      	subs	r2, r2, r0
 8007bea:	445a      	add	r2, fp
 8007bec:	f8de 0000 	ldr.w	r0, [lr]
 8007bf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007bfa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007bfe:	b292      	uxth	r2, r2
 8007c00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c04:	45e1      	cmp	r9, ip
 8007c06:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c0a:	f84e 2b04 	str.w	r2, [lr], #4
 8007c0e:	d2de      	bcs.n	8007bce <quorem+0x42>
 8007c10:	9b00      	ldr	r3, [sp, #0]
 8007c12:	58eb      	ldr	r3, [r5, r3]
 8007c14:	b92b      	cbnz	r3, 8007c22 <quorem+0x96>
 8007c16:	9b01      	ldr	r3, [sp, #4]
 8007c18:	3b04      	subs	r3, #4
 8007c1a:	429d      	cmp	r5, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	d32f      	bcc.n	8007c80 <quorem+0xf4>
 8007c20:	613c      	str	r4, [r7, #16]
 8007c22:	4638      	mov	r0, r7
 8007c24:	f001 fd16 	bl	8009654 <__mcmp>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	db25      	blt.n	8007c78 <quorem+0xec>
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c34:	f8d1 c000 	ldr.w	ip, [r1]
 8007c38:	fa1f fe82 	uxth.w	lr, r2
 8007c3c:	fa1f f38c 	uxth.w	r3, ip
 8007c40:	eba3 030e 	sub.w	r3, r3, lr
 8007c44:	4403      	add	r3, r0
 8007c46:	0c12      	lsrs	r2, r2, #16
 8007c48:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c56:	45c1      	cmp	r9, r8
 8007c58:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c5c:	f841 3b04 	str.w	r3, [r1], #4
 8007c60:	d2e6      	bcs.n	8007c30 <quorem+0xa4>
 8007c62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c6a:	b922      	cbnz	r2, 8007c76 <quorem+0xea>
 8007c6c:	3b04      	subs	r3, #4
 8007c6e:	429d      	cmp	r5, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	d30b      	bcc.n	8007c8c <quorem+0x100>
 8007c74:	613c      	str	r4, [r7, #16]
 8007c76:	3601      	adds	r6, #1
 8007c78:	4630      	mov	r0, r6
 8007c7a:	b003      	add	sp, #12
 8007c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	3b04      	subs	r3, #4
 8007c84:	2a00      	cmp	r2, #0
 8007c86:	d1cb      	bne.n	8007c20 <quorem+0x94>
 8007c88:	3c01      	subs	r4, #1
 8007c8a:	e7c6      	b.n	8007c1a <quorem+0x8e>
 8007c8c:	6812      	ldr	r2, [r2, #0]
 8007c8e:	3b04      	subs	r3, #4
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d1ef      	bne.n	8007c74 <quorem+0xe8>
 8007c94:	3c01      	subs	r4, #1
 8007c96:	e7ea      	b.n	8007c6e <quorem+0xe2>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	e7ee      	b.n	8007c7a <quorem+0xee>
 8007c9c:	0000      	movs	r0, r0
	...

08007ca0 <_dtoa_r>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	4614      	mov	r4, r2
 8007ca6:	461d      	mov	r5, r3
 8007ca8:	69c7      	ldr	r7, [r0, #28]
 8007caa:	b097      	sub	sp, #92	@ 0x5c
 8007cac:	4681      	mov	r9, r0
 8007cae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007cb2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007cb4:	b97f      	cbnz	r7, 8007cd6 <_dtoa_r+0x36>
 8007cb6:	2010      	movs	r0, #16
 8007cb8:	f001 f948 	bl	8008f4c <malloc>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	f8c9 001c 	str.w	r0, [r9, #28]
 8007cc2:	b920      	cbnz	r0, 8007cce <_dtoa_r+0x2e>
 8007cc4:	21ef      	movs	r1, #239	@ 0xef
 8007cc6:	4bac      	ldr	r3, [pc, #688]	@ (8007f78 <_dtoa_r+0x2d8>)
 8007cc8:	48ac      	ldr	r0, [pc, #688]	@ (8007f7c <_dtoa_r+0x2dc>)
 8007cca:	f7ff ff41 	bl	8007b50 <__assert_func>
 8007cce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007cd2:	6007      	str	r7, [r0, #0]
 8007cd4:	60c7      	str	r7, [r0, #12]
 8007cd6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007cda:	6819      	ldr	r1, [r3, #0]
 8007cdc:	b159      	cbz	r1, 8007cf6 <_dtoa_r+0x56>
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	4093      	lsls	r3, r2
 8007ce4:	604a      	str	r2, [r1, #4]
 8007ce6:	608b      	str	r3, [r1, #8]
 8007ce8:	4648      	mov	r0, r9
 8007cea:	f001 fa37 	bl	800915c <_Bfree>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	1e2b      	subs	r3, r5, #0
 8007cf8:	bfaf      	iteee	ge
 8007cfa:	2300      	movge	r3, #0
 8007cfc:	2201      	movlt	r2, #1
 8007cfe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d02:	9307      	strlt	r3, [sp, #28]
 8007d04:	bfa8      	it	ge
 8007d06:	6033      	strge	r3, [r6, #0]
 8007d08:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007d0c:	4b9c      	ldr	r3, [pc, #624]	@ (8007f80 <_dtoa_r+0x2e0>)
 8007d0e:	bfb8      	it	lt
 8007d10:	6032      	strlt	r2, [r6, #0]
 8007d12:	ea33 0308 	bics.w	r3, r3, r8
 8007d16:	d112      	bne.n	8007d3e <_dtoa_r+0x9e>
 8007d18:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d1c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007d24:	4323      	orrs	r3, r4
 8007d26:	f000 855e 	beq.w	80087e6 <_dtoa_r+0xb46>
 8007d2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007f84 <_dtoa_r+0x2e4>
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 8560 	beq.w	80087f6 <_dtoa_r+0xb56>
 8007d36:	f10a 0303 	add.w	r3, sl, #3
 8007d3a:	f000 bd5a 	b.w	80087f2 <_dtoa_r+0xb52>
 8007d3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d42:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007d46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f7f8 fe2b 	bl	80009a8 <__aeabi_dcmpeq>
 8007d52:	4607      	mov	r7, r0
 8007d54:	b158      	cbz	r0, 8007d6e <_dtoa_r+0xce>
 8007d56:	2301      	movs	r3, #1
 8007d58:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d5e:	b113      	cbz	r3, 8007d66 <_dtoa_r+0xc6>
 8007d60:	4b89      	ldr	r3, [pc, #548]	@ (8007f88 <_dtoa_r+0x2e8>)
 8007d62:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007f8c <_dtoa_r+0x2ec>
 8007d6a:	f000 bd44 	b.w	80087f6 <_dtoa_r+0xb56>
 8007d6e:	ab14      	add	r3, sp, #80	@ 0x50
 8007d70:	9301      	str	r3, [sp, #4]
 8007d72:	ab15      	add	r3, sp, #84	@ 0x54
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	4648      	mov	r0, r9
 8007d78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007d7c:	f001 fd82 	bl	8009884 <__d2b>
 8007d80:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007d84:	9003      	str	r0, [sp, #12]
 8007d86:	2e00      	cmp	r6, #0
 8007d88:	d078      	beq.n	8007e7c <_dtoa_r+0x1dc>
 8007d8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d90:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d98:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d9c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007da0:	9712      	str	r7, [sp, #72]	@ 0x48
 8007da2:	4619      	mov	r1, r3
 8007da4:	2200      	movs	r2, #0
 8007da6:	4b7a      	ldr	r3, [pc, #488]	@ (8007f90 <_dtoa_r+0x2f0>)
 8007da8:	f7f8 f9de 	bl	8000168 <__aeabi_dsub>
 8007dac:	a36c      	add	r3, pc, #432	@ (adr r3, 8007f60 <_dtoa_r+0x2c0>)
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f7f8 fb91 	bl	80004d8 <__aeabi_dmul>
 8007db6:	a36c      	add	r3, pc, #432	@ (adr r3, 8007f68 <_dtoa_r+0x2c8>)
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	f7f8 f9d6 	bl	800016c <__adddf3>
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	460d      	mov	r5, r1
 8007dc6:	f7f8 fb1d 	bl	8000404 <__aeabi_i2d>
 8007dca:	a369      	add	r3, pc, #420	@ (adr r3, 8007f70 <_dtoa_r+0x2d0>)
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	f7f8 fb82 	bl	80004d8 <__aeabi_dmul>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4620      	mov	r0, r4
 8007dda:	4629      	mov	r1, r5
 8007ddc:	f7f8 f9c6 	bl	800016c <__adddf3>
 8007de0:	4604      	mov	r4, r0
 8007de2:	460d      	mov	r5, r1
 8007de4:	f7f8 fe28 	bl	8000a38 <__aeabi_d2iz>
 8007de8:	2200      	movs	r2, #0
 8007dea:	4607      	mov	r7, r0
 8007dec:	2300      	movs	r3, #0
 8007dee:	4620      	mov	r0, r4
 8007df0:	4629      	mov	r1, r5
 8007df2:	f7f8 fde3 	bl	80009bc <__aeabi_dcmplt>
 8007df6:	b140      	cbz	r0, 8007e0a <_dtoa_r+0x16a>
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f7f8 fb03 	bl	8000404 <__aeabi_i2d>
 8007dfe:	4622      	mov	r2, r4
 8007e00:	462b      	mov	r3, r5
 8007e02:	f7f8 fdd1 	bl	80009a8 <__aeabi_dcmpeq>
 8007e06:	b900      	cbnz	r0, 8007e0a <_dtoa_r+0x16a>
 8007e08:	3f01      	subs	r7, #1
 8007e0a:	2f16      	cmp	r7, #22
 8007e0c:	d854      	bhi.n	8007eb8 <_dtoa_r+0x218>
 8007e0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e12:	4b60      	ldr	r3, [pc, #384]	@ (8007f94 <_dtoa_r+0x2f4>)
 8007e14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	f7f8 fdce 	bl	80009bc <__aeabi_dcmplt>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	d04b      	beq.n	8007ebc <_dtoa_r+0x21c>
 8007e24:	2300      	movs	r3, #0
 8007e26:	3f01      	subs	r7, #1
 8007e28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e2c:	1b9b      	subs	r3, r3, r6
 8007e2e:	1e5a      	subs	r2, r3, #1
 8007e30:	bf49      	itett	mi
 8007e32:	f1c3 0301 	rsbmi	r3, r3, #1
 8007e36:	2300      	movpl	r3, #0
 8007e38:	9304      	strmi	r3, [sp, #16]
 8007e3a:	2300      	movmi	r3, #0
 8007e3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e3e:	bf54      	ite	pl
 8007e40:	9304      	strpl	r3, [sp, #16]
 8007e42:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007e44:	2f00      	cmp	r7, #0
 8007e46:	db3b      	blt.n	8007ec0 <_dtoa_r+0x220>
 8007e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e4a:	970e      	str	r7, [sp, #56]	@ 0x38
 8007e4c:	443b      	add	r3, r7
 8007e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e50:	2300      	movs	r3, #0
 8007e52:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e56:	2b09      	cmp	r3, #9
 8007e58:	d865      	bhi.n	8007f26 <_dtoa_r+0x286>
 8007e5a:	2b05      	cmp	r3, #5
 8007e5c:	bfc4      	itt	gt
 8007e5e:	3b04      	subgt	r3, #4
 8007e60:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007e62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e64:	bfc8      	it	gt
 8007e66:	2400      	movgt	r4, #0
 8007e68:	f1a3 0302 	sub.w	r3, r3, #2
 8007e6c:	bfd8      	it	le
 8007e6e:	2401      	movle	r4, #1
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d864      	bhi.n	8007f3e <_dtoa_r+0x29e>
 8007e74:	e8df f003 	tbb	[pc, r3]
 8007e78:	2c385553 	.word	0x2c385553
 8007e7c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007e80:	441e      	add	r6, r3
 8007e82:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e86:	2b20      	cmp	r3, #32
 8007e88:	bfc1      	itttt	gt
 8007e8a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e8e:	fa08 f803 	lslgt.w	r8, r8, r3
 8007e92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e9a:	bfd6      	itet	le
 8007e9c:	f1c3 0320 	rsble	r3, r3, #32
 8007ea0:	ea48 0003 	orrgt.w	r0, r8, r3
 8007ea4:	fa04 f003 	lslle.w	r0, r4, r3
 8007ea8:	f7f8 fa9c 	bl	80003e4 <__aeabi_ui2d>
 8007eac:	2201      	movs	r2, #1
 8007eae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007eb2:	3e01      	subs	r6, #1
 8007eb4:	9212      	str	r2, [sp, #72]	@ 0x48
 8007eb6:	e774      	b.n	8007da2 <_dtoa_r+0x102>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e7b5      	b.n	8007e28 <_dtoa_r+0x188>
 8007ebc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007ebe:	e7b4      	b.n	8007e2a <_dtoa_r+0x18a>
 8007ec0:	9b04      	ldr	r3, [sp, #16]
 8007ec2:	1bdb      	subs	r3, r3, r7
 8007ec4:	9304      	str	r3, [sp, #16]
 8007ec6:	427b      	negs	r3, r7
 8007ec8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eca:	2300      	movs	r3, #0
 8007ecc:	930e      	str	r3, [sp, #56]	@ 0x38
 8007ece:	e7c1      	b.n	8007e54 <_dtoa_r+0x1b4>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ed4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ed6:	eb07 0b03 	add.w	fp, r7, r3
 8007eda:	f10b 0301 	add.w	r3, fp, #1
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	9308      	str	r3, [sp, #32]
 8007ee2:	bfb8      	it	lt
 8007ee4:	2301      	movlt	r3, #1
 8007ee6:	e006      	b.n	8007ef6 <_dtoa_r+0x256>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dd28      	ble.n	8007f44 <_dtoa_r+0x2a4>
 8007ef2:	469b      	mov	fp, r3
 8007ef4:	9308      	str	r3, [sp, #32]
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	2204      	movs	r2, #4
 8007efa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007efe:	f102 0514 	add.w	r5, r2, #20
 8007f02:	429d      	cmp	r5, r3
 8007f04:	d926      	bls.n	8007f54 <_dtoa_r+0x2b4>
 8007f06:	6041      	str	r1, [r0, #4]
 8007f08:	4648      	mov	r0, r9
 8007f0a:	f001 f8e7 	bl	80090dc <_Balloc>
 8007f0e:	4682      	mov	sl, r0
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d143      	bne.n	8007f9c <_dtoa_r+0x2fc>
 8007f14:	4602      	mov	r2, r0
 8007f16:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8007f98 <_dtoa_r+0x2f8>)
 8007f1c:	e6d4      	b.n	8007cc8 <_dtoa_r+0x28>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e7e3      	b.n	8007eea <_dtoa_r+0x24a>
 8007f22:	2300      	movs	r3, #0
 8007f24:	e7d5      	b.n	8007ed2 <_dtoa_r+0x232>
 8007f26:	2401      	movs	r4, #1
 8007f28:	2300      	movs	r3, #0
 8007f2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f2c:	9320      	str	r3, [sp, #128]	@ 0x80
 8007f2e:	f04f 3bff 	mov.w	fp, #4294967295
 8007f32:	2200      	movs	r2, #0
 8007f34:	2312      	movs	r3, #18
 8007f36:	f8cd b020 	str.w	fp, [sp, #32]
 8007f3a:	9221      	str	r2, [sp, #132]	@ 0x84
 8007f3c:	e7db      	b.n	8007ef6 <_dtoa_r+0x256>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f42:	e7f4      	b.n	8007f2e <_dtoa_r+0x28e>
 8007f44:	f04f 0b01 	mov.w	fp, #1
 8007f48:	465b      	mov	r3, fp
 8007f4a:	f8cd b020 	str.w	fp, [sp, #32]
 8007f4e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8007f52:	e7d0      	b.n	8007ef6 <_dtoa_r+0x256>
 8007f54:	3101      	adds	r1, #1
 8007f56:	0052      	lsls	r2, r2, #1
 8007f58:	e7d1      	b.n	8007efe <_dtoa_r+0x25e>
 8007f5a:	bf00      	nop
 8007f5c:	f3af 8000 	nop.w
 8007f60:	636f4361 	.word	0x636f4361
 8007f64:	3fd287a7 	.word	0x3fd287a7
 8007f68:	8b60c8b3 	.word	0x8b60c8b3
 8007f6c:	3fc68a28 	.word	0x3fc68a28
 8007f70:	509f79fb 	.word	0x509f79fb
 8007f74:	3fd34413 	.word	0x3fd34413
 8007f78:	0800a674 	.word	0x0800a674
 8007f7c:	0800a736 	.word	0x0800a736
 8007f80:	7ff00000 	.word	0x7ff00000
 8007f84:	0800a732 	.word	0x0800a732
 8007f88:	0800a651 	.word	0x0800a651
 8007f8c:	0800a650 	.word	0x0800a650
 8007f90:	3ff80000 	.word	0x3ff80000
 8007f94:	0800a8f8 	.word	0x0800a8f8
 8007f98:	0800a78e 	.word	0x0800a78e
 8007f9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007fa0:	6018      	str	r0, [r3, #0]
 8007fa2:	9b08      	ldr	r3, [sp, #32]
 8007fa4:	2b0e      	cmp	r3, #14
 8007fa6:	f200 80a1 	bhi.w	80080ec <_dtoa_r+0x44c>
 8007faa:	2c00      	cmp	r4, #0
 8007fac:	f000 809e 	beq.w	80080ec <_dtoa_r+0x44c>
 8007fb0:	2f00      	cmp	r7, #0
 8007fb2:	dd33      	ble.n	800801c <_dtoa_r+0x37c>
 8007fb4:	4b9c      	ldr	r3, [pc, #624]	@ (8008228 <_dtoa_r+0x588>)
 8007fb6:	f007 020f 	and.w	r2, r7, #15
 8007fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fbe:	05f8      	lsls	r0, r7, #23
 8007fc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fc4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007fc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007fcc:	d516      	bpl.n	8007ffc <_dtoa_r+0x35c>
 8007fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fd2:	4b96      	ldr	r3, [pc, #600]	@ (800822c <_dtoa_r+0x58c>)
 8007fd4:	2603      	movs	r6, #3
 8007fd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fda:	f7f8 fba7 	bl	800072c <__aeabi_ddiv>
 8007fde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007fe2:	f004 040f 	and.w	r4, r4, #15
 8007fe6:	4d91      	ldr	r5, [pc, #580]	@ (800822c <_dtoa_r+0x58c>)
 8007fe8:	b954      	cbnz	r4, 8008000 <_dtoa_r+0x360>
 8007fea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ff2:	f7f8 fb9b 	bl	800072c <__aeabi_ddiv>
 8007ff6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ffa:	e028      	b.n	800804e <_dtoa_r+0x3ae>
 8007ffc:	2602      	movs	r6, #2
 8007ffe:	e7f2      	b.n	8007fe6 <_dtoa_r+0x346>
 8008000:	07e1      	lsls	r1, r4, #31
 8008002:	d508      	bpl.n	8008016 <_dtoa_r+0x376>
 8008004:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008008:	e9d5 2300 	ldrd	r2, r3, [r5]
 800800c:	f7f8 fa64 	bl	80004d8 <__aeabi_dmul>
 8008010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008014:	3601      	adds	r6, #1
 8008016:	1064      	asrs	r4, r4, #1
 8008018:	3508      	adds	r5, #8
 800801a:	e7e5      	b.n	8007fe8 <_dtoa_r+0x348>
 800801c:	f000 80af 	beq.w	800817e <_dtoa_r+0x4de>
 8008020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008024:	427c      	negs	r4, r7
 8008026:	4b80      	ldr	r3, [pc, #512]	@ (8008228 <_dtoa_r+0x588>)
 8008028:	f004 020f 	and.w	r2, r4, #15
 800802c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f7f8 fa50 	bl	80004d8 <__aeabi_dmul>
 8008038:	2602      	movs	r6, #2
 800803a:	2300      	movs	r3, #0
 800803c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008040:	4d7a      	ldr	r5, [pc, #488]	@ (800822c <_dtoa_r+0x58c>)
 8008042:	1124      	asrs	r4, r4, #4
 8008044:	2c00      	cmp	r4, #0
 8008046:	f040 808f 	bne.w	8008168 <_dtoa_r+0x4c8>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1d3      	bne.n	8007ff6 <_dtoa_r+0x356>
 800804e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008052:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8094 	beq.w	8008182 <_dtoa_r+0x4e2>
 800805a:	2200      	movs	r2, #0
 800805c:	4620      	mov	r0, r4
 800805e:	4629      	mov	r1, r5
 8008060:	4b73      	ldr	r3, [pc, #460]	@ (8008230 <_dtoa_r+0x590>)
 8008062:	f7f8 fcab 	bl	80009bc <__aeabi_dcmplt>
 8008066:	2800      	cmp	r0, #0
 8008068:	f000 808b 	beq.w	8008182 <_dtoa_r+0x4e2>
 800806c:	9b08      	ldr	r3, [sp, #32]
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 8087 	beq.w	8008182 <_dtoa_r+0x4e2>
 8008074:	f1bb 0f00 	cmp.w	fp, #0
 8008078:	dd34      	ble.n	80080e4 <_dtoa_r+0x444>
 800807a:	4620      	mov	r0, r4
 800807c:	2200      	movs	r2, #0
 800807e:	4629      	mov	r1, r5
 8008080:	4b6c      	ldr	r3, [pc, #432]	@ (8008234 <_dtoa_r+0x594>)
 8008082:	f7f8 fa29 	bl	80004d8 <__aeabi_dmul>
 8008086:	465c      	mov	r4, fp
 8008088:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800808c:	f107 38ff 	add.w	r8, r7, #4294967295
 8008090:	3601      	adds	r6, #1
 8008092:	4630      	mov	r0, r6
 8008094:	f7f8 f9b6 	bl	8000404 <__aeabi_i2d>
 8008098:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800809c:	f7f8 fa1c 	bl	80004d8 <__aeabi_dmul>
 80080a0:	2200      	movs	r2, #0
 80080a2:	4b65      	ldr	r3, [pc, #404]	@ (8008238 <_dtoa_r+0x598>)
 80080a4:	f7f8 f862 	bl	800016c <__adddf3>
 80080a8:	4605      	mov	r5, r0
 80080aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80080ae:	2c00      	cmp	r4, #0
 80080b0:	d16a      	bne.n	8008188 <_dtoa_r+0x4e8>
 80080b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080b6:	2200      	movs	r2, #0
 80080b8:	4b60      	ldr	r3, [pc, #384]	@ (800823c <_dtoa_r+0x59c>)
 80080ba:	f7f8 f855 	bl	8000168 <__aeabi_dsub>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80080c6:	462a      	mov	r2, r5
 80080c8:	4633      	mov	r3, r6
 80080ca:	f7f8 fc95 	bl	80009f8 <__aeabi_dcmpgt>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f040 8298 	bne.w	8008604 <_dtoa_r+0x964>
 80080d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080d8:	462a      	mov	r2, r5
 80080da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080de:	f7f8 fc6d 	bl	80009bc <__aeabi_dcmplt>
 80080e2:	bb38      	cbnz	r0, 8008134 <_dtoa_r+0x494>
 80080e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80080e8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80080ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f2c0 8157 	blt.w	80083a2 <_dtoa_r+0x702>
 80080f4:	2f0e      	cmp	r7, #14
 80080f6:	f300 8154 	bgt.w	80083a2 <_dtoa_r+0x702>
 80080fa:	4b4b      	ldr	r3, [pc, #300]	@ (8008228 <_dtoa_r+0x588>)
 80080fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008100:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008104:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008108:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800810a:	2b00      	cmp	r3, #0
 800810c:	f280 80e5 	bge.w	80082da <_dtoa_r+0x63a>
 8008110:	9b08      	ldr	r3, [sp, #32]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f300 80e1 	bgt.w	80082da <_dtoa_r+0x63a>
 8008118:	d10c      	bne.n	8008134 <_dtoa_r+0x494>
 800811a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800811e:	2200      	movs	r2, #0
 8008120:	4b46      	ldr	r3, [pc, #280]	@ (800823c <_dtoa_r+0x59c>)
 8008122:	f7f8 f9d9 	bl	80004d8 <__aeabi_dmul>
 8008126:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800812a:	f7f8 fc5b 	bl	80009e4 <__aeabi_dcmpge>
 800812e:	2800      	cmp	r0, #0
 8008130:	f000 8266 	beq.w	8008600 <_dtoa_r+0x960>
 8008134:	2400      	movs	r4, #0
 8008136:	4625      	mov	r5, r4
 8008138:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800813a:	4656      	mov	r6, sl
 800813c:	ea6f 0803 	mvn.w	r8, r3
 8008140:	2700      	movs	r7, #0
 8008142:	4621      	mov	r1, r4
 8008144:	4648      	mov	r0, r9
 8008146:	f001 f809 	bl	800915c <_Bfree>
 800814a:	2d00      	cmp	r5, #0
 800814c:	f000 80bd 	beq.w	80082ca <_dtoa_r+0x62a>
 8008150:	b12f      	cbz	r7, 800815e <_dtoa_r+0x4be>
 8008152:	42af      	cmp	r7, r5
 8008154:	d003      	beq.n	800815e <_dtoa_r+0x4be>
 8008156:	4639      	mov	r1, r7
 8008158:	4648      	mov	r0, r9
 800815a:	f000 ffff 	bl	800915c <_Bfree>
 800815e:	4629      	mov	r1, r5
 8008160:	4648      	mov	r0, r9
 8008162:	f000 fffb 	bl	800915c <_Bfree>
 8008166:	e0b0      	b.n	80082ca <_dtoa_r+0x62a>
 8008168:	07e2      	lsls	r2, r4, #31
 800816a:	d505      	bpl.n	8008178 <_dtoa_r+0x4d8>
 800816c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008170:	f7f8 f9b2 	bl	80004d8 <__aeabi_dmul>
 8008174:	2301      	movs	r3, #1
 8008176:	3601      	adds	r6, #1
 8008178:	1064      	asrs	r4, r4, #1
 800817a:	3508      	adds	r5, #8
 800817c:	e762      	b.n	8008044 <_dtoa_r+0x3a4>
 800817e:	2602      	movs	r6, #2
 8008180:	e765      	b.n	800804e <_dtoa_r+0x3ae>
 8008182:	46b8      	mov	r8, r7
 8008184:	9c08      	ldr	r4, [sp, #32]
 8008186:	e784      	b.n	8008092 <_dtoa_r+0x3f2>
 8008188:	4b27      	ldr	r3, [pc, #156]	@ (8008228 <_dtoa_r+0x588>)
 800818a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800818c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008190:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008194:	4454      	add	r4, sl
 8008196:	2900      	cmp	r1, #0
 8008198:	d054      	beq.n	8008244 <_dtoa_r+0x5a4>
 800819a:	2000      	movs	r0, #0
 800819c:	4928      	ldr	r1, [pc, #160]	@ (8008240 <_dtoa_r+0x5a0>)
 800819e:	f7f8 fac5 	bl	800072c <__aeabi_ddiv>
 80081a2:	4633      	mov	r3, r6
 80081a4:	462a      	mov	r2, r5
 80081a6:	f7f7 ffdf 	bl	8000168 <__aeabi_dsub>
 80081aa:	4656      	mov	r6, sl
 80081ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081b4:	f7f8 fc40 	bl	8000a38 <__aeabi_d2iz>
 80081b8:	4605      	mov	r5, r0
 80081ba:	f7f8 f923 	bl	8000404 <__aeabi_i2d>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081c6:	f7f7 ffcf 	bl	8000168 <__aeabi_dsub>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	3530      	adds	r5, #48	@ 0x30
 80081d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081d8:	f806 5b01 	strb.w	r5, [r6], #1
 80081dc:	f7f8 fbee 	bl	80009bc <__aeabi_dcmplt>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d172      	bne.n	80082ca <_dtoa_r+0x62a>
 80081e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081e8:	2000      	movs	r0, #0
 80081ea:	4911      	ldr	r1, [pc, #68]	@ (8008230 <_dtoa_r+0x590>)
 80081ec:	f7f7 ffbc 	bl	8000168 <__aeabi_dsub>
 80081f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081f4:	f7f8 fbe2 	bl	80009bc <__aeabi_dcmplt>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	f040 80b4 	bne.w	8008366 <_dtoa_r+0x6c6>
 80081fe:	42a6      	cmp	r6, r4
 8008200:	f43f af70 	beq.w	80080e4 <_dtoa_r+0x444>
 8008204:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008208:	2200      	movs	r2, #0
 800820a:	4b0a      	ldr	r3, [pc, #40]	@ (8008234 <_dtoa_r+0x594>)
 800820c:	f7f8 f964 	bl	80004d8 <__aeabi_dmul>
 8008210:	2200      	movs	r2, #0
 8008212:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008216:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800821a:	4b06      	ldr	r3, [pc, #24]	@ (8008234 <_dtoa_r+0x594>)
 800821c:	f7f8 f95c 	bl	80004d8 <__aeabi_dmul>
 8008220:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008224:	e7c4      	b.n	80081b0 <_dtoa_r+0x510>
 8008226:	bf00      	nop
 8008228:	0800a8f8 	.word	0x0800a8f8
 800822c:	0800a8d0 	.word	0x0800a8d0
 8008230:	3ff00000 	.word	0x3ff00000
 8008234:	40240000 	.word	0x40240000
 8008238:	401c0000 	.word	0x401c0000
 800823c:	40140000 	.word	0x40140000
 8008240:	3fe00000 	.word	0x3fe00000
 8008244:	4631      	mov	r1, r6
 8008246:	4628      	mov	r0, r5
 8008248:	f7f8 f946 	bl	80004d8 <__aeabi_dmul>
 800824c:	4656      	mov	r6, sl
 800824e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008252:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008258:	f7f8 fbee 	bl	8000a38 <__aeabi_d2iz>
 800825c:	4605      	mov	r5, r0
 800825e:	f7f8 f8d1 	bl	8000404 <__aeabi_i2d>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800826a:	f7f7 ff7d 	bl	8000168 <__aeabi_dsub>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	3530      	adds	r5, #48	@ 0x30
 8008274:	f806 5b01 	strb.w	r5, [r6], #1
 8008278:	42a6      	cmp	r6, r4
 800827a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800827e:	f04f 0200 	mov.w	r2, #0
 8008282:	d124      	bne.n	80082ce <_dtoa_r+0x62e>
 8008284:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008288:	4bae      	ldr	r3, [pc, #696]	@ (8008544 <_dtoa_r+0x8a4>)
 800828a:	f7f7 ff6f 	bl	800016c <__adddf3>
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008296:	f7f8 fbaf 	bl	80009f8 <__aeabi_dcmpgt>
 800829a:	2800      	cmp	r0, #0
 800829c:	d163      	bne.n	8008366 <_dtoa_r+0x6c6>
 800829e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082a2:	2000      	movs	r0, #0
 80082a4:	49a7      	ldr	r1, [pc, #668]	@ (8008544 <_dtoa_r+0x8a4>)
 80082a6:	f7f7 ff5f 	bl	8000168 <__aeabi_dsub>
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082b2:	f7f8 fb83 	bl	80009bc <__aeabi_dcmplt>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	f43f af14 	beq.w	80080e4 <_dtoa_r+0x444>
 80082bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80082be:	1e73      	subs	r3, r6, #1
 80082c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082c6:	2b30      	cmp	r3, #48	@ 0x30
 80082c8:	d0f8      	beq.n	80082bc <_dtoa_r+0x61c>
 80082ca:	4647      	mov	r7, r8
 80082cc:	e03b      	b.n	8008346 <_dtoa_r+0x6a6>
 80082ce:	4b9e      	ldr	r3, [pc, #632]	@ (8008548 <_dtoa_r+0x8a8>)
 80082d0:	f7f8 f902 	bl	80004d8 <__aeabi_dmul>
 80082d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082d8:	e7bc      	b.n	8008254 <_dtoa_r+0x5b4>
 80082da:	4656      	mov	r6, sl
 80082dc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80082e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082e4:	4620      	mov	r0, r4
 80082e6:	4629      	mov	r1, r5
 80082e8:	f7f8 fa20 	bl	800072c <__aeabi_ddiv>
 80082ec:	f7f8 fba4 	bl	8000a38 <__aeabi_d2iz>
 80082f0:	4680      	mov	r8, r0
 80082f2:	f7f8 f887 	bl	8000404 <__aeabi_i2d>
 80082f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082fa:	f7f8 f8ed 	bl	80004d8 <__aeabi_dmul>
 80082fe:	4602      	mov	r2, r0
 8008300:	460b      	mov	r3, r1
 8008302:	4620      	mov	r0, r4
 8008304:	4629      	mov	r1, r5
 8008306:	f7f7 ff2f 	bl	8000168 <__aeabi_dsub>
 800830a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800830e:	9d08      	ldr	r5, [sp, #32]
 8008310:	f806 4b01 	strb.w	r4, [r6], #1
 8008314:	eba6 040a 	sub.w	r4, r6, sl
 8008318:	42a5      	cmp	r5, r4
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	d133      	bne.n	8008388 <_dtoa_r+0x6e8>
 8008320:	f7f7 ff24 	bl	800016c <__adddf3>
 8008324:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008328:	4604      	mov	r4, r0
 800832a:	460d      	mov	r5, r1
 800832c:	f7f8 fb64 	bl	80009f8 <__aeabi_dcmpgt>
 8008330:	b9c0      	cbnz	r0, 8008364 <_dtoa_r+0x6c4>
 8008332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	f7f8 fb35 	bl	80009a8 <__aeabi_dcmpeq>
 800833e:	b110      	cbz	r0, 8008346 <_dtoa_r+0x6a6>
 8008340:	f018 0f01 	tst.w	r8, #1
 8008344:	d10e      	bne.n	8008364 <_dtoa_r+0x6c4>
 8008346:	4648      	mov	r0, r9
 8008348:	9903      	ldr	r1, [sp, #12]
 800834a:	f000 ff07 	bl	800915c <_Bfree>
 800834e:	2300      	movs	r3, #0
 8008350:	7033      	strb	r3, [r6, #0]
 8008352:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008354:	3701      	adds	r7, #1
 8008356:	601f      	str	r7, [r3, #0]
 8008358:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 824b 	beq.w	80087f6 <_dtoa_r+0xb56>
 8008360:	601e      	str	r6, [r3, #0]
 8008362:	e248      	b.n	80087f6 <_dtoa_r+0xb56>
 8008364:	46b8      	mov	r8, r7
 8008366:	4633      	mov	r3, r6
 8008368:	461e      	mov	r6, r3
 800836a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800836e:	2a39      	cmp	r2, #57	@ 0x39
 8008370:	d106      	bne.n	8008380 <_dtoa_r+0x6e0>
 8008372:	459a      	cmp	sl, r3
 8008374:	d1f8      	bne.n	8008368 <_dtoa_r+0x6c8>
 8008376:	2230      	movs	r2, #48	@ 0x30
 8008378:	f108 0801 	add.w	r8, r8, #1
 800837c:	f88a 2000 	strb.w	r2, [sl]
 8008380:	781a      	ldrb	r2, [r3, #0]
 8008382:	3201      	adds	r2, #1
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	e7a0      	b.n	80082ca <_dtoa_r+0x62a>
 8008388:	2200      	movs	r2, #0
 800838a:	4b6f      	ldr	r3, [pc, #444]	@ (8008548 <_dtoa_r+0x8a8>)
 800838c:	f7f8 f8a4 	bl	80004d8 <__aeabi_dmul>
 8008390:	2200      	movs	r2, #0
 8008392:	2300      	movs	r3, #0
 8008394:	4604      	mov	r4, r0
 8008396:	460d      	mov	r5, r1
 8008398:	f7f8 fb06 	bl	80009a8 <__aeabi_dcmpeq>
 800839c:	2800      	cmp	r0, #0
 800839e:	d09f      	beq.n	80082e0 <_dtoa_r+0x640>
 80083a0:	e7d1      	b.n	8008346 <_dtoa_r+0x6a6>
 80083a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083a4:	2a00      	cmp	r2, #0
 80083a6:	f000 80ea 	beq.w	800857e <_dtoa_r+0x8de>
 80083aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80083ac:	2a01      	cmp	r2, #1
 80083ae:	f300 80cd 	bgt.w	800854c <_dtoa_r+0x8ac>
 80083b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80083b4:	2a00      	cmp	r2, #0
 80083b6:	f000 80c1 	beq.w	800853c <_dtoa_r+0x89c>
 80083ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80083be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083c0:	9e04      	ldr	r6, [sp, #16]
 80083c2:	9a04      	ldr	r2, [sp, #16]
 80083c4:	2101      	movs	r1, #1
 80083c6:	441a      	add	r2, r3
 80083c8:	9204      	str	r2, [sp, #16]
 80083ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083cc:	4648      	mov	r0, r9
 80083ce:	441a      	add	r2, r3
 80083d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80083d2:	f000 ffc1 	bl	8009358 <__i2b>
 80083d6:	4605      	mov	r5, r0
 80083d8:	b166      	cbz	r6, 80083f4 <_dtoa_r+0x754>
 80083da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dd09      	ble.n	80083f4 <_dtoa_r+0x754>
 80083e0:	42b3      	cmp	r3, r6
 80083e2:	bfa8      	it	ge
 80083e4:	4633      	movge	r3, r6
 80083e6:	9a04      	ldr	r2, [sp, #16]
 80083e8:	1af6      	subs	r6, r6, r3
 80083ea:	1ad2      	subs	r2, r2, r3
 80083ec:	9204      	str	r2, [sp, #16]
 80083ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80083f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083f6:	b30b      	cbz	r3, 800843c <_dtoa_r+0x79c>
 80083f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 80c6 	beq.w	800858c <_dtoa_r+0x8ec>
 8008400:	2c00      	cmp	r4, #0
 8008402:	f000 80c0 	beq.w	8008586 <_dtoa_r+0x8e6>
 8008406:	4629      	mov	r1, r5
 8008408:	4622      	mov	r2, r4
 800840a:	4648      	mov	r0, r9
 800840c:	f001 f85c 	bl	80094c8 <__pow5mult>
 8008410:	9a03      	ldr	r2, [sp, #12]
 8008412:	4601      	mov	r1, r0
 8008414:	4605      	mov	r5, r0
 8008416:	4648      	mov	r0, r9
 8008418:	f000 ffb4 	bl	8009384 <__multiply>
 800841c:	9903      	ldr	r1, [sp, #12]
 800841e:	4680      	mov	r8, r0
 8008420:	4648      	mov	r0, r9
 8008422:	f000 fe9b 	bl	800915c <_Bfree>
 8008426:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008428:	1b1b      	subs	r3, r3, r4
 800842a:	930a      	str	r3, [sp, #40]	@ 0x28
 800842c:	f000 80b1 	beq.w	8008592 <_dtoa_r+0x8f2>
 8008430:	4641      	mov	r1, r8
 8008432:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008434:	4648      	mov	r0, r9
 8008436:	f001 f847 	bl	80094c8 <__pow5mult>
 800843a:	9003      	str	r0, [sp, #12]
 800843c:	2101      	movs	r1, #1
 800843e:	4648      	mov	r0, r9
 8008440:	f000 ff8a 	bl	8009358 <__i2b>
 8008444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008446:	4604      	mov	r4, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 81d8 	beq.w	80087fe <_dtoa_r+0xb5e>
 800844e:	461a      	mov	r2, r3
 8008450:	4601      	mov	r1, r0
 8008452:	4648      	mov	r0, r9
 8008454:	f001 f838 	bl	80094c8 <__pow5mult>
 8008458:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800845a:	4604      	mov	r4, r0
 800845c:	2b01      	cmp	r3, #1
 800845e:	f300 809f 	bgt.w	80085a0 <_dtoa_r+0x900>
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	f040 8097 	bne.w	8008598 <_dtoa_r+0x8f8>
 800846a:	9b07      	ldr	r3, [sp, #28]
 800846c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008470:	2b00      	cmp	r3, #0
 8008472:	f040 8093 	bne.w	800859c <_dtoa_r+0x8fc>
 8008476:	9b07      	ldr	r3, [sp, #28]
 8008478:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800847c:	0d1b      	lsrs	r3, r3, #20
 800847e:	051b      	lsls	r3, r3, #20
 8008480:	b133      	cbz	r3, 8008490 <_dtoa_r+0x7f0>
 8008482:	9b04      	ldr	r3, [sp, #16]
 8008484:	3301      	adds	r3, #1
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800848a:	3301      	adds	r3, #1
 800848c:	9309      	str	r3, [sp, #36]	@ 0x24
 800848e:	2301      	movs	r3, #1
 8008490:	930a      	str	r3, [sp, #40]	@ 0x28
 8008492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 81b8 	beq.w	800880a <_dtoa_r+0xb6a>
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084a0:	6918      	ldr	r0, [r3, #16]
 80084a2:	f000 ff0d 	bl	80092c0 <__hi0bits>
 80084a6:	f1c0 0020 	rsb	r0, r0, #32
 80084aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ac:	4418      	add	r0, r3
 80084ae:	f010 001f 	ands.w	r0, r0, #31
 80084b2:	f000 8082 	beq.w	80085ba <_dtoa_r+0x91a>
 80084b6:	f1c0 0320 	rsb	r3, r0, #32
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	dd73      	ble.n	80085a6 <_dtoa_r+0x906>
 80084be:	9b04      	ldr	r3, [sp, #16]
 80084c0:	f1c0 001c 	rsb	r0, r0, #28
 80084c4:	4403      	add	r3, r0
 80084c6:	9304      	str	r3, [sp, #16]
 80084c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ca:	4406      	add	r6, r0
 80084cc:	4403      	add	r3, r0
 80084ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80084d0:	9b04      	ldr	r3, [sp, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	dd05      	ble.n	80084e2 <_dtoa_r+0x842>
 80084d6:	461a      	mov	r2, r3
 80084d8:	4648      	mov	r0, r9
 80084da:	9903      	ldr	r1, [sp, #12]
 80084dc:	f001 f84e 	bl	800957c <__lshift>
 80084e0:	9003      	str	r0, [sp, #12]
 80084e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	dd05      	ble.n	80084f4 <_dtoa_r+0x854>
 80084e8:	4621      	mov	r1, r4
 80084ea:	461a      	mov	r2, r3
 80084ec:	4648      	mov	r0, r9
 80084ee:	f001 f845 	bl	800957c <__lshift>
 80084f2:	4604      	mov	r4, r0
 80084f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d061      	beq.n	80085be <_dtoa_r+0x91e>
 80084fa:	4621      	mov	r1, r4
 80084fc:	9803      	ldr	r0, [sp, #12]
 80084fe:	f001 f8a9 	bl	8009654 <__mcmp>
 8008502:	2800      	cmp	r0, #0
 8008504:	da5b      	bge.n	80085be <_dtoa_r+0x91e>
 8008506:	2300      	movs	r3, #0
 8008508:	220a      	movs	r2, #10
 800850a:	4648      	mov	r0, r9
 800850c:	9903      	ldr	r1, [sp, #12]
 800850e:	f000 fe47 	bl	80091a0 <__multadd>
 8008512:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008514:	f107 38ff 	add.w	r8, r7, #4294967295
 8008518:	9003      	str	r0, [sp, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 8177 	beq.w	800880e <_dtoa_r+0xb6e>
 8008520:	4629      	mov	r1, r5
 8008522:	2300      	movs	r3, #0
 8008524:	220a      	movs	r2, #10
 8008526:	4648      	mov	r0, r9
 8008528:	f000 fe3a 	bl	80091a0 <__multadd>
 800852c:	f1bb 0f00 	cmp.w	fp, #0
 8008530:	4605      	mov	r5, r0
 8008532:	dc6f      	bgt.n	8008614 <_dtoa_r+0x974>
 8008534:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008536:	2b02      	cmp	r3, #2
 8008538:	dc49      	bgt.n	80085ce <_dtoa_r+0x92e>
 800853a:	e06b      	b.n	8008614 <_dtoa_r+0x974>
 800853c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800853e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008542:	e73c      	b.n	80083be <_dtoa_r+0x71e>
 8008544:	3fe00000 	.word	0x3fe00000
 8008548:	40240000 	.word	0x40240000
 800854c:	9b08      	ldr	r3, [sp, #32]
 800854e:	1e5c      	subs	r4, r3, #1
 8008550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008552:	42a3      	cmp	r3, r4
 8008554:	db09      	blt.n	800856a <_dtoa_r+0x8ca>
 8008556:	1b1c      	subs	r4, r3, r4
 8008558:	9b08      	ldr	r3, [sp, #32]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f6bf af30 	bge.w	80083c0 <_dtoa_r+0x720>
 8008560:	9b04      	ldr	r3, [sp, #16]
 8008562:	9a08      	ldr	r2, [sp, #32]
 8008564:	1a9e      	subs	r6, r3, r2
 8008566:	2300      	movs	r3, #0
 8008568:	e72b      	b.n	80083c2 <_dtoa_r+0x722>
 800856a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800856c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800856e:	1ae3      	subs	r3, r4, r3
 8008570:	441a      	add	r2, r3
 8008572:	940a      	str	r4, [sp, #40]	@ 0x28
 8008574:	9e04      	ldr	r6, [sp, #16]
 8008576:	2400      	movs	r4, #0
 8008578:	9b08      	ldr	r3, [sp, #32]
 800857a:	920e      	str	r2, [sp, #56]	@ 0x38
 800857c:	e721      	b.n	80083c2 <_dtoa_r+0x722>
 800857e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008580:	9e04      	ldr	r6, [sp, #16]
 8008582:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008584:	e728      	b.n	80083d8 <_dtoa_r+0x738>
 8008586:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800858a:	e751      	b.n	8008430 <_dtoa_r+0x790>
 800858c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800858e:	9903      	ldr	r1, [sp, #12]
 8008590:	e750      	b.n	8008434 <_dtoa_r+0x794>
 8008592:	f8cd 800c 	str.w	r8, [sp, #12]
 8008596:	e751      	b.n	800843c <_dtoa_r+0x79c>
 8008598:	2300      	movs	r3, #0
 800859a:	e779      	b.n	8008490 <_dtoa_r+0x7f0>
 800859c:	9b06      	ldr	r3, [sp, #24]
 800859e:	e777      	b.n	8008490 <_dtoa_r+0x7f0>
 80085a0:	2300      	movs	r3, #0
 80085a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80085a4:	e779      	b.n	800849a <_dtoa_r+0x7fa>
 80085a6:	d093      	beq.n	80084d0 <_dtoa_r+0x830>
 80085a8:	9a04      	ldr	r2, [sp, #16]
 80085aa:	331c      	adds	r3, #28
 80085ac:	441a      	add	r2, r3
 80085ae:	9204      	str	r2, [sp, #16]
 80085b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085b2:	441e      	add	r6, r3
 80085b4:	441a      	add	r2, r3
 80085b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80085b8:	e78a      	b.n	80084d0 <_dtoa_r+0x830>
 80085ba:	4603      	mov	r3, r0
 80085bc:	e7f4      	b.n	80085a8 <_dtoa_r+0x908>
 80085be:	9b08      	ldr	r3, [sp, #32]
 80085c0:	46b8      	mov	r8, r7
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	dc20      	bgt.n	8008608 <_dtoa_r+0x968>
 80085c6:	469b      	mov	fp, r3
 80085c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	dd1e      	ble.n	800860c <_dtoa_r+0x96c>
 80085ce:	f1bb 0f00 	cmp.w	fp, #0
 80085d2:	f47f adb1 	bne.w	8008138 <_dtoa_r+0x498>
 80085d6:	4621      	mov	r1, r4
 80085d8:	465b      	mov	r3, fp
 80085da:	2205      	movs	r2, #5
 80085dc:	4648      	mov	r0, r9
 80085de:	f000 fddf 	bl	80091a0 <__multadd>
 80085e2:	4601      	mov	r1, r0
 80085e4:	4604      	mov	r4, r0
 80085e6:	9803      	ldr	r0, [sp, #12]
 80085e8:	f001 f834 	bl	8009654 <__mcmp>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	f77f ada3 	ble.w	8008138 <_dtoa_r+0x498>
 80085f2:	4656      	mov	r6, sl
 80085f4:	2331      	movs	r3, #49	@ 0x31
 80085f6:	f108 0801 	add.w	r8, r8, #1
 80085fa:	f806 3b01 	strb.w	r3, [r6], #1
 80085fe:	e59f      	b.n	8008140 <_dtoa_r+0x4a0>
 8008600:	46b8      	mov	r8, r7
 8008602:	9c08      	ldr	r4, [sp, #32]
 8008604:	4625      	mov	r5, r4
 8008606:	e7f4      	b.n	80085f2 <_dtoa_r+0x952>
 8008608:	f8dd b020 	ldr.w	fp, [sp, #32]
 800860c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 8101 	beq.w	8008816 <_dtoa_r+0xb76>
 8008614:	2e00      	cmp	r6, #0
 8008616:	dd05      	ble.n	8008624 <_dtoa_r+0x984>
 8008618:	4629      	mov	r1, r5
 800861a:	4632      	mov	r2, r6
 800861c:	4648      	mov	r0, r9
 800861e:	f000 ffad 	bl	800957c <__lshift>
 8008622:	4605      	mov	r5, r0
 8008624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d05c      	beq.n	80086e4 <_dtoa_r+0xa44>
 800862a:	4648      	mov	r0, r9
 800862c:	6869      	ldr	r1, [r5, #4]
 800862e:	f000 fd55 	bl	80090dc <_Balloc>
 8008632:	4606      	mov	r6, r0
 8008634:	b928      	cbnz	r0, 8008642 <_dtoa_r+0x9a2>
 8008636:	4602      	mov	r2, r0
 8008638:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800863c:	4b80      	ldr	r3, [pc, #512]	@ (8008840 <_dtoa_r+0xba0>)
 800863e:	f7ff bb43 	b.w	8007cc8 <_dtoa_r+0x28>
 8008642:	692a      	ldr	r2, [r5, #16]
 8008644:	f105 010c 	add.w	r1, r5, #12
 8008648:	3202      	adds	r2, #2
 800864a:	0092      	lsls	r2, r2, #2
 800864c:	300c      	adds	r0, #12
 800864e:	f7ff fa6a 	bl	8007b26 <memcpy>
 8008652:	2201      	movs	r2, #1
 8008654:	4631      	mov	r1, r6
 8008656:	4648      	mov	r0, r9
 8008658:	f000 ff90 	bl	800957c <__lshift>
 800865c:	462f      	mov	r7, r5
 800865e:	4605      	mov	r5, r0
 8008660:	f10a 0301 	add.w	r3, sl, #1
 8008664:	9304      	str	r3, [sp, #16]
 8008666:	eb0a 030b 	add.w	r3, sl, fp
 800866a:	930a      	str	r3, [sp, #40]	@ 0x28
 800866c:	9b06      	ldr	r3, [sp, #24]
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	9309      	str	r3, [sp, #36]	@ 0x24
 8008674:	9b04      	ldr	r3, [sp, #16]
 8008676:	4621      	mov	r1, r4
 8008678:	9803      	ldr	r0, [sp, #12]
 800867a:	f103 3bff 	add.w	fp, r3, #4294967295
 800867e:	f7ff fa85 	bl	8007b8c <quorem>
 8008682:	4603      	mov	r3, r0
 8008684:	4639      	mov	r1, r7
 8008686:	3330      	adds	r3, #48	@ 0x30
 8008688:	9006      	str	r0, [sp, #24]
 800868a:	9803      	ldr	r0, [sp, #12]
 800868c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800868e:	f000 ffe1 	bl	8009654 <__mcmp>
 8008692:	462a      	mov	r2, r5
 8008694:	9008      	str	r0, [sp, #32]
 8008696:	4621      	mov	r1, r4
 8008698:	4648      	mov	r0, r9
 800869a:	f000 fff7 	bl	800968c <__mdiff>
 800869e:	68c2      	ldr	r2, [r0, #12]
 80086a0:	4606      	mov	r6, r0
 80086a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086a4:	bb02      	cbnz	r2, 80086e8 <_dtoa_r+0xa48>
 80086a6:	4601      	mov	r1, r0
 80086a8:	9803      	ldr	r0, [sp, #12]
 80086aa:	f000 ffd3 	bl	8009654 <__mcmp>
 80086ae:	4602      	mov	r2, r0
 80086b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086b2:	4631      	mov	r1, r6
 80086b4:	4648      	mov	r0, r9
 80086b6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80086ba:	f000 fd4f 	bl	800915c <_Bfree>
 80086be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80086c2:	9e04      	ldr	r6, [sp, #16]
 80086c4:	ea42 0103 	orr.w	r1, r2, r3
 80086c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ca:	4319      	orrs	r1, r3
 80086cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086ce:	d10d      	bne.n	80086ec <_dtoa_r+0xa4c>
 80086d0:	2b39      	cmp	r3, #57	@ 0x39
 80086d2:	d027      	beq.n	8008724 <_dtoa_r+0xa84>
 80086d4:	9a08      	ldr	r2, [sp, #32]
 80086d6:	2a00      	cmp	r2, #0
 80086d8:	dd01      	ble.n	80086de <_dtoa_r+0xa3e>
 80086da:	9b06      	ldr	r3, [sp, #24]
 80086dc:	3331      	adds	r3, #49	@ 0x31
 80086de:	f88b 3000 	strb.w	r3, [fp]
 80086e2:	e52e      	b.n	8008142 <_dtoa_r+0x4a2>
 80086e4:	4628      	mov	r0, r5
 80086e6:	e7b9      	b.n	800865c <_dtoa_r+0x9bc>
 80086e8:	2201      	movs	r2, #1
 80086ea:	e7e2      	b.n	80086b2 <_dtoa_r+0xa12>
 80086ec:	9908      	ldr	r1, [sp, #32]
 80086ee:	2900      	cmp	r1, #0
 80086f0:	db04      	blt.n	80086fc <_dtoa_r+0xa5c>
 80086f2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80086f4:	4301      	orrs	r1, r0
 80086f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086f8:	4301      	orrs	r1, r0
 80086fa:	d120      	bne.n	800873e <_dtoa_r+0xa9e>
 80086fc:	2a00      	cmp	r2, #0
 80086fe:	ddee      	ble.n	80086de <_dtoa_r+0xa3e>
 8008700:	2201      	movs	r2, #1
 8008702:	9903      	ldr	r1, [sp, #12]
 8008704:	4648      	mov	r0, r9
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	f000 ff38 	bl	800957c <__lshift>
 800870c:	4621      	mov	r1, r4
 800870e:	9003      	str	r0, [sp, #12]
 8008710:	f000 ffa0 	bl	8009654 <__mcmp>
 8008714:	2800      	cmp	r0, #0
 8008716:	9b04      	ldr	r3, [sp, #16]
 8008718:	dc02      	bgt.n	8008720 <_dtoa_r+0xa80>
 800871a:	d1e0      	bne.n	80086de <_dtoa_r+0xa3e>
 800871c:	07da      	lsls	r2, r3, #31
 800871e:	d5de      	bpl.n	80086de <_dtoa_r+0xa3e>
 8008720:	2b39      	cmp	r3, #57	@ 0x39
 8008722:	d1da      	bne.n	80086da <_dtoa_r+0xa3a>
 8008724:	2339      	movs	r3, #57	@ 0x39
 8008726:	f88b 3000 	strb.w	r3, [fp]
 800872a:	4633      	mov	r3, r6
 800872c:	461e      	mov	r6, r3
 800872e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008732:	3b01      	subs	r3, #1
 8008734:	2a39      	cmp	r2, #57	@ 0x39
 8008736:	d04e      	beq.n	80087d6 <_dtoa_r+0xb36>
 8008738:	3201      	adds	r2, #1
 800873a:	701a      	strb	r2, [r3, #0]
 800873c:	e501      	b.n	8008142 <_dtoa_r+0x4a2>
 800873e:	2a00      	cmp	r2, #0
 8008740:	dd03      	ble.n	800874a <_dtoa_r+0xaaa>
 8008742:	2b39      	cmp	r3, #57	@ 0x39
 8008744:	d0ee      	beq.n	8008724 <_dtoa_r+0xa84>
 8008746:	3301      	adds	r3, #1
 8008748:	e7c9      	b.n	80086de <_dtoa_r+0xa3e>
 800874a:	9a04      	ldr	r2, [sp, #16]
 800874c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800874e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008752:	428a      	cmp	r2, r1
 8008754:	d028      	beq.n	80087a8 <_dtoa_r+0xb08>
 8008756:	2300      	movs	r3, #0
 8008758:	220a      	movs	r2, #10
 800875a:	9903      	ldr	r1, [sp, #12]
 800875c:	4648      	mov	r0, r9
 800875e:	f000 fd1f 	bl	80091a0 <__multadd>
 8008762:	42af      	cmp	r7, r5
 8008764:	9003      	str	r0, [sp, #12]
 8008766:	f04f 0300 	mov.w	r3, #0
 800876a:	f04f 020a 	mov.w	r2, #10
 800876e:	4639      	mov	r1, r7
 8008770:	4648      	mov	r0, r9
 8008772:	d107      	bne.n	8008784 <_dtoa_r+0xae4>
 8008774:	f000 fd14 	bl	80091a0 <__multadd>
 8008778:	4607      	mov	r7, r0
 800877a:	4605      	mov	r5, r0
 800877c:	9b04      	ldr	r3, [sp, #16]
 800877e:	3301      	adds	r3, #1
 8008780:	9304      	str	r3, [sp, #16]
 8008782:	e777      	b.n	8008674 <_dtoa_r+0x9d4>
 8008784:	f000 fd0c 	bl	80091a0 <__multadd>
 8008788:	4629      	mov	r1, r5
 800878a:	4607      	mov	r7, r0
 800878c:	2300      	movs	r3, #0
 800878e:	220a      	movs	r2, #10
 8008790:	4648      	mov	r0, r9
 8008792:	f000 fd05 	bl	80091a0 <__multadd>
 8008796:	4605      	mov	r5, r0
 8008798:	e7f0      	b.n	800877c <_dtoa_r+0xadc>
 800879a:	f1bb 0f00 	cmp.w	fp, #0
 800879e:	bfcc      	ite	gt
 80087a0:	465e      	movgt	r6, fp
 80087a2:	2601      	movle	r6, #1
 80087a4:	2700      	movs	r7, #0
 80087a6:	4456      	add	r6, sl
 80087a8:	2201      	movs	r2, #1
 80087aa:	9903      	ldr	r1, [sp, #12]
 80087ac:	4648      	mov	r0, r9
 80087ae:	9304      	str	r3, [sp, #16]
 80087b0:	f000 fee4 	bl	800957c <__lshift>
 80087b4:	4621      	mov	r1, r4
 80087b6:	9003      	str	r0, [sp, #12]
 80087b8:	f000 ff4c 	bl	8009654 <__mcmp>
 80087bc:	2800      	cmp	r0, #0
 80087be:	dcb4      	bgt.n	800872a <_dtoa_r+0xa8a>
 80087c0:	d102      	bne.n	80087c8 <_dtoa_r+0xb28>
 80087c2:	9b04      	ldr	r3, [sp, #16]
 80087c4:	07db      	lsls	r3, r3, #31
 80087c6:	d4b0      	bmi.n	800872a <_dtoa_r+0xa8a>
 80087c8:	4633      	mov	r3, r6
 80087ca:	461e      	mov	r6, r3
 80087cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087d0:	2a30      	cmp	r2, #48	@ 0x30
 80087d2:	d0fa      	beq.n	80087ca <_dtoa_r+0xb2a>
 80087d4:	e4b5      	b.n	8008142 <_dtoa_r+0x4a2>
 80087d6:	459a      	cmp	sl, r3
 80087d8:	d1a8      	bne.n	800872c <_dtoa_r+0xa8c>
 80087da:	2331      	movs	r3, #49	@ 0x31
 80087dc:	f108 0801 	add.w	r8, r8, #1
 80087e0:	f88a 3000 	strb.w	r3, [sl]
 80087e4:	e4ad      	b.n	8008142 <_dtoa_r+0x4a2>
 80087e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80087e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008844 <_dtoa_r+0xba4>
 80087ec:	b11b      	cbz	r3, 80087f6 <_dtoa_r+0xb56>
 80087ee:	f10a 0308 	add.w	r3, sl, #8
 80087f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80087f4:	6013      	str	r3, [r2, #0]
 80087f6:	4650      	mov	r0, sl
 80087f8:	b017      	add	sp, #92	@ 0x5c
 80087fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008800:	2b01      	cmp	r3, #1
 8008802:	f77f ae2e 	ble.w	8008462 <_dtoa_r+0x7c2>
 8008806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008808:	930a      	str	r3, [sp, #40]	@ 0x28
 800880a:	2001      	movs	r0, #1
 800880c:	e64d      	b.n	80084aa <_dtoa_r+0x80a>
 800880e:	f1bb 0f00 	cmp.w	fp, #0
 8008812:	f77f aed9 	ble.w	80085c8 <_dtoa_r+0x928>
 8008816:	4656      	mov	r6, sl
 8008818:	4621      	mov	r1, r4
 800881a:	9803      	ldr	r0, [sp, #12]
 800881c:	f7ff f9b6 	bl	8007b8c <quorem>
 8008820:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008824:	f806 3b01 	strb.w	r3, [r6], #1
 8008828:	eba6 020a 	sub.w	r2, r6, sl
 800882c:	4593      	cmp	fp, r2
 800882e:	ddb4      	ble.n	800879a <_dtoa_r+0xafa>
 8008830:	2300      	movs	r3, #0
 8008832:	220a      	movs	r2, #10
 8008834:	4648      	mov	r0, r9
 8008836:	9903      	ldr	r1, [sp, #12]
 8008838:	f000 fcb2 	bl	80091a0 <__multadd>
 800883c:	9003      	str	r0, [sp, #12]
 800883e:	e7eb      	b.n	8008818 <_dtoa_r+0xb78>
 8008840:	0800a78e 	.word	0x0800a78e
 8008844:	0800a729 	.word	0x0800a729

08008848 <_free_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4605      	mov	r5, r0
 800884c:	2900      	cmp	r1, #0
 800884e:	d040      	beq.n	80088d2 <_free_r+0x8a>
 8008850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008854:	1f0c      	subs	r4, r1, #4
 8008856:	2b00      	cmp	r3, #0
 8008858:	bfb8      	it	lt
 800885a:	18e4      	addlt	r4, r4, r3
 800885c:	f000 fc32 	bl	80090c4 <__malloc_lock>
 8008860:	4a1c      	ldr	r2, [pc, #112]	@ (80088d4 <_free_r+0x8c>)
 8008862:	6813      	ldr	r3, [r2, #0]
 8008864:	b933      	cbnz	r3, 8008874 <_free_r+0x2c>
 8008866:	6063      	str	r3, [r4, #4]
 8008868:	6014      	str	r4, [r2, #0]
 800886a:	4628      	mov	r0, r5
 800886c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008870:	f000 bc2e 	b.w	80090d0 <__malloc_unlock>
 8008874:	42a3      	cmp	r3, r4
 8008876:	d908      	bls.n	800888a <_free_r+0x42>
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	1821      	adds	r1, r4, r0
 800887c:	428b      	cmp	r3, r1
 800887e:	bf01      	itttt	eq
 8008880:	6819      	ldreq	r1, [r3, #0]
 8008882:	685b      	ldreq	r3, [r3, #4]
 8008884:	1809      	addeq	r1, r1, r0
 8008886:	6021      	streq	r1, [r4, #0]
 8008888:	e7ed      	b.n	8008866 <_free_r+0x1e>
 800888a:	461a      	mov	r2, r3
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	b10b      	cbz	r3, 8008894 <_free_r+0x4c>
 8008890:	42a3      	cmp	r3, r4
 8008892:	d9fa      	bls.n	800888a <_free_r+0x42>
 8008894:	6811      	ldr	r1, [r2, #0]
 8008896:	1850      	adds	r0, r2, r1
 8008898:	42a0      	cmp	r0, r4
 800889a:	d10b      	bne.n	80088b4 <_free_r+0x6c>
 800889c:	6820      	ldr	r0, [r4, #0]
 800889e:	4401      	add	r1, r0
 80088a0:	1850      	adds	r0, r2, r1
 80088a2:	4283      	cmp	r3, r0
 80088a4:	6011      	str	r1, [r2, #0]
 80088a6:	d1e0      	bne.n	800886a <_free_r+0x22>
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	4408      	add	r0, r1
 80088ae:	6010      	str	r0, [r2, #0]
 80088b0:	6053      	str	r3, [r2, #4]
 80088b2:	e7da      	b.n	800886a <_free_r+0x22>
 80088b4:	d902      	bls.n	80088bc <_free_r+0x74>
 80088b6:	230c      	movs	r3, #12
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	e7d6      	b.n	800886a <_free_r+0x22>
 80088bc:	6820      	ldr	r0, [r4, #0]
 80088be:	1821      	adds	r1, r4, r0
 80088c0:	428b      	cmp	r3, r1
 80088c2:	bf01      	itttt	eq
 80088c4:	6819      	ldreq	r1, [r3, #0]
 80088c6:	685b      	ldreq	r3, [r3, #4]
 80088c8:	1809      	addeq	r1, r1, r0
 80088ca:	6021      	streq	r1, [r4, #0]
 80088cc:	6063      	str	r3, [r4, #4]
 80088ce:	6054      	str	r4, [r2, #4]
 80088d0:	e7cb      	b.n	800886a <_free_r+0x22>
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	2000078c 	.word	0x2000078c

080088d8 <rshift>:
 80088d8:	6903      	ldr	r3, [r0, #16]
 80088da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80088e2:	f100 0414 	add.w	r4, r0, #20
 80088e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80088ea:	dd46      	ble.n	800897a <rshift+0xa2>
 80088ec:	f011 011f 	ands.w	r1, r1, #31
 80088f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088f8:	d10c      	bne.n	8008914 <rshift+0x3c>
 80088fa:	4629      	mov	r1, r5
 80088fc:	f100 0710 	add.w	r7, r0, #16
 8008900:	42b1      	cmp	r1, r6
 8008902:	d335      	bcc.n	8008970 <rshift+0x98>
 8008904:	1a9b      	subs	r3, r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	1eea      	subs	r2, r5, #3
 800890a:	4296      	cmp	r6, r2
 800890c:	bf38      	it	cc
 800890e:	2300      	movcc	r3, #0
 8008910:	4423      	add	r3, r4
 8008912:	e015      	b.n	8008940 <rshift+0x68>
 8008914:	46a1      	mov	r9, r4
 8008916:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800891a:	f1c1 0820 	rsb	r8, r1, #32
 800891e:	40cf      	lsrs	r7, r1
 8008920:	f105 0e04 	add.w	lr, r5, #4
 8008924:	4576      	cmp	r6, lr
 8008926:	46f4      	mov	ip, lr
 8008928:	d816      	bhi.n	8008958 <rshift+0x80>
 800892a:	1a9a      	subs	r2, r3, r2
 800892c:	0092      	lsls	r2, r2, #2
 800892e:	3a04      	subs	r2, #4
 8008930:	3501      	adds	r5, #1
 8008932:	42ae      	cmp	r6, r5
 8008934:	bf38      	it	cc
 8008936:	2200      	movcc	r2, #0
 8008938:	18a3      	adds	r3, r4, r2
 800893a:	50a7      	str	r7, [r4, r2]
 800893c:	b107      	cbz	r7, 8008940 <rshift+0x68>
 800893e:	3304      	adds	r3, #4
 8008940:	42a3      	cmp	r3, r4
 8008942:	eba3 0204 	sub.w	r2, r3, r4
 8008946:	bf08      	it	eq
 8008948:	2300      	moveq	r3, #0
 800894a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800894e:	6102      	str	r2, [r0, #16]
 8008950:	bf08      	it	eq
 8008952:	6143      	streq	r3, [r0, #20]
 8008954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008958:	f8dc c000 	ldr.w	ip, [ip]
 800895c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008960:	ea4c 0707 	orr.w	r7, ip, r7
 8008964:	f849 7b04 	str.w	r7, [r9], #4
 8008968:	f85e 7b04 	ldr.w	r7, [lr], #4
 800896c:	40cf      	lsrs	r7, r1
 800896e:	e7d9      	b.n	8008924 <rshift+0x4c>
 8008970:	f851 cb04 	ldr.w	ip, [r1], #4
 8008974:	f847 cf04 	str.w	ip, [r7, #4]!
 8008978:	e7c2      	b.n	8008900 <rshift+0x28>
 800897a:	4623      	mov	r3, r4
 800897c:	e7e0      	b.n	8008940 <rshift+0x68>

0800897e <__hexdig_fun>:
 800897e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008982:	2b09      	cmp	r3, #9
 8008984:	d802      	bhi.n	800898c <__hexdig_fun+0xe>
 8008986:	3820      	subs	r0, #32
 8008988:	b2c0      	uxtb	r0, r0
 800898a:	4770      	bx	lr
 800898c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008990:	2b05      	cmp	r3, #5
 8008992:	d801      	bhi.n	8008998 <__hexdig_fun+0x1a>
 8008994:	3847      	subs	r0, #71	@ 0x47
 8008996:	e7f7      	b.n	8008988 <__hexdig_fun+0xa>
 8008998:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800899c:	2b05      	cmp	r3, #5
 800899e:	d801      	bhi.n	80089a4 <__hexdig_fun+0x26>
 80089a0:	3827      	subs	r0, #39	@ 0x27
 80089a2:	e7f1      	b.n	8008988 <__hexdig_fun+0xa>
 80089a4:	2000      	movs	r0, #0
 80089a6:	4770      	bx	lr

080089a8 <__gethex>:
 80089a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ac:	468a      	mov	sl, r1
 80089ae:	4690      	mov	r8, r2
 80089b0:	b085      	sub	sp, #20
 80089b2:	9302      	str	r3, [sp, #8]
 80089b4:	680b      	ldr	r3, [r1, #0]
 80089b6:	9001      	str	r0, [sp, #4]
 80089b8:	1c9c      	adds	r4, r3, #2
 80089ba:	46a1      	mov	r9, r4
 80089bc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80089c0:	2830      	cmp	r0, #48	@ 0x30
 80089c2:	d0fa      	beq.n	80089ba <__gethex+0x12>
 80089c4:	eba9 0303 	sub.w	r3, r9, r3
 80089c8:	f1a3 0b02 	sub.w	fp, r3, #2
 80089cc:	f7ff ffd7 	bl	800897e <__hexdig_fun>
 80089d0:	4605      	mov	r5, r0
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d168      	bne.n	8008aa8 <__gethex+0x100>
 80089d6:	2201      	movs	r2, #1
 80089d8:	4648      	mov	r0, r9
 80089da:	499f      	ldr	r1, [pc, #636]	@ (8008c58 <__gethex+0x2b0>)
 80089dc:	f7fe ffa7 	bl	800792e <strncmp>
 80089e0:	4607      	mov	r7, r0
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d167      	bne.n	8008ab6 <__gethex+0x10e>
 80089e6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80089ea:	4626      	mov	r6, r4
 80089ec:	f7ff ffc7 	bl	800897e <__hexdig_fun>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d062      	beq.n	8008aba <__gethex+0x112>
 80089f4:	4623      	mov	r3, r4
 80089f6:	7818      	ldrb	r0, [r3, #0]
 80089f8:	4699      	mov	r9, r3
 80089fa:	2830      	cmp	r0, #48	@ 0x30
 80089fc:	f103 0301 	add.w	r3, r3, #1
 8008a00:	d0f9      	beq.n	80089f6 <__gethex+0x4e>
 8008a02:	f7ff ffbc 	bl	800897e <__hexdig_fun>
 8008a06:	fab0 f580 	clz	r5, r0
 8008a0a:	f04f 0b01 	mov.w	fp, #1
 8008a0e:	096d      	lsrs	r5, r5, #5
 8008a10:	464a      	mov	r2, r9
 8008a12:	4616      	mov	r6, r2
 8008a14:	7830      	ldrb	r0, [r6, #0]
 8008a16:	3201      	adds	r2, #1
 8008a18:	f7ff ffb1 	bl	800897e <__hexdig_fun>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d1f8      	bne.n	8008a12 <__gethex+0x6a>
 8008a20:	2201      	movs	r2, #1
 8008a22:	4630      	mov	r0, r6
 8008a24:	498c      	ldr	r1, [pc, #560]	@ (8008c58 <__gethex+0x2b0>)
 8008a26:	f7fe ff82 	bl	800792e <strncmp>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d13f      	bne.n	8008aae <__gethex+0x106>
 8008a2e:	b944      	cbnz	r4, 8008a42 <__gethex+0x9a>
 8008a30:	1c74      	adds	r4, r6, #1
 8008a32:	4622      	mov	r2, r4
 8008a34:	4616      	mov	r6, r2
 8008a36:	7830      	ldrb	r0, [r6, #0]
 8008a38:	3201      	adds	r2, #1
 8008a3a:	f7ff ffa0 	bl	800897e <__hexdig_fun>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d1f8      	bne.n	8008a34 <__gethex+0x8c>
 8008a42:	1ba4      	subs	r4, r4, r6
 8008a44:	00a7      	lsls	r7, r4, #2
 8008a46:	7833      	ldrb	r3, [r6, #0]
 8008a48:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008a4c:	2b50      	cmp	r3, #80	@ 0x50
 8008a4e:	d13e      	bne.n	8008ace <__gethex+0x126>
 8008a50:	7873      	ldrb	r3, [r6, #1]
 8008a52:	2b2b      	cmp	r3, #43	@ 0x2b
 8008a54:	d033      	beq.n	8008abe <__gethex+0x116>
 8008a56:	2b2d      	cmp	r3, #45	@ 0x2d
 8008a58:	d034      	beq.n	8008ac4 <__gethex+0x11c>
 8008a5a:	2400      	movs	r4, #0
 8008a5c:	1c71      	adds	r1, r6, #1
 8008a5e:	7808      	ldrb	r0, [r1, #0]
 8008a60:	f7ff ff8d 	bl	800897e <__hexdig_fun>
 8008a64:	1e43      	subs	r3, r0, #1
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b18      	cmp	r3, #24
 8008a6a:	d830      	bhi.n	8008ace <__gethex+0x126>
 8008a6c:	f1a0 0210 	sub.w	r2, r0, #16
 8008a70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a74:	f7ff ff83 	bl	800897e <__hexdig_fun>
 8008a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8008a7c:	fa5f fc8c 	uxtb.w	ip, ip
 8008a80:	f1bc 0f18 	cmp.w	ip, #24
 8008a84:	f04f 030a 	mov.w	r3, #10
 8008a88:	d91e      	bls.n	8008ac8 <__gethex+0x120>
 8008a8a:	b104      	cbz	r4, 8008a8e <__gethex+0xe6>
 8008a8c:	4252      	negs	r2, r2
 8008a8e:	4417      	add	r7, r2
 8008a90:	f8ca 1000 	str.w	r1, [sl]
 8008a94:	b1ed      	cbz	r5, 8008ad2 <__gethex+0x12a>
 8008a96:	f1bb 0f00 	cmp.w	fp, #0
 8008a9a:	bf0c      	ite	eq
 8008a9c:	2506      	moveq	r5, #6
 8008a9e:	2500      	movne	r5, #0
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	b005      	add	sp, #20
 8008aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa8:	2500      	movs	r5, #0
 8008aaa:	462c      	mov	r4, r5
 8008aac:	e7b0      	b.n	8008a10 <__gethex+0x68>
 8008aae:	2c00      	cmp	r4, #0
 8008ab0:	d1c7      	bne.n	8008a42 <__gethex+0x9a>
 8008ab2:	4627      	mov	r7, r4
 8008ab4:	e7c7      	b.n	8008a46 <__gethex+0x9e>
 8008ab6:	464e      	mov	r6, r9
 8008ab8:	462f      	mov	r7, r5
 8008aba:	2501      	movs	r5, #1
 8008abc:	e7c3      	b.n	8008a46 <__gethex+0x9e>
 8008abe:	2400      	movs	r4, #0
 8008ac0:	1cb1      	adds	r1, r6, #2
 8008ac2:	e7cc      	b.n	8008a5e <__gethex+0xb6>
 8008ac4:	2401      	movs	r4, #1
 8008ac6:	e7fb      	b.n	8008ac0 <__gethex+0x118>
 8008ac8:	fb03 0002 	mla	r0, r3, r2, r0
 8008acc:	e7ce      	b.n	8008a6c <__gethex+0xc4>
 8008ace:	4631      	mov	r1, r6
 8008ad0:	e7de      	b.n	8008a90 <__gethex+0xe8>
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	eba6 0309 	sub.w	r3, r6, r9
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	2b07      	cmp	r3, #7
 8008adc:	dc0a      	bgt.n	8008af4 <__gethex+0x14c>
 8008ade:	9801      	ldr	r0, [sp, #4]
 8008ae0:	f000 fafc 	bl	80090dc <_Balloc>
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	b940      	cbnz	r0, 8008afa <__gethex+0x152>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	21e4      	movs	r1, #228	@ 0xe4
 8008aec:	4b5b      	ldr	r3, [pc, #364]	@ (8008c5c <__gethex+0x2b4>)
 8008aee:	485c      	ldr	r0, [pc, #368]	@ (8008c60 <__gethex+0x2b8>)
 8008af0:	f7ff f82e 	bl	8007b50 <__assert_func>
 8008af4:	3101      	adds	r1, #1
 8008af6:	105b      	asrs	r3, r3, #1
 8008af8:	e7ef      	b.n	8008ada <__gethex+0x132>
 8008afa:	2300      	movs	r3, #0
 8008afc:	f100 0a14 	add.w	sl, r0, #20
 8008b00:	4655      	mov	r5, sl
 8008b02:	469b      	mov	fp, r3
 8008b04:	45b1      	cmp	r9, r6
 8008b06:	d337      	bcc.n	8008b78 <__gethex+0x1d0>
 8008b08:	f845 bb04 	str.w	fp, [r5], #4
 8008b0c:	eba5 050a 	sub.w	r5, r5, sl
 8008b10:	10ad      	asrs	r5, r5, #2
 8008b12:	6125      	str	r5, [r4, #16]
 8008b14:	4658      	mov	r0, fp
 8008b16:	f000 fbd3 	bl	80092c0 <__hi0bits>
 8008b1a:	016d      	lsls	r5, r5, #5
 8008b1c:	f8d8 6000 	ldr.w	r6, [r8]
 8008b20:	1a2d      	subs	r5, r5, r0
 8008b22:	42b5      	cmp	r5, r6
 8008b24:	dd54      	ble.n	8008bd0 <__gethex+0x228>
 8008b26:	1bad      	subs	r5, r5, r6
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 ff55 	bl	80099da <__any_on>
 8008b30:	4681      	mov	r9, r0
 8008b32:	b178      	cbz	r0, 8008b54 <__gethex+0x1ac>
 8008b34:	f04f 0901 	mov.w	r9, #1
 8008b38:	1e6b      	subs	r3, r5, #1
 8008b3a:	1159      	asrs	r1, r3, #5
 8008b3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008b40:	f003 021f 	and.w	r2, r3, #31
 8008b44:	fa09 f202 	lsl.w	r2, r9, r2
 8008b48:	420a      	tst	r2, r1
 8008b4a:	d003      	beq.n	8008b54 <__gethex+0x1ac>
 8008b4c:	454b      	cmp	r3, r9
 8008b4e:	dc36      	bgt.n	8008bbe <__gethex+0x216>
 8008b50:	f04f 0902 	mov.w	r9, #2
 8008b54:	4629      	mov	r1, r5
 8008b56:	4620      	mov	r0, r4
 8008b58:	f7ff febe 	bl	80088d8 <rshift>
 8008b5c:	442f      	add	r7, r5
 8008b5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b62:	42bb      	cmp	r3, r7
 8008b64:	da42      	bge.n	8008bec <__gethex+0x244>
 8008b66:	4621      	mov	r1, r4
 8008b68:	9801      	ldr	r0, [sp, #4]
 8008b6a:	f000 faf7 	bl	800915c <_Bfree>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b72:	25a3      	movs	r5, #163	@ 0xa3
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	e793      	b.n	8008aa0 <__gethex+0xf8>
 8008b78:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008b7c:	2a2e      	cmp	r2, #46	@ 0x2e
 8008b7e:	d012      	beq.n	8008ba6 <__gethex+0x1fe>
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d104      	bne.n	8008b8e <__gethex+0x1e6>
 8008b84:	f845 bb04 	str.w	fp, [r5], #4
 8008b88:	f04f 0b00 	mov.w	fp, #0
 8008b8c:	465b      	mov	r3, fp
 8008b8e:	7830      	ldrb	r0, [r6, #0]
 8008b90:	9303      	str	r3, [sp, #12]
 8008b92:	f7ff fef4 	bl	800897e <__hexdig_fun>
 8008b96:	9b03      	ldr	r3, [sp, #12]
 8008b98:	f000 000f 	and.w	r0, r0, #15
 8008b9c:	4098      	lsls	r0, r3
 8008b9e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008ba2:	3304      	adds	r3, #4
 8008ba4:	e7ae      	b.n	8008b04 <__gethex+0x15c>
 8008ba6:	45b1      	cmp	r9, r6
 8008ba8:	d8ea      	bhi.n	8008b80 <__gethex+0x1d8>
 8008baa:	2201      	movs	r2, #1
 8008bac:	4630      	mov	r0, r6
 8008bae:	492a      	ldr	r1, [pc, #168]	@ (8008c58 <__gethex+0x2b0>)
 8008bb0:	9303      	str	r3, [sp, #12]
 8008bb2:	f7fe febc 	bl	800792e <strncmp>
 8008bb6:	9b03      	ldr	r3, [sp, #12]
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d1e1      	bne.n	8008b80 <__gethex+0x1d8>
 8008bbc:	e7a2      	b.n	8008b04 <__gethex+0x15c>
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	1ea9      	subs	r1, r5, #2
 8008bc2:	f000 ff0a 	bl	80099da <__any_on>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d0c2      	beq.n	8008b50 <__gethex+0x1a8>
 8008bca:	f04f 0903 	mov.w	r9, #3
 8008bce:	e7c1      	b.n	8008b54 <__gethex+0x1ac>
 8008bd0:	da09      	bge.n	8008be6 <__gethex+0x23e>
 8008bd2:	1b75      	subs	r5, r6, r5
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	462a      	mov	r2, r5
 8008bd8:	9801      	ldr	r0, [sp, #4]
 8008bda:	f000 fccf 	bl	800957c <__lshift>
 8008bde:	4604      	mov	r4, r0
 8008be0:	1b7f      	subs	r7, r7, r5
 8008be2:	f100 0a14 	add.w	sl, r0, #20
 8008be6:	f04f 0900 	mov.w	r9, #0
 8008bea:	e7b8      	b.n	8008b5e <__gethex+0x1b6>
 8008bec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008bf0:	42bd      	cmp	r5, r7
 8008bf2:	dd6f      	ble.n	8008cd4 <__gethex+0x32c>
 8008bf4:	1bed      	subs	r5, r5, r7
 8008bf6:	42ae      	cmp	r6, r5
 8008bf8:	dc34      	bgt.n	8008c64 <__gethex+0x2bc>
 8008bfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d022      	beq.n	8008c48 <__gethex+0x2a0>
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d024      	beq.n	8008c50 <__gethex+0x2a8>
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d115      	bne.n	8008c36 <__gethex+0x28e>
 8008c0a:	42ae      	cmp	r6, r5
 8008c0c:	d113      	bne.n	8008c36 <__gethex+0x28e>
 8008c0e:	2e01      	cmp	r6, #1
 8008c10:	d10b      	bne.n	8008c2a <__gethex+0x282>
 8008c12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c16:	9a02      	ldr	r2, [sp, #8]
 8008c18:	2562      	movs	r5, #98	@ 0x62
 8008c1a:	6013      	str	r3, [r2, #0]
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	6123      	str	r3, [r4, #16]
 8008c20:	f8ca 3000 	str.w	r3, [sl]
 8008c24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c26:	601c      	str	r4, [r3, #0]
 8008c28:	e73a      	b.n	8008aa0 <__gethex+0xf8>
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	1e71      	subs	r1, r6, #1
 8008c2e:	f000 fed4 	bl	80099da <__any_on>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d1ed      	bne.n	8008c12 <__gethex+0x26a>
 8008c36:	4621      	mov	r1, r4
 8008c38:	9801      	ldr	r0, [sp, #4]
 8008c3a:	f000 fa8f 	bl	800915c <_Bfree>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c42:	2550      	movs	r5, #80	@ 0x50
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	e72b      	b.n	8008aa0 <__gethex+0xf8>
 8008c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f3      	bne.n	8008c36 <__gethex+0x28e>
 8008c4e:	e7e0      	b.n	8008c12 <__gethex+0x26a>
 8008c50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1dd      	bne.n	8008c12 <__gethex+0x26a>
 8008c56:	e7ee      	b.n	8008c36 <__gethex+0x28e>
 8008c58:	0800a63e 	.word	0x0800a63e
 8008c5c:	0800a78e 	.word	0x0800a78e
 8008c60:	0800a79f 	.word	0x0800a79f
 8008c64:	1e6f      	subs	r7, r5, #1
 8008c66:	f1b9 0f00 	cmp.w	r9, #0
 8008c6a:	d130      	bne.n	8008cce <__gethex+0x326>
 8008c6c:	b127      	cbz	r7, 8008c78 <__gethex+0x2d0>
 8008c6e:	4639      	mov	r1, r7
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 feb2 	bl	80099da <__any_on>
 8008c76:	4681      	mov	r9, r0
 8008c78:	2301      	movs	r3, #1
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	1b76      	subs	r6, r6, r5
 8008c7e:	2502      	movs	r5, #2
 8008c80:	117a      	asrs	r2, r7, #5
 8008c82:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008c86:	f007 071f 	and.w	r7, r7, #31
 8008c8a:	40bb      	lsls	r3, r7
 8008c8c:	4213      	tst	r3, r2
 8008c8e:	4620      	mov	r0, r4
 8008c90:	bf18      	it	ne
 8008c92:	f049 0902 	orrne.w	r9, r9, #2
 8008c96:	f7ff fe1f 	bl	80088d8 <rshift>
 8008c9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008c9e:	f1b9 0f00 	cmp.w	r9, #0
 8008ca2:	d047      	beq.n	8008d34 <__gethex+0x38c>
 8008ca4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d015      	beq.n	8008cd8 <__gethex+0x330>
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d017      	beq.n	8008ce0 <__gethex+0x338>
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d109      	bne.n	8008cc8 <__gethex+0x320>
 8008cb4:	f019 0f02 	tst.w	r9, #2
 8008cb8:	d006      	beq.n	8008cc8 <__gethex+0x320>
 8008cba:	f8da 3000 	ldr.w	r3, [sl]
 8008cbe:	ea49 0903 	orr.w	r9, r9, r3
 8008cc2:	f019 0f01 	tst.w	r9, #1
 8008cc6:	d10e      	bne.n	8008ce6 <__gethex+0x33e>
 8008cc8:	f045 0510 	orr.w	r5, r5, #16
 8008ccc:	e032      	b.n	8008d34 <__gethex+0x38c>
 8008cce:	f04f 0901 	mov.w	r9, #1
 8008cd2:	e7d1      	b.n	8008c78 <__gethex+0x2d0>
 8008cd4:	2501      	movs	r5, #1
 8008cd6:	e7e2      	b.n	8008c9e <__gethex+0x2f6>
 8008cd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cda:	f1c3 0301 	rsb	r3, r3, #1
 8008cde:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0f0      	beq.n	8008cc8 <__gethex+0x320>
 8008ce6:	f04f 0c00 	mov.w	ip, #0
 8008cea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008cee:	f104 0314 	add.w	r3, r4, #20
 8008cf2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008cf6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d00:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d04:	d01b      	beq.n	8008d3e <__gethex+0x396>
 8008d06:	3201      	adds	r2, #1
 8008d08:	6002      	str	r2, [r0, #0]
 8008d0a:	2d02      	cmp	r5, #2
 8008d0c:	f104 0314 	add.w	r3, r4, #20
 8008d10:	d13c      	bne.n	8008d8c <__gethex+0x3e4>
 8008d12:	f8d8 2000 	ldr.w	r2, [r8]
 8008d16:	3a01      	subs	r2, #1
 8008d18:	42b2      	cmp	r2, r6
 8008d1a:	d109      	bne.n	8008d30 <__gethex+0x388>
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	1171      	asrs	r1, r6, #5
 8008d20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d24:	f006 061f 	and.w	r6, r6, #31
 8008d28:	fa02 f606 	lsl.w	r6, r2, r6
 8008d2c:	421e      	tst	r6, r3
 8008d2e:	d13a      	bne.n	8008da6 <__gethex+0x3fe>
 8008d30:	f045 0520 	orr.w	r5, r5, #32
 8008d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d36:	601c      	str	r4, [r3, #0]
 8008d38:	9b02      	ldr	r3, [sp, #8]
 8008d3a:	601f      	str	r7, [r3, #0]
 8008d3c:	e6b0      	b.n	8008aa0 <__gethex+0xf8>
 8008d3e:	4299      	cmp	r1, r3
 8008d40:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d44:	d8d9      	bhi.n	8008cfa <__gethex+0x352>
 8008d46:	68a3      	ldr	r3, [r4, #8]
 8008d48:	459b      	cmp	fp, r3
 8008d4a:	db17      	blt.n	8008d7c <__gethex+0x3d4>
 8008d4c:	6861      	ldr	r1, [r4, #4]
 8008d4e:	9801      	ldr	r0, [sp, #4]
 8008d50:	3101      	adds	r1, #1
 8008d52:	f000 f9c3 	bl	80090dc <_Balloc>
 8008d56:	4681      	mov	r9, r0
 8008d58:	b918      	cbnz	r0, 8008d62 <__gethex+0x3ba>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	2184      	movs	r1, #132	@ 0x84
 8008d5e:	4b19      	ldr	r3, [pc, #100]	@ (8008dc4 <__gethex+0x41c>)
 8008d60:	e6c5      	b.n	8008aee <__gethex+0x146>
 8008d62:	6922      	ldr	r2, [r4, #16]
 8008d64:	f104 010c 	add.w	r1, r4, #12
 8008d68:	3202      	adds	r2, #2
 8008d6a:	0092      	lsls	r2, r2, #2
 8008d6c:	300c      	adds	r0, #12
 8008d6e:	f7fe feda 	bl	8007b26 <memcpy>
 8008d72:	4621      	mov	r1, r4
 8008d74:	9801      	ldr	r0, [sp, #4]
 8008d76:	f000 f9f1 	bl	800915c <_Bfree>
 8008d7a:	464c      	mov	r4, r9
 8008d7c:	6923      	ldr	r3, [r4, #16]
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	6122      	str	r2, [r4, #16]
 8008d82:	2201      	movs	r2, #1
 8008d84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d88:	615a      	str	r2, [r3, #20]
 8008d8a:	e7be      	b.n	8008d0a <__gethex+0x362>
 8008d8c:	6922      	ldr	r2, [r4, #16]
 8008d8e:	455a      	cmp	r2, fp
 8008d90:	dd0b      	ble.n	8008daa <__gethex+0x402>
 8008d92:	2101      	movs	r1, #1
 8008d94:	4620      	mov	r0, r4
 8008d96:	f7ff fd9f 	bl	80088d8 <rshift>
 8008d9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d9e:	3701      	adds	r7, #1
 8008da0:	42bb      	cmp	r3, r7
 8008da2:	f6ff aee0 	blt.w	8008b66 <__gethex+0x1be>
 8008da6:	2501      	movs	r5, #1
 8008da8:	e7c2      	b.n	8008d30 <__gethex+0x388>
 8008daa:	f016 061f 	ands.w	r6, r6, #31
 8008dae:	d0fa      	beq.n	8008da6 <__gethex+0x3fe>
 8008db0:	4453      	add	r3, sl
 8008db2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008db6:	f000 fa83 	bl	80092c0 <__hi0bits>
 8008dba:	f1c6 0620 	rsb	r6, r6, #32
 8008dbe:	42b0      	cmp	r0, r6
 8008dc0:	dbe7      	blt.n	8008d92 <__gethex+0x3ea>
 8008dc2:	e7f0      	b.n	8008da6 <__gethex+0x3fe>
 8008dc4:	0800a78e 	.word	0x0800a78e

08008dc8 <L_shift>:
 8008dc8:	f1c2 0208 	rsb	r2, r2, #8
 8008dcc:	0092      	lsls	r2, r2, #2
 8008dce:	b570      	push	{r4, r5, r6, lr}
 8008dd0:	f1c2 0620 	rsb	r6, r2, #32
 8008dd4:	6843      	ldr	r3, [r0, #4]
 8008dd6:	6804      	ldr	r4, [r0, #0]
 8008dd8:	fa03 f506 	lsl.w	r5, r3, r6
 8008ddc:	432c      	orrs	r4, r5
 8008dde:	40d3      	lsrs	r3, r2
 8008de0:	6004      	str	r4, [r0, #0]
 8008de2:	f840 3f04 	str.w	r3, [r0, #4]!
 8008de6:	4288      	cmp	r0, r1
 8008de8:	d3f4      	bcc.n	8008dd4 <L_shift+0xc>
 8008dea:	bd70      	pop	{r4, r5, r6, pc}

08008dec <__match>:
 8008dec:	b530      	push	{r4, r5, lr}
 8008dee:	6803      	ldr	r3, [r0, #0]
 8008df0:	3301      	adds	r3, #1
 8008df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008df6:	b914      	cbnz	r4, 8008dfe <__match+0x12>
 8008df8:	6003      	str	r3, [r0, #0]
 8008dfa:	2001      	movs	r0, #1
 8008dfc:	bd30      	pop	{r4, r5, pc}
 8008dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e02:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008e06:	2d19      	cmp	r5, #25
 8008e08:	bf98      	it	ls
 8008e0a:	3220      	addls	r2, #32
 8008e0c:	42a2      	cmp	r2, r4
 8008e0e:	d0f0      	beq.n	8008df2 <__match+0x6>
 8008e10:	2000      	movs	r0, #0
 8008e12:	e7f3      	b.n	8008dfc <__match+0x10>

08008e14 <__hexnan>:
 8008e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e18:	2500      	movs	r5, #0
 8008e1a:	680b      	ldr	r3, [r1, #0]
 8008e1c:	4682      	mov	sl, r0
 8008e1e:	115e      	asrs	r6, r3, #5
 8008e20:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e24:	f013 031f 	ands.w	r3, r3, #31
 8008e28:	bf18      	it	ne
 8008e2a:	3604      	addne	r6, #4
 8008e2c:	1f37      	subs	r7, r6, #4
 8008e2e:	4690      	mov	r8, r2
 8008e30:	46b9      	mov	r9, r7
 8008e32:	463c      	mov	r4, r7
 8008e34:	46ab      	mov	fp, r5
 8008e36:	b087      	sub	sp, #28
 8008e38:	6801      	ldr	r1, [r0, #0]
 8008e3a:	9301      	str	r3, [sp, #4]
 8008e3c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e40:	9502      	str	r5, [sp, #8]
 8008e42:	784a      	ldrb	r2, [r1, #1]
 8008e44:	1c4b      	adds	r3, r1, #1
 8008e46:	9303      	str	r3, [sp, #12]
 8008e48:	b342      	cbz	r2, 8008e9c <__hexnan+0x88>
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	9105      	str	r1, [sp, #20]
 8008e4e:	9204      	str	r2, [sp, #16]
 8008e50:	f7ff fd95 	bl	800897e <__hexdig_fun>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d151      	bne.n	8008efc <__hexnan+0xe8>
 8008e58:	9a04      	ldr	r2, [sp, #16]
 8008e5a:	9905      	ldr	r1, [sp, #20]
 8008e5c:	2a20      	cmp	r2, #32
 8008e5e:	d818      	bhi.n	8008e92 <__hexnan+0x7e>
 8008e60:	9b02      	ldr	r3, [sp, #8]
 8008e62:	459b      	cmp	fp, r3
 8008e64:	dd13      	ble.n	8008e8e <__hexnan+0x7a>
 8008e66:	454c      	cmp	r4, r9
 8008e68:	d206      	bcs.n	8008e78 <__hexnan+0x64>
 8008e6a:	2d07      	cmp	r5, #7
 8008e6c:	dc04      	bgt.n	8008e78 <__hexnan+0x64>
 8008e6e:	462a      	mov	r2, r5
 8008e70:	4649      	mov	r1, r9
 8008e72:	4620      	mov	r0, r4
 8008e74:	f7ff ffa8 	bl	8008dc8 <L_shift>
 8008e78:	4544      	cmp	r4, r8
 8008e7a:	d952      	bls.n	8008f22 <__hexnan+0x10e>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f1a4 0904 	sub.w	r9, r4, #4
 8008e82:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e86:	461d      	mov	r5, r3
 8008e88:	464c      	mov	r4, r9
 8008e8a:	f8cd b008 	str.w	fp, [sp, #8]
 8008e8e:	9903      	ldr	r1, [sp, #12]
 8008e90:	e7d7      	b.n	8008e42 <__hexnan+0x2e>
 8008e92:	2a29      	cmp	r2, #41	@ 0x29
 8008e94:	d157      	bne.n	8008f46 <__hexnan+0x132>
 8008e96:	3102      	adds	r1, #2
 8008e98:	f8ca 1000 	str.w	r1, [sl]
 8008e9c:	f1bb 0f00 	cmp.w	fp, #0
 8008ea0:	d051      	beq.n	8008f46 <__hexnan+0x132>
 8008ea2:	454c      	cmp	r4, r9
 8008ea4:	d206      	bcs.n	8008eb4 <__hexnan+0xa0>
 8008ea6:	2d07      	cmp	r5, #7
 8008ea8:	dc04      	bgt.n	8008eb4 <__hexnan+0xa0>
 8008eaa:	462a      	mov	r2, r5
 8008eac:	4649      	mov	r1, r9
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f7ff ff8a 	bl	8008dc8 <L_shift>
 8008eb4:	4544      	cmp	r4, r8
 8008eb6:	d936      	bls.n	8008f26 <__hexnan+0x112>
 8008eb8:	4623      	mov	r3, r4
 8008eba:	f1a8 0204 	sub.w	r2, r8, #4
 8008ebe:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ec2:	429f      	cmp	r7, r3
 8008ec4:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ec8:	d2f9      	bcs.n	8008ebe <__hexnan+0xaa>
 8008eca:	1b3b      	subs	r3, r7, r4
 8008ecc:	f023 0303 	bic.w	r3, r3, #3
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	3401      	adds	r4, #1
 8008ed4:	3e03      	subs	r6, #3
 8008ed6:	42b4      	cmp	r4, r6
 8008ed8:	bf88      	it	hi
 8008eda:	2304      	movhi	r3, #4
 8008edc:	2200      	movs	r2, #0
 8008ede:	4443      	add	r3, r8
 8008ee0:	f843 2b04 	str.w	r2, [r3], #4
 8008ee4:	429f      	cmp	r7, r3
 8008ee6:	d2fb      	bcs.n	8008ee0 <__hexnan+0xcc>
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	b91b      	cbnz	r3, 8008ef4 <__hexnan+0xe0>
 8008eec:	4547      	cmp	r7, r8
 8008eee:	d128      	bne.n	8008f42 <__hexnan+0x12e>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	2005      	movs	r0, #5
 8008ef6:	b007      	add	sp, #28
 8008ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efc:	3501      	adds	r5, #1
 8008efe:	2d08      	cmp	r5, #8
 8008f00:	f10b 0b01 	add.w	fp, fp, #1
 8008f04:	dd06      	ble.n	8008f14 <__hexnan+0x100>
 8008f06:	4544      	cmp	r4, r8
 8008f08:	d9c1      	bls.n	8008e8e <__hexnan+0x7a>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2501      	movs	r5, #1
 8008f0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f12:	3c04      	subs	r4, #4
 8008f14:	6822      	ldr	r2, [r4, #0]
 8008f16:	f000 000f 	and.w	r0, r0, #15
 8008f1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f1e:	6020      	str	r0, [r4, #0]
 8008f20:	e7b5      	b.n	8008e8e <__hexnan+0x7a>
 8008f22:	2508      	movs	r5, #8
 8008f24:	e7b3      	b.n	8008e8e <__hexnan+0x7a>
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0dd      	beq.n	8008ee8 <__hexnan+0xd4>
 8008f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f30:	f1c3 0320 	rsb	r3, r3, #32
 8008f34:	40da      	lsrs	r2, r3
 8008f36:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008f40:	e7d2      	b.n	8008ee8 <__hexnan+0xd4>
 8008f42:	3f04      	subs	r7, #4
 8008f44:	e7d0      	b.n	8008ee8 <__hexnan+0xd4>
 8008f46:	2004      	movs	r0, #4
 8008f48:	e7d5      	b.n	8008ef6 <__hexnan+0xe2>
	...

08008f4c <malloc>:
 8008f4c:	4b02      	ldr	r3, [pc, #8]	@ (8008f58 <malloc+0xc>)
 8008f4e:	4601      	mov	r1, r0
 8008f50:	6818      	ldr	r0, [r3, #0]
 8008f52:	f000 b825 	b.w	8008fa0 <_malloc_r>
 8008f56:	bf00      	nop
 8008f58:	200001a4 	.word	0x200001a4

08008f5c <sbrk_aligned>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	4e0f      	ldr	r6, [pc, #60]	@ (8008f9c <sbrk_aligned+0x40>)
 8008f60:	460c      	mov	r4, r1
 8008f62:	6831      	ldr	r1, [r6, #0]
 8008f64:	4605      	mov	r5, r0
 8008f66:	b911      	cbnz	r1, 8008f6e <sbrk_aligned+0x12>
 8008f68:	f000 ff90 	bl	8009e8c <_sbrk_r>
 8008f6c:	6030      	str	r0, [r6, #0]
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 ff8b 	bl	8009e8c <_sbrk_r>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	d103      	bne.n	8008f82 <sbrk_aligned+0x26>
 8008f7a:	f04f 34ff 	mov.w	r4, #4294967295
 8008f7e:	4620      	mov	r0, r4
 8008f80:	bd70      	pop	{r4, r5, r6, pc}
 8008f82:	1cc4      	adds	r4, r0, #3
 8008f84:	f024 0403 	bic.w	r4, r4, #3
 8008f88:	42a0      	cmp	r0, r4
 8008f8a:	d0f8      	beq.n	8008f7e <sbrk_aligned+0x22>
 8008f8c:	1a21      	subs	r1, r4, r0
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f000 ff7c 	bl	8009e8c <_sbrk_r>
 8008f94:	3001      	adds	r0, #1
 8008f96:	d1f2      	bne.n	8008f7e <sbrk_aligned+0x22>
 8008f98:	e7ef      	b.n	8008f7a <sbrk_aligned+0x1e>
 8008f9a:	bf00      	nop
 8008f9c:	20000788 	.word	0x20000788

08008fa0 <_malloc_r>:
 8008fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa4:	1ccd      	adds	r5, r1, #3
 8008fa6:	f025 0503 	bic.w	r5, r5, #3
 8008faa:	3508      	adds	r5, #8
 8008fac:	2d0c      	cmp	r5, #12
 8008fae:	bf38      	it	cc
 8008fb0:	250c      	movcc	r5, #12
 8008fb2:	2d00      	cmp	r5, #0
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	db01      	blt.n	8008fbc <_malloc_r+0x1c>
 8008fb8:	42a9      	cmp	r1, r5
 8008fba:	d904      	bls.n	8008fc6 <_malloc_r+0x26>
 8008fbc:	230c      	movs	r3, #12
 8008fbe:	6033      	str	r3, [r6, #0]
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800909c <_malloc_r+0xfc>
 8008fca:	f000 f87b 	bl	80090c4 <__malloc_lock>
 8008fce:	f8d8 3000 	ldr.w	r3, [r8]
 8008fd2:	461c      	mov	r4, r3
 8008fd4:	bb44      	cbnz	r4, 8009028 <_malloc_r+0x88>
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7ff ffbf 	bl	8008f5c <sbrk_aligned>
 8008fde:	1c43      	adds	r3, r0, #1
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	d158      	bne.n	8009096 <_malloc_r+0xf6>
 8008fe4:	f8d8 4000 	ldr.w	r4, [r8]
 8008fe8:	4627      	mov	r7, r4
 8008fea:	2f00      	cmp	r7, #0
 8008fec:	d143      	bne.n	8009076 <_malloc_r+0xd6>
 8008fee:	2c00      	cmp	r4, #0
 8008ff0:	d04b      	beq.n	800908a <_malloc_r+0xea>
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	4639      	mov	r1, r7
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	eb04 0903 	add.w	r9, r4, r3
 8008ffc:	f000 ff46 	bl	8009e8c <_sbrk_r>
 8009000:	4581      	cmp	r9, r0
 8009002:	d142      	bne.n	800908a <_malloc_r+0xea>
 8009004:	6821      	ldr	r1, [r4, #0]
 8009006:	4630      	mov	r0, r6
 8009008:	1a6d      	subs	r5, r5, r1
 800900a:	4629      	mov	r1, r5
 800900c:	f7ff ffa6 	bl	8008f5c <sbrk_aligned>
 8009010:	3001      	adds	r0, #1
 8009012:	d03a      	beq.n	800908a <_malloc_r+0xea>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	442b      	add	r3, r5
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	f8d8 3000 	ldr.w	r3, [r8]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	bb62      	cbnz	r2, 800907c <_malloc_r+0xdc>
 8009022:	f8c8 7000 	str.w	r7, [r8]
 8009026:	e00f      	b.n	8009048 <_malloc_r+0xa8>
 8009028:	6822      	ldr	r2, [r4, #0]
 800902a:	1b52      	subs	r2, r2, r5
 800902c:	d420      	bmi.n	8009070 <_malloc_r+0xd0>
 800902e:	2a0b      	cmp	r2, #11
 8009030:	d917      	bls.n	8009062 <_malloc_r+0xc2>
 8009032:	1961      	adds	r1, r4, r5
 8009034:	42a3      	cmp	r3, r4
 8009036:	6025      	str	r5, [r4, #0]
 8009038:	bf18      	it	ne
 800903a:	6059      	strne	r1, [r3, #4]
 800903c:	6863      	ldr	r3, [r4, #4]
 800903e:	bf08      	it	eq
 8009040:	f8c8 1000 	streq.w	r1, [r8]
 8009044:	5162      	str	r2, [r4, r5]
 8009046:	604b      	str	r3, [r1, #4]
 8009048:	4630      	mov	r0, r6
 800904a:	f000 f841 	bl	80090d0 <__malloc_unlock>
 800904e:	f104 000b 	add.w	r0, r4, #11
 8009052:	1d23      	adds	r3, r4, #4
 8009054:	f020 0007 	bic.w	r0, r0, #7
 8009058:	1ac2      	subs	r2, r0, r3
 800905a:	bf1c      	itt	ne
 800905c:	1a1b      	subne	r3, r3, r0
 800905e:	50a3      	strne	r3, [r4, r2]
 8009060:	e7af      	b.n	8008fc2 <_malloc_r+0x22>
 8009062:	6862      	ldr	r2, [r4, #4]
 8009064:	42a3      	cmp	r3, r4
 8009066:	bf0c      	ite	eq
 8009068:	f8c8 2000 	streq.w	r2, [r8]
 800906c:	605a      	strne	r2, [r3, #4]
 800906e:	e7eb      	b.n	8009048 <_malloc_r+0xa8>
 8009070:	4623      	mov	r3, r4
 8009072:	6864      	ldr	r4, [r4, #4]
 8009074:	e7ae      	b.n	8008fd4 <_malloc_r+0x34>
 8009076:	463c      	mov	r4, r7
 8009078:	687f      	ldr	r7, [r7, #4]
 800907a:	e7b6      	b.n	8008fea <_malloc_r+0x4a>
 800907c:	461a      	mov	r2, r3
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	42a3      	cmp	r3, r4
 8009082:	d1fb      	bne.n	800907c <_malloc_r+0xdc>
 8009084:	2300      	movs	r3, #0
 8009086:	6053      	str	r3, [r2, #4]
 8009088:	e7de      	b.n	8009048 <_malloc_r+0xa8>
 800908a:	230c      	movs	r3, #12
 800908c:	4630      	mov	r0, r6
 800908e:	6033      	str	r3, [r6, #0]
 8009090:	f000 f81e 	bl	80090d0 <__malloc_unlock>
 8009094:	e794      	b.n	8008fc0 <_malloc_r+0x20>
 8009096:	6005      	str	r5, [r0, #0]
 8009098:	e7d6      	b.n	8009048 <_malloc_r+0xa8>
 800909a:	bf00      	nop
 800909c:	2000078c 	.word	0x2000078c

080090a0 <__ascii_mbtowc>:
 80090a0:	b082      	sub	sp, #8
 80090a2:	b901      	cbnz	r1, 80090a6 <__ascii_mbtowc+0x6>
 80090a4:	a901      	add	r1, sp, #4
 80090a6:	b142      	cbz	r2, 80090ba <__ascii_mbtowc+0x1a>
 80090a8:	b14b      	cbz	r3, 80090be <__ascii_mbtowc+0x1e>
 80090aa:	7813      	ldrb	r3, [r2, #0]
 80090ac:	600b      	str	r3, [r1, #0]
 80090ae:	7812      	ldrb	r2, [r2, #0]
 80090b0:	1e10      	subs	r0, r2, #0
 80090b2:	bf18      	it	ne
 80090b4:	2001      	movne	r0, #1
 80090b6:	b002      	add	sp, #8
 80090b8:	4770      	bx	lr
 80090ba:	4610      	mov	r0, r2
 80090bc:	e7fb      	b.n	80090b6 <__ascii_mbtowc+0x16>
 80090be:	f06f 0001 	mvn.w	r0, #1
 80090c2:	e7f8      	b.n	80090b6 <__ascii_mbtowc+0x16>

080090c4 <__malloc_lock>:
 80090c4:	4801      	ldr	r0, [pc, #4]	@ (80090cc <__malloc_lock+0x8>)
 80090c6:	f7fe bd16 	b.w	8007af6 <__retarget_lock_acquire_recursive>
 80090ca:	bf00      	nop
 80090cc:	20000784 	.word	0x20000784

080090d0 <__malloc_unlock>:
 80090d0:	4801      	ldr	r0, [pc, #4]	@ (80090d8 <__malloc_unlock+0x8>)
 80090d2:	f7fe bd11 	b.w	8007af8 <__retarget_lock_release_recursive>
 80090d6:	bf00      	nop
 80090d8:	20000784 	.word	0x20000784

080090dc <_Balloc>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	69c6      	ldr	r6, [r0, #28]
 80090e0:	4604      	mov	r4, r0
 80090e2:	460d      	mov	r5, r1
 80090e4:	b976      	cbnz	r6, 8009104 <_Balloc+0x28>
 80090e6:	2010      	movs	r0, #16
 80090e8:	f7ff ff30 	bl	8008f4c <malloc>
 80090ec:	4602      	mov	r2, r0
 80090ee:	61e0      	str	r0, [r4, #28]
 80090f0:	b920      	cbnz	r0, 80090fc <_Balloc+0x20>
 80090f2:	216b      	movs	r1, #107	@ 0x6b
 80090f4:	4b17      	ldr	r3, [pc, #92]	@ (8009154 <_Balloc+0x78>)
 80090f6:	4818      	ldr	r0, [pc, #96]	@ (8009158 <_Balloc+0x7c>)
 80090f8:	f7fe fd2a 	bl	8007b50 <__assert_func>
 80090fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009100:	6006      	str	r6, [r0, #0]
 8009102:	60c6      	str	r6, [r0, #12]
 8009104:	69e6      	ldr	r6, [r4, #28]
 8009106:	68f3      	ldr	r3, [r6, #12]
 8009108:	b183      	cbz	r3, 800912c <_Balloc+0x50>
 800910a:	69e3      	ldr	r3, [r4, #28]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009112:	b9b8      	cbnz	r0, 8009144 <_Balloc+0x68>
 8009114:	2101      	movs	r1, #1
 8009116:	fa01 f605 	lsl.w	r6, r1, r5
 800911a:	1d72      	adds	r2, r6, #5
 800911c:	4620      	mov	r0, r4
 800911e:	0092      	lsls	r2, r2, #2
 8009120:	f000 fecb 	bl	8009eba <_calloc_r>
 8009124:	b160      	cbz	r0, 8009140 <_Balloc+0x64>
 8009126:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800912a:	e00e      	b.n	800914a <_Balloc+0x6e>
 800912c:	2221      	movs	r2, #33	@ 0x21
 800912e:	2104      	movs	r1, #4
 8009130:	4620      	mov	r0, r4
 8009132:	f000 fec2 	bl	8009eba <_calloc_r>
 8009136:	69e3      	ldr	r3, [r4, #28]
 8009138:	60f0      	str	r0, [r6, #12]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e4      	bne.n	800910a <_Balloc+0x2e>
 8009140:	2000      	movs	r0, #0
 8009142:	bd70      	pop	{r4, r5, r6, pc}
 8009144:	6802      	ldr	r2, [r0, #0]
 8009146:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800914a:	2300      	movs	r3, #0
 800914c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009150:	e7f7      	b.n	8009142 <_Balloc+0x66>
 8009152:	bf00      	nop
 8009154:	0800a674 	.word	0x0800a674
 8009158:	0800a7ff 	.word	0x0800a7ff

0800915c <_Bfree>:
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	69c6      	ldr	r6, [r0, #28]
 8009160:	4605      	mov	r5, r0
 8009162:	460c      	mov	r4, r1
 8009164:	b976      	cbnz	r6, 8009184 <_Bfree+0x28>
 8009166:	2010      	movs	r0, #16
 8009168:	f7ff fef0 	bl	8008f4c <malloc>
 800916c:	4602      	mov	r2, r0
 800916e:	61e8      	str	r0, [r5, #28]
 8009170:	b920      	cbnz	r0, 800917c <_Bfree+0x20>
 8009172:	218f      	movs	r1, #143	@ 0x8f
 8009174:	4b08      	ldr	r3, [pc, #32]	@ (8009198 <_Bfree+0x3c>)
 8009176:	4809      	ldr	r0, [pc, #36]	@ (800919c <_Bfree+0x40>)
 8009178:	f7fe fcea 	bl	8007b50 <__assert_func>
 800917c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009180:	6006      	str	r6, [r0, #0]
 8009182:	60c6      	str	r6, [r0, #12]
 8009184:	b13c      	cbz	r4, 8009196 <_Bfree+0x3a>
 8009186:	69eb      	ldr	r3, [r5, #28]
 8009188:	6862      	ldr	r2, [r4, #4]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009190:	6021      	str	r1, [r4, #0]
 8009192:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009196:	bd70      	pop	{r4, r5, r6, pc}
 8009198:	0800a674 	.word	0x0800a674
 800919c:	0800a7ff 	.word	0x0800a7ff

080091a0 <__multadd>:
 80091a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a4:	4607      	mov	r7, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	461e      	mov	r6, r3
 80091aa:	2000      	movs	r0, #0
 80091ac:	690d      	ldr	r5, [r1, #16]
 80091ae:	f101 0c14 	add.w	ip, r1, #20
 80091b2:	f8dc 3000 	ldr.w	r3, [ip]
 80091b6:	3001      	adds	r0, #1
 80091b8:	b299      	uxth	r1, r3
 80091ba:	fb02 6101 	mla	r1, r2, r1, r6
 80091be:	0c1e      	lsrs	r6, r3, #16
 80091c0:	0c0b      	lsrs	r3, r1, #16
 80091c2:	fb02 3306 	mla	r3, r2, r6, r3
 80091c6:	b289      	uxth	r1, r1
 80091c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091cc:	4285      	cmp	r5, r0
 80091ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091d2:	f84c 1b04 	str.w	r1, [ip], #4
 80091d6:	dcec      	bgt.n	80091b2 <__multadd+0x12>
 80091d8:	b30e      	cbz	r6, 800921e <__multadd+0x7e>
 80091da:	68a3      	ldr	r3, [r4, #8]
 80091dc:	42ab      	cmp	r3, r5
 80091de:	dc19      	bgt.n	8009214 <__multadd+0x74>
 80091e0:	6861      	ldr	r1, [r4, #4]
 80091e2:	4638      	mov	r0, r7
 80091e4:	3101      	adds	r1, #1
 80091e6:	f7ff ff79 	bl	80090dc <_Balloc>
 80091ea:	4680      	mov	r8, r0
 80091ec:	b928      	cbnz	r0, 80091fa <__multadd+0x5a>
 80091ee:	4602      	mov	r2, r0
 80091f0:	21ba      	movs	r1, #186	@ 0xba
 80091f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009224 <__multadd+0x84>)
 80091f4:	480c      	ldr	r0, [pc, #48]	@ (8009228 <__multadd+0x88>)
 80091f6:	f7fe fcab 	bl	8007b50 <__assert_func>
 80091fa:	6922      	ldr	r2, [r4, #16]
 80091fc:	f104 010c 	add.w	r1, r4, #12
 8009200:	3202      	adds	r2, #2
 8009202:	0092      	lsls	r2, r2, #2
 8009204:	300c      	adds	r0, #12
 8009206:	f7fe fc8e 	bl	8007b26 <memcpy>
 800920a:	4621      	mov	r1, r4
 800920c:	4638      	mov	r0, r7
 800920e:	f7ff ffa5 	bl	800915c <_Bfree>
 8009212:	4644      	mov	r4, r8
 8009214:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009218:	3501      	adds	r5, #1
 800921a:	615e      	str	r6, [r3, #20]
 800921c:	6125      	str	r5, [r4, #16]
 800921e:	4620      	mov	r0, r4
 8009220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009224:	0800a78e 	.word	0x0800a78e
 8009228:	0800a7ff 	.word	0x0800a7ff

0800922c <__s2b>:
 800922c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009230:	4615      	mov	r5, r2
 8009232:	2209      	movs	r2, #9
 8009234:	461f      	mov	r7, r3
 8009236:	3308      	adds	r3, #8
 8009238:	460c      	mov	r4, r1
 800923a:	fb93 f3f2 	sdiv	r3, r3, r2
 800923e:	4606      	mov	r6, r0
 8009240:	2201      	movs	r2, #1
 8009242:	2100      	movs	r1, #0
 8009244:	429a      	cmp	r2, r3
 8009246:	db09      	blt.n	800925c <__s2b+0x30>
 8009248:	4630      	mov	r0, r6
 800924a:	f7ff ff47 	bl	80090dc <_Balloc>
 800924e:	b940      	cbnz	r0, 8009262 <__s2b+0x36>
 8009250:	4602      	mov	r2, r0
 8009252:	21d3      	movs	r1, #211	@ 0xd3
 8009254:	4b18      	ldr	r3, [pc, #96]	@ (80092b8 <__s2b+0x8c>)
 8009256:	4819      	ldr	r0, [pc, #100]	@ (80092bc <__s2b+0x90>)
 8009258:	f7fe fc7a 	bl	8007b50 <__assert_func>
 800925c:	0052      	lsls	r2, r2, #1
 800925e:	3101      	adds	r1, #1
 8009260:	e7f0      	b.n	8009244 <__s2b+0x18>
 8009262:	9b08      	ldr	r3, [sp, #32]
 8009264:	2d09      	cmp	r5, #9
 8009266:	6143      	str	r3, [r0, #20]
 8009268:	f04f 0301 	mov.w	r3, #1
 800926c:	6103      	str	r3, [r0, #16]
 800926e:	dd16      	ble.n	800929e <__s2b+0x72>
 8009270:	f104 0909 	add.w	r9, r4, #9
 8009274:	46c8      	mov	r8, r9
 8009276:	442c      	add	r4, r5
 8009278:	f818 3b01 	ldrb.w	r3, [r8], #1
 800927c:	4601      	mov	r1, r0
 800927e:	220a      	movs	r2, #10
 8009280:	4630      	mov	r0, r6
 8009282:	3b30      	subs	r3, #48	@ 0x30
 8009284:	f7ff ff8c 	bl	80091a0 <__multadd>
 8009288:	45a0      	cmp	r8, r4
 800928a:	d1f5      	bne.n	8009278 <__s2b+0x4c>
 800928c:	f1a5 0408 	sub.w	r4, r5, #8
 8009290:	444c      	add	r4, r9
 8009292:	1b2d      	subs	r5, r5, r4
 8009294:	1963      	adds	r3, r4, r5
 8009296:	42bb      	cmp	r3, r7
 8009298:	db04      	blt.n	80092a4 <__s2b+0x78>
 800929a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800929e:	2509      	movs	r5, #9
 80092a0:	340a      	adds	r4, #10
 80092a2:	e7f6      	b.n	8009292 <__s2b+0x66>
 80092a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092a8:	4601      	mov	r1, r0
 80092aa:	220a      	movs	r2, #10
 80092ac:	4630      	mov	r0, r6
 80092ae:	3b30      	subs	r3, #48	@ 0x30
 80092b0:	f7ff ff76 	bl	80091a0 <__multadd>
 80092b4:	e7ee      	b.n	8009294 <__s2b+0x68>
 80092b6:	bf00      	nop
 80092b8:	0800a78e 	.word	0x0800a78e
 80092bc:	0800a7ff 	.word	0x0800a7ff

080092c0 <__hi0bits>:
 80092c0:	4603      	mov	r3, r0
 80092c2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80092c6:	bf3a      	itte	cc
 80092c8:	0403      	lslcc	r3, r0, #16
 80092ca:	2010      	movcc	r0, #16
 80092cc:	2000      	movcs	r0, #0
 80092ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092d2:	bf3c      	itt	cc
 80092d4:	021b      	lslcc	r3, r3, #8
 80092d6:	3008      	addcc	r0, #8
 80092d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092dc:	bf3c      	itt	cc
 80092de:	011b      	lslcc	r3, r3, #4
 80092e0:	3004      	addcc	r0, #4
 80092e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092e6:	bf3c      	itt	cc
 80092e8:	009b      	lslcc	r3, r3, #2
 80092ea:	3002      	addcc	r0, #2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	db05      	blt.n	80092fc <__hi0bits+0x3c>
 80092f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80092f4:	f100 0001 	add.w	r0, r0, #1
 80092f8:	bf08      	it	eq
 80092fa:	2020      	moveq	r0, #32
 80092fc:	4770      	bx	lr

080092fe <__lo0bits>:
 80092fe:	6803      	ldr	r3, [r0, #0]
 8009300:	4602      	mov	r2, r0
 8009302:	f013 0007 	ands.w	r0, r3, #7
 8009306:	d00b      	beq.n	8009320 <__lo0bits+0x22>
 8009308:	07d9      	lsls	r1, r3, #31
 800930a:	d421      	bmi.n	8009350 <__lo0bits+0x52>
 800930c:	0798      	lsls	r0, r3, #30
 800930e:	bf49      	itett	mi
 8009310:	085b      	lsrmi	r3, r3, #1
 8009312:	089b      	lsrpl	r3, r3, #2
 8009314:	2001      	movmi	r0, #1
 8009316:	6013      	strmi	r3, [r2, #0]
 8009318:	bf5c      	itt	pl
 800931a:	2002      	movpl	r0, #2
 800931c:	6013      	strpl	r3, [r2, #0]
 800931e:	4770      	bx	lr
 8009320:	b299      	uxth	r1, r3
 8009322:	b909      	cbnz	r1, 8009328 <__lo0bits+0x2a>
 8009324:	2010      	movs	r0, #16
 8009326:	0c1b      	lsrs	r3, r3, #16
 8009328:	b2d9      	uxtb	r1, r3
 800932a:	b909      	cbnz	r1, 8009330 <__lo0bits+0x32>
 800932c:	3008      	adds	r0, #8
 800932e:	0a1b      	lsrs	r3, r3, #8
 8009330:	0719      	lsls	r1, r3, #28
 8009332:	bf04      	itt	eq
 8009334:	091b      	lsreq	r3, r3, #4
 8009336:	3004      	addeq	r0, #4
 8009338:	0799      	lsls	r1, r3, #30
 800933a:	bf04      	itt	eq
 800933c:	089b      	lsreq	r3, r3, #2
 800933e:	3002      	addeq	r0, #2
 8009340:	07d9      	lsls	r1, r3, #31
 8009342:	d403      	bmi.n	800934c <__lo0bits+0x4e>
 8009344:	085b      	lsrs	r3, r3, #1
 8009346:	f100 0001 	add.w	r0, r0, #1
 800934a:	d003      	beq.n	8009354 <__lo0bits+0x56>
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	4770      	bx	lr
 8009350:	2000      	movs	r0, #0
 8009352:	4770      	bx	lr
 8009354:	2020      	movs	r0, #32
 8009356:	4770      	bx	lr

08009358 <__i2b>:
 8009358:	b510      	push	{r4, lr}
 800935a:	460c      	mov	r4, r1
 800935c:	2101      	movs	r1, #1
 800935e:	f7ff febd 	bl	80090dc <_Balloc>
 8009362:	4602      	mov	r2, r0
 8009364:	b928      	cbnz	r0, 8009372 <__i2b+0x1a>
 8009366:	f240 1145 	movw	r1, #325	@ 0x145
 800936a:	4b04      	ldr	r3, [pc, #16]	@ (800937c <__i2b+0x24>)
 800936c:	4804      	ldr	r0, [pc, #16]	@ (8009380 <__i2b+0x28>)
 800936e:	f7fe fbef 	bl	8007b50 <__assert_func>
 8009372:	2301      	movs	r3, #1
 8009374:	6144      	str	r4, [r0, #20]
 8009376:	6103      	str	r3, [r0, #16]
 8009378:	bd10      	pop	{r4, pc}
 800937a:	bf00      	nop
 800937c:	0800a78e 	.word	0x0800a78e
 8009380:	0800a7ff 	.word	0x0800a7ff

08009384 <__multiply>:
 8009384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009388:	4617      	mov	r7, r2
 800938a:	690a      	ldr	r2, [r1, #16]
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	4689      	mov	r9, r1
 8009390:	429a      	cmp	r2, r3
 8009392:	bfa2      	ittt	ge
 8009394:	463b      	movge	r3, r7
 8009396:	460f      	movge	r7, r1
 8009398:	4699      	movge	r9, r3
 800939a:	693d      	ldr	r5, [r7, #16]
 800939c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	6879      	ldr	r1, [r7, #4]
 80093a4:	eb05 060a 	add.w	r6, r5, sl
 80093a8:	42b3      	cmp	r3, r6
 80093aa:	b085      	sub	sp, #20
 80093ac:	bfb8      	it	lt
 80093ae:	3101      	addlt	r1, #1
 80093b0:	f7ff fe94 	bl	80090dc <_Balloc>
 80093b4:	b930      	cbnz	r0, 80093c4 <__multiply+0x40>
 80093b6:	4602      	mov	r2, r0
 80093b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80093bc:	4b40      	ldr	r3, [pc, #256]	@ (80094c0 <__multiply+0x13c>)
 80093be:	4841      	ldr	r0, [pc, #260]	@ (80094c4 <__multiply+0x140>)
 80093c0:	f7fe fbc6 	bl	8007b50 <__assert_func>
 80093c4:	f100 0414 	add.w	r4, r0, #20
 80093c8:	4623      	mov	r3, r4
 80093ca:	2200      	movs	r2, #0
 80093cc:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80093d0:	4573      	cmp	r3, lr
 80093d2:	d320      	bcc.n	8009416 <__multiply+0x92>
 80093d4:	f107 0814 	add.w	r8, r7, #20
 80093d8:	f109 0114 	add.w	r1, r9, #20
 80093dc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80093e0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80093e4:	9302      	str	r3, [sp, #8]
 80093e6:	1beb      	subs	r3, r5, r7
 80093e8:	3b15      	subs	r3, #21
 80093ea:	f023 0303 	bic.w	r3, r3, #3
 80093ee:	3304      	adds	r3, #4
 80093f0:	3715      	adds	r7, #21
 80093f2:	42bd      	cmp	r5, r7
 80093f4:	bf38      	it	cc
 80093f6:	2304      	movcc	r3, #4
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	9b02      	ldr	r3, [sp, #8]
 80093fc:	9103      	str	r1, [sp, #12]
 80093fe:	428b      	cmp	r3, r1
 8009400:	d80c      	bhi.n	800941c <__multiply+0x98>
 8009402:	2e00      	cmp	r6, #0
 8009404:	dd03      	ble.n	800940e <__multiply+0x8a>
 8009406:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800940a:	2b00      	cmp	r3, #0
 800940c:	d055      	beq.n	80094ba <__multiply+0x136>
 800940e:	6106      	str	r6, [r0, #16]
 8009410:	b005      	add	sp, #20
 8009412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009416:	f843 2b04 	str.w	r2, [r3], #4
 800941a:	e7d9      	b.n	80093d0 <__multiply+0x4c>
 800941c:	f8b1 a000 	ldrh.w	sl, [r1]
 8009420:	f1ba 0f00 	cmp.w	sl, #0
 8009424:	d01f      	beq.n	8009466 <__multiply+0xe2>
 8009426:	46c4      	mov	ip, r8
 8009428:	46a1      	mov	r9, r4
 800942a:	2700      	movs	r7, #0
 800942c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009430:	f8d9 3000 	ldr.w	r3, [r9]
 8009434:	fa1f fb82 	uxth.w	fp, r2
 8009438:	b29b      	uxth	r3, r3
 800943a:	fb0a 330b 	mla	r3, sl, fp, r3
 800943e:	443b      	add	r3, r7
 8009440:	f8d9 7000 	ldr.w	r7, [r9]
 8009444:	0c12      	lsrs	r2, r2, #16
 8009446:	0c3f      	lsrs	r7, r7, #16
 8009448:	fb0a 7202 	mla	r2, sl, r2, r7
 800944c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009450:	b29b      	uxth	r3, r3
 8009452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009456:	4565      	cmp	r5, ip
 8009458:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800945c:	f849 3b04 	str.w	r3, [r9], #4
 8009460:	d8e4      	bhi.n	800942c <__multiply+0xa8>
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	50e7      	str	r7, [r4, r3]
 8009466:	9b03      	ldr	r3, [sp, #12]
 8009468:	3104      	adds	r1, #4
 800946a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800946e:	f1b9 0f00 	cmp.w	r9, #0
 8009472:	d020      	beq.n	80094b6 <__multiply+0x132>
 8009474:	4647      	mov	r7, r8
 8009476:	46a4      	mov	ip, r4
 8009478:	f04f 0a00 	mov.w	sl, #0
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	f8b7 b000 	ldrh.w	fp, [r7]
 8009482:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009486:	b29b      	uxth	r3, r3
 8009488:	fb09 220b 	mla	r2, r9, fp, r2
 800948c:	4452      	add	r2, sl
 800948e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009492:	f84c 3b04 	str.w	r3, [ip], #4
 8009496:	f857 3b04 	ldr.w	r3, [r7], #4
 800949a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800949e:	f8bc 3000 	ldrh.w	r3, [ip]
 80094a2:	42bd      	cmp	r5, r7
 80094a4:	fb09 330a 	mla	r3, r9, sl, r3
 80094a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80094ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094b0:	d8e5      	bhi.n	800947e <__multiply+0xfa>
 80094b2:	9a01      	ldr	r2, [sp, #4]
 80094b4:	50a3      	str	r3, [r4, r2]
 80094b6:	3404      	adds	r4, #4
 80094b8:	e79f      	b.n	80093fa <__multiply+0x76>
 80094ba:	3e01      	subs	r6, #1
 80094bc:	e7a1      	b.n	8009402 <__multiply+0x7e>
 80094be:	bf00      	nop
 80094c0:	0800a78e 	.word	0x0800a78e
 80094c4:	0800a7ff 	.word	0x0800a7ff

080094c8 <__pow5mult>:
 80094c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094cc:	4615      	mov	r5, r2
 80094ce:	f012 0203 	ands.w	r2, r2, #3
 80094d2:	4607      	mov	r7, r0
 80094d4:	460e      	mov	r6, r1
 80094d6:	d007      	beq.n	80094e8 <__pow5mult+0x20>
 80094d8:	4c25      	ldr	r4, [pc, #148]	@ (8009570 <__pow5mult+0xa8>)
 80094da:	3a01      	subs	r2, #1
 80094dc:	2300      	movs	r3, #0
 80094de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094e2:	f7ff fe5d 	bl	80091a0 <__multadd>
 80094e6:	4606      	mov	r6, r0
 80094e8:	10ad      	asrs	r5, r5, #2
 80094ea:	d03d      	beq.n	8009568 <__pow5mult+0xa0>
 80094ec:	69fc      	ldr	r4, [r7, #28]
 80094ee:	b97c      	cbnz	r4, 8009510 <__pow5mult+0x48>
 80094f0:	2010      	movs	r0, #16
 80094f2:	f7ff fd2b 	bl	8008f4c <malloc>
 80094f6:	4602      	mov	r2, r0
 80094f8:	61f8      	str	r0, [r7, #28]
 80094fa:	b928      	cbnz	r0, 8009508 <__pow5mult+0x40>
 80094fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009500:	4b1c      	ldr	r3, [pc, #112]	@ (8009574 <__pow5mult+0xac>)
 8009502:	481d      	ldr	r0, [pc, #116]	@ (8009578 <__pow5mult+0xb0>)
 8009504:	f7fe fb24 	bl	8007b50 <__assert_func>
 8009508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800950c:	6004      	str	r4, [r0, #0]
 800950e:	60c4      	str	r4, [r0, #12]
 8009510:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009518:	b94c      	cbnz	r4, 800952e <__pow5mult+0x66>
 800951a:	f240 2171 	movw	r1, #625	@ 0x271
 800951e:	4638      	mov	r0, r7
 8009520:	f7ff ff1a 	bl	8009358 <__i2b>
 8009524:	2300      	movs	r3, #0
 8009526:	4604      	mov	r4, r0
 8009528:	f8c8 0008 	str.w	r0, [r8, #8]
 800952c:	6003      	str	r3, [r0, #0]
 800952e:	f04f 0900 	mov.w	r9, #0
 8009532:	07eb      	lsls	r3, r5, #31
 8009534:	d50a      	bpl.n	800954c <__pow5mult+0x84>
 8009536:	4631      	mov	r1, r6
 8009538:	4622      	mov	r2, r4
 800953a:	4638      	mov	r0, r7
 800953c:	f7ff ff22 	bl	8009384 <__multiply>
 8009540:	4680      	mov	r8, r0
 8009542:	4631      	mov	r1, r6
 8009544:	4638      	mov	r0, r7
 8009546:	f7ff fe09 	bl	800915c <_Bfree>
 800954a:	4646      	mov	r6, r8
 800954c:	106d      	asrs	r5, r5, #1
 800954e:	d00b      	beq.n	8009568 <__pow5mult+0xa0>
 8009550:	6820      	ldr	r0, [r4, #0]
 8009552:	b938      	cbnz	r0, 8009564 <__pow5mult+0x9c>
 8009554:	4622      	mov	r2, r4
 8009556:	4621      	mov	r1, r4
 8009558:	4638      	mov	r0, r7
 800955a:	f7ff ff13 	bl	8009384 <__multiply>
 800955e:	6020      	str	r0, [r4, #0]
 8009560:	f8c0 9000 	str.w	r9, [r0]
 8009564:	4604      	mov	r4, r0
 8009566:	e7e4      	b.n	8009532 <__pow5mult+0x6a>
 8009568:	4630      	mov	r0, r6
 800956a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800956e:	bf00      	nop
 8009570:	0800a8c0 	.word	0x0800a8c0
 8009574:	0800a674 	.word	0x0800a674
 8009578:	0800a7ff 	.word	0x0800a7ff

0800957c <__lshift>:
 800957c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009580:	460c      	mov	r4, r1
 8009582:	4607      	mov	r7, r0
 8009584:	4691      	mov	r9, r2
 8009586:	6923      	ldr	r3, [r4, #16]
 8009588:	6849      	ldr	r1, [r1, #4]
 800958a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800958e:	68a3      	ldr	r3, [r4, #8]
 8009590:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009594:	f108 0601 	add.w	r6, r8, #1
 8009598:	42b3      	cmp	r3, r6
 800959a:	db0b      	blt.n	80095b4 <__lshift+0x38>
 800959c:	4638      	mov	r0, r7
 800959e:	f7ff fd9d 	bl	80090dc <_Balloc>
 80095a2:	4605      	mov	r5, r0
 80095a4:	b948      	cbnz	r0, 80095ba <__lshift+0x3e>
 80095a6:	4602      	mov	r2, r0
 80095a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80095ac:	4b27      	ldr	r3, [pc, #156]	@ (800964c <__lshift+0xd0>)
 80095ae:	4828      	ldr	r0, [pc, #160]	@ (8009650 <__lshift+0xd4>)
 80095b0:	f7fe face 	bl	8007b50 <__assert_func>
 80095b4:	3101      	adds	r1, #1
 80095b6:	005b      	lsls	r3, r3, #1
 80095b8:	e7ee      	b.n	8009598 <__lshift+0x1c>
 80095ba:	2300      	movs	r3, #0
 80095bc:	f100 0114 	add.w	r1, r0, #20
 80095c0:	f100 0210 	add.w	r2, r0, #16
 80095c4:	4618      	mov	r0, r3
 80095c6:	4553      	cmp	r3, sl
 80095c8:	db33      	blt.n	8009632 <__lshift+0xb6>
 80095ca:	6920      	ldr	r0, [r4, #16]
 80095cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095d0:	f104 0314 	add.w	r3, r4, #20
 80095d4:	f019 091f 	ands.w	r9, r9, #31
 80095d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095e0:	d02b      	beq.n	800963a <__lshift+0xbe>
 80095e2:	468a      	mov	sl, r1
 80095e4:	2200      	movs	r2, #0
 80095e6:	f1c9 0e20 	rsb	lr, r9, #32
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	fa00 f009 	lsl.w	r0, r0, r9
 80095f0:	4310      	orrs	r0, r2
 80095f2:	f84a 0b04 	str.w	r0, [sl], #4
 80095f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095fa:	459c      	cmp	ip, r3
 80095fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009600:	d8f3      	bhi.n	80095ea <__lshift+0x6e>
 8009602:	ebac 0304 	sub.w	r3, ip, r4
 8009606:	3b15      	subs	r3, #21
 8009608:	f023 0303 	bic.w	r3, r3, #3
 800960c:	3304      	adds	r3, #4
 800960e:	f104 0015 	add.w	r0, r4, #21
 8009612:	4560      	cmp	r0, ip
 8009614:	bf88      	it	hi
 8009616:	2304      	movhi	r3, #4
 8009618:	50ca      	str	r2, [r1, r3]
 800961a:	b10a      	cbz	r2, 8009620 <__lshift+0xa4>
 800961c:	f108 0602 	add.w	r6, r8, #2
 8009620:	3e01      	subs	r6, #1
 8009622:	4638      	mov	r0, r7
 8009624:	4621      	mov	r1, r4
 8009626:	612e      	str	r6, [r5, #16]
 8009628:	f7ff fd98 	bl	800915c <_Bfree>
 800962c:	4628      	mov	r0, r5
 800962e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009632:	f842 0f04 	str.w	r0, [r2, #4]!
 8009636:	3301      	adds	r3, #1
 8009638:	e7c5      	b.n	80095c6 <__lshift+0x4a>
 800963a:	3904      	subs	r1, #4
 800963c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009640:	459c      	cmp	ip, r3
 8009642:	f841 2f04 	str.w	r2, [r1, #4]!
 8009646:	d8f9      	bhi.n	800963c <__lshift+0xc0>
 8009648:	e7ea      	b.n	8009620 <__lshift+0xa4>
 800964a:	bf00      	nop
 800964c:	0800a78e 	.word	0x0800a78e
 8009650:	0800a7ff 	.word	0x0800a7ff

08009654 <__mcmp>:
 8009654:	4603      	mov	r3, r0
 8009656:	690a      	ldr	r2, [r1, #16]
 8009658:	6900      	ldr	r0, [r0, #16]
 800965a:	b530      	push	{r4, r5, lr}
 800965c:	1a80      	subs	r0, r0, r2
 800965e:	d10e      	bne.n	800967e <__mcmp+0x2a>
 8009660:	3314      	adds	r3, #20
 8009662:	3114      	adds	r1, #20
 8009664:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009668:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800966c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009670:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009674:	4295      	cmp	r5, r2
 8009676:	d003      	beq.n	8009680 <__mcmp+0x2c>
 8009678:	d205      	bcs.n	8009686 <__mcmp+0x32>
 800967a:	f04f 30ff 	mov.w	r0, #4294967295
 800967e:	bd30      	pop	{r4, r5, pc}
 8009680:	42a3      	cmp	r3, r4
 8009682:	d3f3      	bcc.n	800966c <__mcmp+0x18>
 8009684:	e7fb      	b.n	800967e <__mcmp+0x2a>
 8009686:	2001      	movs	r0, #1
 8009688:	e7f9      	b.n	800967e <__mcmp+0x2a>
	...

0800968c <__mdiff>:
 800968c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	4689      	mov	r9, r1
 8009692:	4606      	mov	r6, r0
 8009694:	4611      	mov	r1, r2
 8009696:	4648      	mov	r0, r9
 8009698:	4614      	mov	r4, r2
 800969a:	f7ff ffdb 	bl	8009654 <__mcmp>
 800969e:	1e05      	subs	r5, r0, #0
 80096a0:	d112      	bne.n	80096c8 <__mdiff+0x3c>
 80096a2:	4629      	mov	r1, r5
 80096a4:	4630      	mov	r0, r6
 80096a6:	f7ff fd19 	bl	80090dc <_Balloc>
 80096aa:	4602      	mov	r2, r0
 80096ac:	b928      	cbnz	r0, 80096ba <__mdiff+0x2e>
 80096ae:	f240 2137 	movw	r1, #567	@ 0x237
 80096b2:	4b3e      	ldr	r3, [pc, #248]	@ (80097ac <__mdiff+0x120>)
 80096b4:	483e      	ldr	r0, [pc, #248]	@ (80097b0 <__mdiff+0x124>)
 80096b6:	f7fe fa4b 	bl	8007b50 <__assert_func>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096c0:	4610      	mov	r0, r2
 80096c2:	b003      	add	sp, #12
 80096c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c8:	bfbc      	itt	lt
 80096ca:	464b      	movlt	r3, r9
 80096cc:	46a1      	movlt	r9, r4
 80096ce:	4630      	mov	r0, r6
 80096d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80096d4:	bfba      	itte	lt
 80096d6:	461c      	movlt	r4, r3
 80096d8:	2501      	movlt	r5, #1
 80096da:	2500      	movge	r5, #0
 80096dc:	f7ff fcfe 	bl	80090dc <_Balloc>
 80096e0:	4602      	mov	r2, r0
 80096e2:	b918      	cbnz	r0, 80096ec <__mdiff+0x60>
 80096e4:	f240 2145 	movw	r1, #581	@ 0x245
 80096e8:	4b30      	ldr	r3, [pc, #192]	@ (80097ac <__mdiff+0x120>)
 80096ea:	e7e3      	b.n	80096b4 <__mdiff+0x28>
 80096ec:	f100 0b14 	add.w	fp, r0, #20
 80096f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80096f4:	f109 0310 	add.w	r3, r9, #16
 80096f8:	60c5      	str	r5, [r0, #12]
 80096fa:	f04f 0c00 	mov.w	ip, #0
 80096fe:	f109 0514 	add.w	r5, r9, #20
 8009702:	46d9      	mov	r9, fp
 8009704:	6926      	ldr	r6, [r4, #16]
 8009706:	f104 0e14 	add.w	lr, r4, #20
 800970a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800970e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009712:	9301      	str	r3, [sp, #4]
 8009714:	9b01      	ldr	r3, [sp, #4]
 8009716:	f85e 0b04 	ldr.w	r0, [lr], #4
 800971a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800971e:	b281      	uxth	r1, r0
 8009720:	9301      	str	r3, [sp, #4]
 8009722:	fa1f f38a 	uxth.w	r3, sl
 8009726:	1a5b      	subs	r3, r3, r1
 8009728:	0c00      	lsrs	r0, r0, #16
 800972a:	4463      	add	r3, ip
 800972c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009730:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009734:	b29b      	uxth	r3, r3
 8009736:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800973a:	4576      	cmp	r6, lr
 800973c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009740:	f849 3b04 	str.w	r3, [r9], #4
 8009744:	d8e6      	bhi.n	8009714 <__mdiff+0x88>
 8009746:	1b33      	subs	r3, r6, r4
 8009748:	3b15      	subs	r3, #21
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	3415      	adds	r4, #21
 8009750:	3304      	adds	r3, #4
 8009752:	42a6      	cmp	r6, r4
 8009754:	bf38      	it	cc
 8009756:	2304      	movcc	r3, #4
 8009758:	441d      	add	r5, r3
 800975a:	445b      	add	r3, fp
 800975c:	461e      	mov	r6, r3
 800975e:	462c      	mov	r4, r5
 8009760:	4544      	cmp	r4, r8
 8009762:	d30e      	bcc.n	8009782 <__mdiff+0xf6>
 8009764:	f108 0103 	add.w	r1, r8, #3
 8009768:	1b49      	subs	r1, r1, r5
 800976a:	f021 0103 	bic.w	r1, r1, #3
 800976e:	3d03      	subs	r5, #3
 8009770:	45a8      	cmp	r8, r5
 8009772:	bf38      	it	cc
 8009774:	2100      	movcc	r1, #0
 8009776:	440b      	add	r3, r1
 8009778:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800977c:	b199      	cbz	r1, 80097a6 <__mdiff+0x11a>
 800977e:	6117      	str	r7, [r2, #16]
 8009780:	e79e      	b.n	80096c0 <__mdiff+0x34>
 8009782:	46e6      	mov	lr, ip
 8009784:	f854 1b04 	ldr.w	r1, [r4], #4
 8009788:	fa1f fc81 	uxth.w	ip, r1
 800978c:	44f4      	add	ip, lr
 800978e:	0c08      	lsrs	r0, r1, #16
 8009790:	4471      	add	r1, lr
 8009792:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009796:	b289      	uxth	r1, r1
 8009798:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800979c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097a0:	f846 1b04 	str.w	r1, [r6], #4
 80097a4:	e7dc      	b.n	8009760 <__mdiff+0xd4>
 80097a6:	3f01      	subs	r7, #1
 80097a8:	e7e6      	b.n	8009778 <__mdiff+0xec>
 80097aa:	bf00      	nop
 80097ac:	0800a78e 	.word	0x0800a78e
 80097b0:	0800a7ff 	.word	0x0800a7ff

080097b4 <__ulp>:
 80097b4:	4b0e      	ldr	r3, [pc, #56]	@ (80097f0 <__ulp+0x3c>)
 80097b6:	400b      	ands	r3, r1
 80097b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	dc08      	bgt.n	80097d2 <__ulp+0x1e>
 80097c0:	425b      	negs	r3, r3
 80097c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80097c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80097ca:	da04      	bge.n	80097d6 <__ulp+0x22>
 80097cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80097d0:	4113      	asrs	r3, r2
 80097d2:	2200      	movs	r2, #0
 80097d4:	e008      	b.n	80097e8 <__ulp+0x34>
 80097d6:	f1a2 0314 	sub.w	r3, r2, #20
 80097da:	2b1e      	cmp	r3, #30
 80097dc:	bfd6      	itet	le
 80097de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80097e2:	2201      	movgt	r2, #1
 80097e4:	40da      	lsrle	r2, r3
 80097e6:	2300      	movs	r3, #0
 80097e8:	4619      	mov	r1, r3
 80097ea:	4610      	mov	r0, r2
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	7ff00000 	.word	0x7ff00000

080097f4 <__b2d>:
 80097f4:	6902      	ldr	r2, [r0, #16]
 80097f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f8:	f100 0614 	add.w	r6, r0, #20
 80097fc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009800:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009804:	4f1e      	ldr	r7, [pc, #120]	@ (8009880 <__b2d+0x8c>)
 8009806:	4620      	mov	r0, r4
 8009808:	f7ff fd5a 	bl	80092c0 <__hi0bits>
 800980c:	4603      	mov	r3, r0
 800980e:	f1c0 0020 	rsb	r0, r0, #32
 8009812:	2b0a      	cmp	r3, #10
 8009814:	f1a2 0504 	sub.w	r5, r2, #4
 8009818:	6008      	str	r0, [r1, #0]
 800981a:	dc12      	bgt.n	8009842 <__b2d+0x4e>
 800981c:	42ae      	cmp	r6, r5
 800981e:	bf2c      	ite	cs
 8009820:	2200      	movcs	r2, #0
 8009822:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009826:	f1c3 0c0b 	rsb	ip, r3, #11
 800982a:	3315      	adds	r3, #21
 800982c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009830:	fa04 f303 	lsl.w	r3, r4, r3
 8009834:	fa22 f20c 	lsr.w	r2, r2, ip
 8009838:	ea4e 0107 	orr.w	r1, lr, r7
 800983c:	431a      	orrs	r2, r3
 800983e:	4610      	mov	r0, r2
 8009840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009842:	42ae      	cmp	r6, r5
 8009844:	bf36      	itet	cc
 8009846:	f1a2 0508 	subcc.w	r5, r2, #8
 800984a:	2200      	movcs	r2, #0
 800984c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009850:	3b0b      	subs	r3, #11
 8009852:	d012      	beq.n	800987a <__b2d+0x86>
 8009854:	f1c3 0720 	rsb	r7, r3, #32
 8009858:	fa22 f107 	lsr.w	r1, r2, r7
 800985c:	409c      	lsls	r4, r3
 800985e:	430c      	orrs	r4, r1
 8009860:	42b5      	cmp	r5, r6
 8009862:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009866:	bf94      	ite	ls
 8009868:	2400      	movls	r4, #0
 800986a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800986e:	409a      	lsls	r2, r3
 8009870:	40fc      	lsrs	r4, r7
 8009872:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009876:	4322      	orrs	r2, r4
 8009878:	e7e1      	b.n	800983e <__b2d+0x4a>
 800987a:	ea44 0107 	orr.w	r1, r4, r7
 800987e:	e7de      	b.n	800983e <__b2d+0x4a>
 8009880:	3ff00000 	.word	0x3ff00000

08009884 <__d2b>:
 8009884:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009888:	2101      	movs	r1, #1
 800988a:	4690      	mov	r8, r2
 800988c:	4699      	mov	r9, r3
 800988e:	9e08      	ldr	r6, [sp, #32]
 8009890:	f7ff fc24 	bl	80090dc <_Balloc>
 8009894:	4604      	mov	r4, r0
 8009896:	b930      	cbnz	r0, 80098a6 <__d2b+0x22>
 8009898:	4602      	mov	r2, r0
 800989a:	f240 310f 	movw	r1, #783	@ 0x30f
 800989e:	4b23      	ldr	r3, [pc, #140]	@ (800992c <__d2b+0xa8>)
 80098a0:	4823      	ldr	r0, [pc, #140]	@ (8009930 <__d2b+0xac>)
 80098a2:	f7fe f955 	bl	8007b50 <__assert_func>
 80098a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098ae:	b10d      	cbz	r5, 80098b4 <__d2b+0x30>
 80098b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098b4:	9301      	str	r3, [sp, #4]
 80098b6:	f1b8 0300 	subs.w	r3, r8, #0
 80098ba:	d024      	beq.n	8009906 <__d2b+0x82>
 80098bc:	4668      	mov	r0, sp
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	f7ff fd1d 	bl	80092fe <__lo0bits>
 80098c4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098c8:	b1d8      	cbz	r0, 8009902 <__d2b+0x7e>
 80098ca:	f1c0 0320 	rsb	r3, r0, #32
 80098ce:	fa02 f303 	lsl.w	r3, r2, r3
 80098d2:	430b      	orrs	r3, r1
 80098d4:	40c2      	lsrs	r2, r0
 80098d6:	6163      	str	r3, [r4, #20]
 80098d8:	9201      	str	r2, [sp, #4]
 80098da:	9b01      	ldr	r3, [sp, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	bf0c      	ite	eq
 80098e0:	2201      	moveq	r2, #1
 80098e2:	2202      	movne	r2, #2
 80098e4:	61a3      	str	r3, [r4, #24]
 80098e6:	6122      	str	r2, [r4, #16]
 80098e8:	b1ad      	cbz	r5, 8009916 <__d2b+0x92>
 80098ea:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80098ee:	4405      	add	r5, r0
 80098f0:	6035      	str	r5, [r6, #0]
 80098f2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80098f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f8:	6018      	str	r0, [r3, #0]
 80098fa:	4620      	mov	r0, r4
 80098fc:	b002      	add	sp, #8
 80098fe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009902:	6161      	str	r1, [r4, #20]
 8009904:	e7e9      	b.n	80098da <__d2b+0x56>
 8009906:	a801      	add	r0, sp, #4
 8009908:	f7ff fcf9 	bl	80092fe <__lo0bits>
 800990c:	9b01      	ldr	r3, [sp, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	6163      	str	r3, [r4, #20]
 8009912:	3020      	adds	r0, #32
 8009914:	e7e7      	b.n	80098e6 <__d2b+0x62>
 8009916:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800991a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800991e:	6030      	str	r0, [r6, #0]
 8009920:	6918      	ldr	r0, [r3, #16]
 8009922:	f7ff fccd 	bl	80092c0 <__hi0bits>
 8009926:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800992a:	e7e4      	b.n	80098f6 <__d2b+0x72>
 800992c:	0800a78e 	.word	0x0800a78e
 8009930:	0800a7ff 	.word	0x0800a7ff

08009934 <__ratio>:
 8009934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009938:	b085      	sub	sp, #20
 800993a:	e9cd 1000 	strd	r1, r0, [sp]
 800993e:	a902      	add	r1, sp, #8
 8009940:	f7ff ff58 	bl	80097f4 <__b2d>
 8009944:	468b      	mov	fp, r1
 8009946:	4606      	mov	r6, r0
 8009948:	460f      	mov	r7, r1
 800994a:	9800      	ldr	r0, [sp, #0]
 800994c:	a903      	add	r1, sp, #12
 800994e:	f7ff ff51 	bl	80097f4 <__b2d>
 8009952:	460d      	mov	r5, r1
 8009954:	9b01      	ldr	r3, [sp, #4]
 8009956:	4689      	mov	r9, r1
 8009958:	6919      	ldr	r1, [r3, #16]
 800995a:	9b00      	ldr	r3, [sp, #0]
 800995c:	4604      	mov	r4, r0
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	4630      	mov	r0, r6
 8009962:	1ac9      	subs	r1, r1, r3
 8009964:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009968:	1a9b      	subs	r3, r3, r2
 800996a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800996e:	2b00      	cmp	r3, #0
 8009970:	bfcd      	iteet	gt
 8009972:	463a      	movgt	r2, r7
 8009974:	462a      	movle	r2, r5
 8009976:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800997a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800997e:	bfd8      	it	le
 8009980:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009984:	464b      	mov	r3, r9
 8009986:	4622      	mov	r2, r4
 8009988:	4659      	mov	r1, fp
 800998a:	f7f6 fecf 	bl	800072c <__aeabi_ddiv>
 800998e:	b005      	add	sp, #20
 8009990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009994 <__copybits>:
 8009994:	3901      	subs	r1, #1
 8009996:	b570      	push	{r4, r5, r6, lr}
 8009998:	1149      	asrs	r1, r1, #5
 800999a:	6914      	ldr	r4, [r2, #16]
 800999c:	3101      	adds	r1, #1
 800999e:	f102 0314 	add.w	r3, r2, #20
 80099a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099aa:	1f05      	subs	r5, r0, #4
 80099ac:	42a3      	cmp	r3, r4
 80099ae:	d30c      	bcc.n	80099ca <__copybits+0x36>
 80099b0:	1aa3      	subs	r3, r4, r2
 80099b2:	3b11      	subs	r3, #17
 80099b4:	f023 0303 	bic.w	r3, r3, #3
 80099b8:	3211      	adds	r2, #17
 80099ba:	42a2      	cmp	r2, r4
 80099bc:	bf88      	it	hi
 80099be:	2300      	movhi	r3, #0
 80099c0:	4418      	add	r0, r3
 80099c2:	2300      	movs	r3, #0
 80099c4:	4288      	cmp	r0, r1
 80099c6:	d305      	bcc.n	80099d4 <__copybits+0x40>
 80099c8:	bd70      	pop	{r4, r5, r6, pc}
 80099ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80099ce:	f845 6f04 	str.w	r6, [r5, #4]!
 80099d2:	e7eb      	b.n	80099ac <__copybits+0x18>
 80099d4:	f840 3b04 	str.w	r3, [r0], #4
 80099d8:	e7f4      	b.n	80099c4 <__copybits+0x30>

080099da <__any_on>:
 80099da:	f100 0214 	add.w	r2, r0, #20
 80099de:	6900      	ldr	r0, [r0, #16]
 80099e0:	114b      	asrs	r3, r1, #5
 80099e2:	4298      	cmp	r0, r3
 80099e4:	b510      	push	{r4, lr}
 80099e6:	db11      	blt.n	8009a0c <__any_on+0x32>
 80099e8:	dd0a      	ble.n	8009a00 <__any_on+0x26>
 80099ea:	f011 011f 	ands.w	r1, r1, #31
 80099ee:	d007      	beq.n	8009a00 <__any_on+0x26>
 80099f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80099f4:	fa24 f001 	lsr.w	r0, r4, r1
 80099f8:	fa00 f101 	lsl.w	r1, r0, r1
 80099fc:	428c      	cmp	r4, r1
 80099fe:	d10b      	bne.n	8009a18 <__any_on+0x3e>
 8009a00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d803      	bhi.n	8009a10 <__any_on+0x36>
 8009a08:	2000      	movs	r0, #0
 8009a0a:	bd10      	pop	{r4, pc}
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	e7f7      	b.n	8009a00 <__any_on+0x26>
 8009a10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a14:	2900      	cmp	r1, #0
 8009a16:	d0f5      	beq.n	8009a04 <__any_on+0x2a>
 8009a18:	2001      	movs	r0, #1
 8009a1a:	e7f6      	b.n	8009a0a <__any_on+0x30>

08009a1c <__ascii_wctomb>:
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	4608      	mov	r0, r1
 8009a20:	b141      	cbz	r1, 8009a34 <__ascii_wctomb+0x18>
 8009a22:	2aff      	cmp	r2, #255	@ 0xff
 8009a24:	d904      	bls.n	8009a30 <__ascii_wctomb+0x14>
 8009a26:	228a      	movs	r2, #138	@ 0x8a
 8009a28:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2c:	601a      	str	r2, [r3, #0]
 8009a2e:	4770      	bx	lr
 8009a30:	2001      	movs	r0, #1
 8009a32:	700a      	strb	r2, [r1, #0]
 8009a34:	4770      	bx	lr

08009a36 <__ssputs_r>:
 8009a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a3a:	461f      	mov	r7, r3
 8009a3c:	688e      	ldr	r6, [r1, #8]
 8009a3e:	4682      	mov	sl, r0
 8009a40:	42be      	cmp	r6, r7
 8009a42:	460c      	mov	r4, r1
 8009a44:	4690      	mov	r8, r2
 8009a46:	680b      	ldr	r3, [r1, #0]
 8009a48:	d82d      	bhi.n	8009aa6 <__ssputs_r+0x70>
 8009a4a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a4e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a52:	d026      	beq.n	8009aa2 <__ssputs_r+0x6c>
 8009a54:	6965      	ldr	r5, [r4, #20]
 8009a56:	6909      	ldr	r1, [r1, #16]
 8009a58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a5c:	eba3 0901 	sub.w	r9, r3, r1
 8009a60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a64:	1c7b      	adds	r3, r7, #1
 8009a66:	444b      	add	r3, r9
 8009a68:	106d      	asrs	r5, r5, #1
 8009a6a:	429d      	cmp	r5, r3
 8009a6c:	bf38      	it	cc
 8009a6e:	461d      	movcc	r5, r3
 8009a70:	0553      	lsls	r3, r2, #21
 8009a72:	d527      	bpl.n	8009ac4 <__ssputs_r+0x8e>
 8009a74:	4629      	mov	r1, r5
 8009a76:	f7ff fa93 	bl	8008fa0 <_malloc_r>
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	b360      	cbz	r0, 8009ad8 <__ssputs_r+0xa2>
 8009a7e:	464a      	mov	r2, r9
 8009a80:	6921      	ldr	r1, [r4, #16]
 8009a82:	f7fe f850 	bl	8007b26 <memcpy>
 8009a86:	89a3      	ldrh	r3, [r4, #12]
 8009a88:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a90:	81a3      	strh	r3, [r4, #12]
 8009a92:	6126      	str	r6, [r4, #16]
 8009a94:	444e      	add	r6, r9
 8009a96:	6026      	str	r6, [r4, #0]
 8009a98:	463e      	mov	r6, r7
 8009a9a:	6165      	str	r5, [r4, #20]
 8009a9c:	eba5 0509 	sub.w	r5, r5, r9
 8009aa0:	60a5      	str	r5, [r4, #8]
 8009aa2:	42be      	cmp	r6, r7
 8009aa4:	d900      	bls.n	8009aa8 <__ssputs_r+0x72>
 8009aa6:	463e      	mov	r6, r7
 8009aa8:	4632      	mov	r2, r6
 8009aaa:	4641      	mov	r1, r8
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	f000 f9d3 	bl	8009e58 <memmove>
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	68a3      	ldr	r3, [r4, #8]
 8009ab6:	1b9b      	subs	r3, r3, r6
 8009ab8:	60a3      	str	r3, [r4, #8]
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	4433      	add	r3, r6
 8009abe:	6023      	str	r3, [r4, #0]
 8009ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac4:	462a      	mov	r2, r5
 8009ac6:	f000 fa0c 	bl	8009ee2 <_realloc_r>
 8009aca:	4606      	mov	r6, r0
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d1e0      	bne.n	8009a92 <__ssputs_r+0x5c>
 8009ad0:	4650      	mov	r0, sl
 8009ad2:	6921      	ldr	r1, [r4, #16]
 8009ad4:	f7fe feb8 	bl	8008848 <_free_r>
 8009ad8:	230c      	movs	r3, #12
 8009ada:	f8ca 3000 	str.w	r3, [sl]
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ae8:	81a3      	strh	r3, [r4, #12]
 8009aea:	e7e9      	b.n	8009ac0 <__ssputs_r+0x8a>

08009aec <_svfiprintf_r>:
 8009aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	4698      	mov	r8, r3
 8009af2:	898b      	ldrh	r3, [r1, #12]
 8009af4:	4607      	mov	r7, r0
 8009af6:	061b      	lsls	r3, r3, #24
 8009af8:	460d      	mov	r5, r1
 8009afa:	4614      	mov	r4, r2
 8009afc:	b09d      	sub	sp, #116	@ 0x74
 8009afe:	d510      	bpl.n	8009b22 <_svfiprintf_r+0x36>
 8009b00:	690b      	ldr	r3, [r1, #16]
 8009b02:	b973      	cbnz	r3, 8009b22 <_svfiprintf_r+0x36>
 8009b04:	2140      	movs	r1, #64	@ 0x40
 8009b06:	f7ff fa4b 	bl	8008fa0 <_malloc_r>
 8009b0a:	6028      	str	r0, [r5, #0]
 8009b0c:	6128      	str	r0, [r5, #16]
 8009b0e:	b930      	cbnz	r0, 8009b1e <_svfiprintf_r+0x32>
 8009b10:	230c      	movs	r3, #12
 8009b12:	603b      	str	r3, [r7, #0]
 8009b14:	f04f 30ff 	mov.w	r0, #4294967295
 8009b18:	b01d      	add	sp, #116	@ 0x74
 8009b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1e:	2340      	movs	r3, #64	@ 0x40
 8009b20:	616b      	str	r3, [r5, #20]
 8009b22:	2300      	movs	r3, #0
 8009b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b26:	2320      	movs	r3, #32
 8009b28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b2c:	2330      	movs	r3, #48	@ 0x30
 8009b2e:	f04f 0901 	mov.w	r9, #1
 8009b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009cd0 <_svfiprintf_r+0x1e4>
 8009b3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b3e:	4623      	mov	r3, r4
 8009b40:	469a      	mov	sl, r3
 8009b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b46:	b10a      	cbz	r2, 8009b4c <_svfiprintf_r+0x60>
 8009b48:	2a25      	cmp	r2, #37	@ 0x25
 8009b4a:	d1f9      	bne.n	8009b40 <_svfiprintf_r+0x54>
 8009b4c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b50:	d00b      	beq.n	8009b6a <_svfiprintf_r+0x7e>
 8009b52:	465b      	mov	r3, fp
 8009b54:	4622      	mov	r2, r4
 8009b56:	4629      	mov	r1, r5
 8009b58:	4638      	mov	r0, r7
 8009b5a:	f7ff ff6c 	bl	8009a36 <__ssputs_r>
 8009b5e:	3001      	adds	r0, #1
 8009b60:	f000 80a7 	beq.w	8009cb2 <_svfiprintf_r+0x1c6>
 8009b64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b66:	445a      	add	r2, fp
 8009b68:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f000 809f 	beq.w	8009cb2 <_svfiprintf_r+0x1c6>
 8009b74:	2300      	movs	r3, #0
 8009b76:	f04f 32ff 	mov.w	r2, #4294967295
 8009b7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b7e:	f10a 0a01 	add.w	sl, sl, #1
 8009b82:	9304      	str	r3, [sp, #16]
 8009b84:	9307      	str	r3, [sp, #28]
 8009b86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b8c:	4654      	mov	r4, sl
 8009b8e:	2205      	movs	r2, #5
 8009b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b94:	484e      	ldr	r0, [pc, #312]	@ (8009cd0 <_svfiprintf_r+0x1e4>)
 8009b96:	f7fd ffb8 	bl	8007b0a <memchr>
 8009b9a:	9a04      	ldr	r2, [sp, #16]
 8009b9c:	b9d8      	cbnz	r0, 8009bd6 <_svfiprintf_r+0xea>
 8009b9e:	06d0      	lsls	r0, r2, #27
 8009ba0:	bf44      	itt	mi
 8009ba2:	2320      	movmi	r3, #32
 8009ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ba8:	0711      	lsls	r1, r2, #28
 8009baa:	bf44      	itt	mi
 8009bac:	232b      	movmi	r3, #43	@ 0x2b
 8009bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bb8:	d015      	beq.n	8009be6 <_svfiprintf_r+0xfa>
 8009bba:	4654      	mov	r4, sl
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	f04f 0c0a 	mov.w	ip, #10
 8009bc2:	9a07      	ldr	r2, [sp, #28]
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bca:	3b30      	subs	r3, #48	@ 0x30
 8009bcc:	2b09      	cmp	r3, #9
 8009bce:	d94b      	bls.n	8009c68 <_svfiprintf_r+0x17c>
 8009bd0:	b1b0      	cbz	r0, 8009c00 <_svfiprintf_r+0x114>
 8009bd2:	9207      	str	r2, [sp, #28]
 8009bd4:	e014      	b.n	8009c00 <_svfiprintf_r+0x114>
 8009bd6:	eba0 0308 	sub.w	r3, r0, r8
 8009bda:	fa09 f303 	lsl.w	r3, r9, r3
 8009bde:	4313      	orrs	r3, r2
 8009be0:	46a2      	mov	sl, r4
 8009be2:	9304      	str	r3, [sp, #16]
 8009be4:	e7d2      	b.n	8009b8c <_svfiprintf_r+0xa0>
 8009be6:	9b03      	ldr	r3, [sp, #12]
 8009be8:	1d19      	adds	r1, r3, #4
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	9103      	str	r1, [sp, #12]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	bfbb      	ittet	lt
 8009bf2:	425b      	neglt	r3, r3
 8009bf4:	f042 0202 	orrlt.w	r2, r2, #2
 8009bf8:	9307      	strge	r3, [sp, #28]
 8009bfa:	9307      	strlt	r3, [sp, #28]
 8009bfc:	bfb8      	it	lt
 8009bfe:	9204      	strlt	r2, [sp, #16]
 8009c00:	7823      	ldrb	r3, [r4, #0]
 8009c02:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c04:	d10a      	bne.n	8009c1c <_svfiprintf_r+0x130>
 8009c06:	7863      	ldrb	r3, [r4, #1]
 8009c08:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c0a:	d132      	bne.n	8009c72 <_svfiprintf_r+0x186>
 8009c0c:	9b03      	ldr	r3, [sp, #12]
 8009c0e:	3402      	adds	r4, #2
 8009c10:	1d1a      	adds	r2, r3, #4
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	9203      	str	r2, [sp, #12]
 8009c16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c1a:	9305      	str	r3, [sp, #20]
 8009c1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009cd4 <_svfiprintf_r+0x1e8>
 8009c20:	2203      	movs	r2, #3
 8009c22:	4650      	mov	r0, sl
 8009c24:	7821      	ldrb	r1, [r4, #0]
 8009c26:	f7fd ff70 	bl	8007b0a <memchr>
 8009c2a:	b138      	cbz	r0, 8009c3c <_svfiprintf_r+0x150>
 8009c2c:	2240      	movs	r2, #64	@ 0x40
 8009c2e:	9b04      	ldr	r3, [sp, #16]
 8009c30:	eba0 000a 	sub.w	r0, r0, sl
 8009c34:	4082      	lsls	r2, r0
 8009c36:	4313      	orrs	r3, r2
 8009c38:	3401      	adds	r4, #1
 8009c3a:	9304      	str	r3, [sp, #16]
 8009c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c40:	2206      	movs	r2, #6
 8009c42:	4825      	ldr	r0, [pc, #148]	@ (8009cd8 <_svfiprintf_r+0x1ec>)
 8009c44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c48:	f7fd ff5f 	bl	8007b0a <memchr>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d036      	beq.n	8009cbe <_svfiprintf_r+0x1d2>
 8009c50:	4b22      	ldr	r3, [pc, #136]	@ (8009cdc <_svfiprintf_r+0x1f0>)
 8009c52:	bb1b      	cbnz	r3, 8009c9c <_svfiprintf_r+0x1b0>
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	3307      	adds	r3, #7
 8009c58:	f023 0307 	bic.w	r3, r3, #7
 8009c5c:	3308      	adds	r3, #8
 8009c5e:	9303      	str	r3, [sp, #12]
 8009c60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c62:	4433      	add	r3, r6
 8009c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c66:	e76a      	b.n	8009b3e <_svfiprintf_r+0x52>
 8009c68:	460c      	mov	r4, r1
 8009c6a:	2001      	movs	r0, #1
 8009c6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c70:	e7a8      	b.n	8009bc4 <_svfiprintf_r+0xd8>
 8009c72:	2300      	movs	r3, #0
 8009c74:	f04f 0c0a 	mov.w	ip, #10
 8009c78:	4619      	mov	r1, r3
 8009c7a:	3401      	adds	r4, #1
 8009c7c:	9305      	str	r3, [sp, #20]
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c84:	3a30      	subs	r2, #48	@ 0x30
 8009c86:	2a09      	cmp	r2, #9
 8009c88:	d903      	bls.n	8009c92 <_svfiprintf_r+0x1a6>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0c6      	beq.n	8009c1c <_svfiprintf_r+0x130>
 8009c8e:	9105      	str	r1, [sp, #20]
 8009c90:	e7c4      	b.n	8009c1c <_svfiprintf_r+0x130>
 8009c92:	4604      	mov	r4, r0
 8009c94:	2301      	movs	r3, #1
 8009c96:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c9a:	e7f0      	b.n	8009c7e <_svfiprintf_r+0x192>
 8009c9c:	ab03      	add	r3, sp, #12
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	462a      	mov	r2, r5
 8009ca2:	4638      	mov	r0, r7
 8009ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8009ce0 <_svfiprintf_r+0x1f4>)
 8009ca6:	a904      	add	r1, sp, #16
 8009ca8:	f7fd f920 	bl	8006eec <_printf_float>
 8009cac:	1c42      	adds	r2, r0, #1
 8009cae:	4606      	mov	r6, r0
 8009cb0:	d1d6      	bne.n	8009c60 <_svfiprintf_r+0x174>
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	065b      	lsls	r3, r3, #25
 8009cb6:	f53f af2d 	bmi.w	8009b14 <_svfiprintf_r+0x28>
 8009cba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cbc:	e72c      	b.n	8009b18 <_svfiprintf_r+0x2c>
 8009cbe:	ab03      	add	r3, sp, #12
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	462a      	mov	r2, r5
 8009cc4:	4638      	mov	r0, r7
 8009cc6:	4b06      	ldr	r3, [pc, #24]	@ (8009ce0 <_svfiprintf_r+0x1f4>)
 8009cc8:	a904      	add	r1, sp, #16
 8009cca:	f7fd fbad 	bl	8007428 <_printf_i>
 8009cce:	e7ed      	b.n	8009cac <_svfiprintf_r+0x1c0>
 8009cd0:	0800a858 	.word	0x0800a858
 8009cd4:	0800a85e 	.word	0x0800a85e
 8009cd8:	0800a862 	.word	0x0800a862
 8009cdc:	08006eed 	.word	0x08006eed
 8009ce0:	08009a37 	.word	0x08009a37

08009ce4 <__sflush_r>:
 8009ce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cea:	0716      	lsls	r6, r2, #28
 8009cec:	4605      	mov	r5, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	d454      	bmi.n	8009d9c <__sflush_r+0xb8>
 8009cf2:	684b      	ldr	r3, [r1, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	dc02      	bgt.n	8009cfe <__sflush_r+0x1a>
 8009cf8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	dd48      	ble.n	8009d90 <__sflush_r+0xac>
 8009cfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d00:	2e00      	cmp	r6, #0
 8009d02:	d045      	beq.n	8009d90 <__sflush_r+0xac>
 8009d04:	2300      	movs	r3, #0
 8009d06:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d0a:	682f      	ldr	r7, [r5, #0]
 8009d0c:	6a21      	ldr	r1, [r4, #32]
 8009d0e:	602b      	str	r3, [r5, #0]
 8009d10:	d030      	beq.n	8009d74 <__sflush_r+0x90>
 8009d12:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	0759      	lsls	r1, r3, #29
 8009d18:	d505      	bpl.n	8009d26 <__sflush_r+0x42>
 8009d1a:	6863      	ldr	r3, [r4, #4]
 8009d1c:	1ad2      	subs	r2, r2, r3
 8009d1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d20:	b10b      	cbz	r3, 8009d26 <__sflush_r+0x42>
 8009d22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d24:	1ad2      	subs	r2, r2, r3
 8009d26:	2300      	movs	r3, #0
 8009d28:	4628      	mov	r0, r5
 8009d2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d2c:	6a21      	ldr	r1, [r4, #32]
 8009d2e:	47b0      	blx	r6
 8009d30:	1c43      	adds	r3, r0, #1
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	d106      	bne.n	8009d44 <__sflush_r+0x60>
 8009d36:	6829      	ldr	r1, [r5, #0]
 8009d38:	291d      	cmp	r1, #29
 8009d3a:	d82b      	bhi.n	8009d94 <__sflush_r+0xb0>
 8009d3c:	4a28      	ldr	r2, [pc, #160]	@ (8009de0 <__sflush_r+0xfc>)
 8009d3e:	40ca      	lsrs	r2, r1
 8009d40:	07d6      	lsls	r6, r2, #31
 8009d42:	d527      	bpl.n	8009d94 <__sflush_r+0xb0>
 8009d44:	2200      	movs	r2, #0
 8009d46:	6062      	str	r2, [r4, #4]
 8009d48:	6922      	ldr	r2, [r4, #16]
 8009d4a:	04d9      	lsls	r1, r3, #19
 8009d4c:	6022      	str	r2, [r4, #0]
 8009d4e:	d504      	bpl.n	8009d5a <__sflush_r+0x76>
 8009d50:	1c42      	adds	r2, r0, #1
 8009d52:	d101      	bne.n	8009d58 <__sflush_r+0x74>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	b903      	cbnz	r3, 8009d5a <__sflush_r+0x76>
 8009d58:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d5c:	602f      	str	r7, [r5, #0]
 8009d5e:	b1b9      	cbz	r1, 8009d90 <__sflush_r+0xac>
 8009d60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d64:	4299      	cmp	r1, r3
 8009d66:	d002      	beq.n	8009d6e <__sflush_r+0x8a>
 8009d68:	4628      	mov	r0, r5
 8009d6a:	f7fe fd6d 	bl	8008848 <_free_r>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d72:	e00d      	b.n	8009d90 <__sflush_r+0xac>
 8009d74:	2301      	movs	r3, #1
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b0      	blx	r6
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	1c50      	adds	r0, r2, #1
 8009d7e:	d1c9      	bne.n	8009d14 <__sflush_r+0x30>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d0c6      	beq.n	8009d14 <__sflush_r+0x30>
 8009d86:	2b1d      	cmp	r3, #29
 8009d88:	d001      	beq.n	8009d8e <__sflush_r+0xaa>
 8009d8a:	2b16      	cmp	r3, #22
 8009d8c:	d11d      	bne.n	8009dca <__sflush_r+0xe6>
 8009d8e:	602f      	str	r7, [r5, #0]
 8009d90:	2000      	movs	r0, #0
 8009d92:	e021      	b.n	8009dd8 <__sflush_r+0xf4>
 8009d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d98:	b21b      	sxth	r3, r3
 8009d9a:	e01a      	b.n	8009dd2 <__sflush_r+0xee>
 8009d9c:	690f      	ldr	r7, [r1, #16]
 8009d9e:	2f00      	cmp	r7, #0
 8009da0:	d0f6      	beq.n	8009d90 <__sflush_r+0xac>
 8009da2:	0793      	lsls	r3, r2, #30
 8009da4:	bf18      	it	ne
 8009da6:	2300      	movne	r3, #0
 8009da8:	680e      	ldr	r6, [r1, #0]
 8009daa:	bf08      	it	eq
 8009dac:	694b      	ldreq	r3, [r1, #20]
 8009dae:	1bf6      	subs	r6, r6, r7
 8009db0:	600f      	str	r7, [r1, #0]
 8009db2:	608b      	str	r3, [r1, #8]
 8009db4:	2e00      	cmp	r6, #0
 8009db6:	ddeb      	ble.n	8009d90 <__sflush_r+0xac>
 8009db8:	4633      	mov	r3, r6
 8009dba:	463a      	mov	r2, r7
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	6a21      	ldr	r1, [r4, #32]
 8009dc0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009dc4:	47e0      	blx	ip
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	dc07      	bgt.n	8009dda <__sflush_r+0xf6>
 8009dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd6:	81a3      	strh	r3, [r4, #12]
 8009dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dda:	4407      	add	r7, r0
 8009ddc:	1a36      	subs	r6, r6, r0
 8009dde:	e7e9      	b.n	8009db4 <__sflush_r+0xd0>
 8009de0:	20400001 	.word	0x20400001

08009de4 <_fflush_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	690b      	ldr	r3, [r1, #16]
 8009de8:	4605      	mov	r5, r0
 8009dea:	460c      	mov	r4, r1
 8009dec:	b913      	cbnz	r3, 8009df4 <_fflush_r+0x10>
 8009dee:	2500      	movs	r5, #0
 8009df0:	4628      	mov	r0, r5
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	b118      	cbz	r0, 8009dfe <_fflush_r+0x1a>
 8009df6:	6a03      	ldr	r3, [r0, #32]
 8009df8:	b90b      	cbnz	r3, 8009dfe <_fflush_r+0x1a>
 8009dfa:	f7fd fcbf 	bl	800777c <__sinit>
 8009dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d0f3      	beq.n	8009dee <_fflush_r+0xa>
 8009e06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e08:	07d0      	lsls	r0, r2, #31
 8009e0a:	d404      	bmi.n	8009e16 <_fflush_r+0x32>
 8009e0c:	0599      	lsls	r1, r3, #22
 8009e0e:	d402      	bmi.n	8009e16 <_fflush_r+0x32>
 8009e10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e12:	f7fd fe70 	bl	8007af6 <__retarget_lock_acquire_recursive>
 8009e16:	4628      	mov	r0, r5
 8009e18:	4621      	mov	r1, r4
 8009e1a:	f7ff ff63 	bl	8009ce4 <__sflush_r>
 8009e1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e20:	4605      	mov	r5, r0
 8009e22:	07da      	lsls	r2, r3, #31
 8009e24:	d4e4      	bmi.n	8009df0 <_fflush_r+0xc>
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	059b      	lsls	r3, r3, #22
 8009e2a:	d4e1      	bmi.n	8009df0 <_fflush_r+0xc>
 8009e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e2e:	f7fd fe63 	bl	8007af8 <__retarget_lock_release_recursive>
 8009e32:	e7dd      	b.n	8009df0 <_fflush_r+0xc>

08009e34 <fiprintf>:
 8009e34:	b40e      	push	{r1, r2, r3}
 8009e36:	b503      	push	{r0, r1, lr}
 8009e38:	4601      	mov	r1, r0
 8009e3a:	ab03      	add	r3, sp, #12
 8009e3c:	4805      	ldr	r0, [pc, #20]	@ (8009e54 <fiprintf+0x20>)
 8009e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e42:	6800      	ldr	r0, [r0, #0]
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	f000 f8a1 	bl	8009f8c <_vfiprintf_r>
 8009e4a:	b002      	add	sp, #8
 8009e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e50:	b003      	add	sp, #12
 8009e52:	4770      	bx	lr
 8009e54:	200001a4 	.word	0x200001a4

08009e58 <memmove>:
 8009e58:	4288      	cmp	r0, r1
 8009e5a:	b510      	push	{r4, lr}
 8009e5c:	eb01 0402 	add.w	r4, r1, r2
 8009e60:	d902      	bls.n	8009e68 <memmove+0x10>
 8009e62:	4284      	cmp	r4, r0
 8009e64:	4623      	mov	r3, r4
 8009e66:	d807      	bhi.n	8009e78 <memmove+0x20>
 8009e68:	1e43      	subs	r3, r0, #1
 8009e6a:	42a1      	cmp	r1, r4
 8009e6c:	d008      	beq.n	8009e80 <memmove+0x28>
 8009e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e76:	e7f8      	b.n	8009e6a <memmove+0x12>
 8009e78:	4601      	mov	r1, r0
 8009e7a:	4402      	add	r2, r0
 8009e7c:	428a      	cmp	r2, r1
 8009e7e:	d100      	bne.n	8009e82 <memmove+0x2a>
 8009e80:	bd10      	pop	{r4, pc}
 8009e82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e8a:	e7f7      	b.n	8009e7c <memmove+0x24>

08009e8c <_sbrk_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	2300      	movs	r3, #0
 8009e90:	4d05      	ldr	r5, [pc, #20]	@ (8009ea8 <_sbrk_r+0x1c>)
 8009e92:	4604      	mov	r4, r0
 8009e94:	4608      	mov	r0, r1
 8009e96:	602b      	str	r3, [r5, #0]
 8009e98:	f7f8 fa1c 	bl	80022d4 <_sbrk>
 8009e9c:	1c43      	adds	r3, r0, #1
 8009e9e:	d102      	bne.n	8009ea6 <_sbrk_r+0x1a>
 8009ea0:	682b      	ldr	r3, [r5, #0]
 8009ea2:	b103      	cbz	r3, 8009ea6 <_sbrk_r+0x1a>
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	20000780 	.word	0x20000780

08009eac <abort>:
 8009eac:	2006      	movs	r0, #6
 8009eae:	b508      	push	{r3, lr}
 8009eb0:	f000 fa40 	bl	800a334 <raise>
 8009eb4:	2001      	movs	r0, #1
 8009eb6:	f7f8 f998 	bl	80021ea <_exit>

08009eba <_calloc_r>:
 8009eba:	b570      	push	{r4, r5, r6, lr}
 8009ebc:	fba1 5402 	umull	r5, r4, r1, r2
 8009ec0:	b934      	cbnz	r4, 8009ed0 <_calloc_r+0x16>
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	f7ff f86c 	bl	8008fa0 <_malloc_r>
 8009ec8:	4606      	mov	r6, r0
 8009eca:	b928      	cbnz	r0, 8009ed8 <_calloc_r+0x1e>
 8009ecc:	4630      	mov	r0, r6
 8009ece:	bd70      	pop	{r4, r5, r6, pc}
 8009ed0:	220c      	movs	r2, #12
 8009ed2:	2600      	movs	r6, #0
 8009ed4:	6002      	str	r2, [r0, #0]
 8009ed6:	e7f9      	b.n	8009ecc <_calloc_r+0x12>
 8009ed8:	462a      	mov	r2, r5
 8009eda:	4621      	mov	r1, r4
 8009edc:	f7fd fd1f 	bl	800791e <memset>
 8009ee0:	e7f4      	b.n	8009ecc <_calloc_r+0x12>

08009ee2 <_realloc_r>:
 8009ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	4614      	mov	r4, r2
 8009eea:	460d      	mov	r5, r1
 8009eec:	b921      	cbnz	r1, 8009ef8 <_realloc_r+0x16>
 8009eee:	4611      	mov	r1, r2
 8009ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef4:	f7ff b854 	b.w	8008fa0 <_malloc_r>
 8009ef8:	b92a      	cbnz	r2, 8009f06 <_realloc_r+0x24>
 8009efa:	f7fe fca5 	bl	8008848 <_free_r>
 8009efe:	4625      	mov	r5, r4
 8009f00:	4628      	mov	r0, r5
 8009f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f06:	f000 fa31 	bl	800a36c <_malloc_usable_size_r>
 8009f0a:	4284      	cmp	r4, r0
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	d802      	bhi.n	8009f16 <_realloc_r+0x34>
 8009f10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f14:	d8f4      	bhi.n	8009f00 <_realloc_r+0x1e>
 8009f16:	4621      	mov	r1, r4
 8009f18:	4638      	mov	r0, r7
 8009f1a:	f7ff f841 	bl	8008fa0 <_malloc_r>
 8009f1e:	4680      	mov	r8, r0
 8009f20:	b908      	cbnz	r0, 8009f26 <_realloc_r+0x44>
 8009f22:	4645      	mov	r5, r8
 8009f24:	e7ec      	b.n	8009f00 <_realloc_r+0x1e>
 8009f26:	42b4      	cmp	r4, r6
 8009f28:	4622      	mov	r2, r4
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	bf28      	it	cs
 8009f2e:	4632      	movcs	r2, r6
 8009f30:	f7fd fdf9 	bl	8007b26 <memcpy>
 8009f34:	4629      	mov	r1, r5
 8009f36:	4638      	mov	r0, r7
 8009f38:	f7fe fc86 	bl	8008848 <_free_r>
 8009f3c:	e7f1      	b.n	8009f22 <_realloc_r+0x40>

08009f3e <__sfputc_r>:
 8009f3e:	6893      	ldr	r3, [r2, #8]
 8009f40:	b410      	push	{r4}
 8009f42:	3b01      	subs	r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	6093      	str	r3, [r2, #8]
 8009f48:	da07      	bge.n	8009f5a <__sfputc_r+0x1c>
 8009f4a:	6994      	ldr	r4, [r2, #24]
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	db01      	blt.n	8009f54 <__sfputc_r+0x16>
 8009f50:	290a      	cmp	r1, #10
 8009f52:	d102      	bne.n	8009f5a <__sfputc_r+0x1c>
 8009f54:	bc10      	pop	{r4}
 8009f56:	f000 b931 	b.w	800a1bc <__swbuf_r>
 8009f5a:	6813      	ldr	r3, [r2, #0]
 8009f5c:	1c58      	adds	r0, r3, #1
 8009f5e:	6010      	str	r0, [r2, #0]
 8009f60:	7019      	strb	r1, [r3, #0]
 8009f62:	4608      	mov	r0, r1
 8009f64:	bc10      	pop	{r4}
 8009f66:	4770      	bx	lr

08009f68 <__sfputs_r>:
 8009f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	460f      	mov	r7, r1
 8009f6e:	4614      	mov	r4, r2
 8009f70:	18d5      	adds	r5, r2, r3
 8009f72:	42ac      	cmp	r4, r5
 8009f74:	d101      	bne.n	8009f7a <__sfputs_r+0x12>
 8009f76:	2000      	movs	r0, #0
 8009f78:	e007      	b.n	8009f8a <__sfputs_r+0x22>
 8009f7a:	463a      	mov	r2, r7
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f82:	f7ff ffdc 	bl	8009f3e <__sfputc_r>
 8009f86:	1c43      	adds	r3, r0, #1
 8009f88:	d1f3      	bne.n	8009f72 <__sfputs_r+0xa>
 8009f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f8c <_vfiprintf_r>:
 8009f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f90:	460d      	mov	r5, r1
 8009f92:	4614      	mov	r4, r2
 8009f94:	4698      	mov	r8, r3
 8009f96:	4606      	mov	r6, r0
 8009f98:	b09d      	sub	sp, #116	@ 0x74
 8009f9a:	b118      	cbz	r0, 8009fa4 <_vfiprintf_r+0x18>
 8009f9c:	6a03      	ldr	r3, [r0, #32]
 8009f9e:	b90b      	cbnz	r3, 8009fa4 <_vfiprintf_r+0x18>
 8009fa0:	f7fd fbec 	bl	800777c <__sinit>
 8009fa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fa6:	07d9      	lsls	r1, r3, #31
 8009fa8:	d405      	bmi.n	8009fb6 <_vfiprintf_r+0x2a>
 8009faa:	89ab      	ldrh	r3, [r5, #12]
 8009fac:	059a      	lsls	r2, r3, #22
 8009fae:	d402      	bmi.n	8009fb6 <_vfiprintf_r+0x2a>
 8009fb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fb2:	f7fd fda0 	bl	8007af6 <__retarget_lock_acquire_recursive>
 8009fb6:	89ab      	ldrh	r3, [r5, #12]
 8009fb8:	071b      	lsls	r3, r3, #28
 8009fba:	d501      	bpl.n	8009fc0 <_vfiprintf_r+0x34>
 8009fbc:	692b      	ldr	r3, [r5, #16]
 8009fbe:	b99b      	cbnz	r3, 8009fe8 <_vfiprintf_r+0x5c>
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f000 f938 	bl	800a238 <__swsetup_r>
 8009fc8:	b170      	cbz	r0, 8009fe8 <_vfiprintf_r+0x5c>
 8009fca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fcc:	07dc      	lsls	r4, r3, #31
 8009fce:	d504      	bpl.n	8009fda <_vfiprintf_r+0x4e>
 8009fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd4:	b01d      	add	sp, #116	@ 0x74
 8009fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fda:	89ab      	ldrh	r3, [r5, #12]
 8009fdc:	0598      	lsls	r0, r3, #22
 8009fde:	d4f7      	bmi.n	8009fd0 <_vfiprintf_r+0x44>
 8009fe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fe2:	f7fd fd89 	bl	8007af8 <__retarget_lock_release_recursive>
 8009fe6:	e7f3      	b.n	8009fd0 <_vfiprintf_r+0x44>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fec:	2320      	movs	r3, #32
 8009fee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ff2:	2330      	movs	r3, #48	@ 0x30
 8009ff4:	f04f 0901 	mov.w	r9, #1
 8009ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ffc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a1a8 <_vfiprintf_r+0x21c>
 800a000:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a004:	4623      	mov	r3, r4
 800a006:	469a      	mov	sl, r3
 800a008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a00c:	b10a      	cbz	r2, 800a012 <_vfiprintf_r+0x86>
 800a00e:	2a25      	cmp	r2, #37	@ 0x25
 800a010:	d1f9      	bne.n	800a006 <_vfiprintf_r+0x7a>
 800a012:	ebba 0b04 	subs.w	fp, sl, r4
 800a016:	d00b      	beq.n	800a030 <_vfiprintf_r+0xa4>
 800a018:	465b      	mov	r3, fp
 800a01a:	4622      	mov	r2, r4
 800a01c:	4629      	mov	r1, r5
 800a01e:	4630      	mov	r0, r6
 800a020:	f7ff ffa2 	bl	8009f68 <__sfputs_r>
 800a024:	3001      	adds	r0, #1
 800a026:	f000 80a7 	beq.w	800a178 <_vfiprintf_r+0x1ec>
 800a02a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a02c:	445a      	add	r2, fp
 800a02e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a030:	f89a 3000 	ldrb.w	r3, [sl]
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 809f 	beq.w	800a178 <_vfiprintf_r+0x1ec>
 800a03a:	2300      	movs	r3, #0
 800a03c:	f04f 32ff 	mov.w	r2, #4294967295
 800a040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a044:	f10a 0a01 	add.w	sl, sl, #1
 800a048:	9304      	str	r3, [sp, #16]
 800a04a:	9307      	str	r3, [sp, #28]
 800a04c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a050:	931a      	str	r3, [sp, #104]	@ 0x68
 800a052:	4654      	mov	r4, sl
 800a054:	2205      	movs	r2, #5
 800a056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a05a:	4853      	ldr	r0, [pc, #332]	@ (800a1a8 <_vfiprintf_r+0x21c>)
 800a05c:	f7fd fd55 	bl	8007b0a <memchr>
 800a060:	9a04      	ldr	r2, [sp, #16]
 800a062:	b9d8      	cbnz	r0, 800a09c <_vfiprintf_r+0x110>
 800a064:	06d1      	lsls	r1, r2, #27
 800a066:	bf44      	itt	mi
 800a068:	2320      	movmi	r3, #32
 800a06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a06e:	0713      	lsls	r3, r2, #28
 800a070:	bf44      	itt	mi
 800a072:	232b      	movmi	r3, #43	@ 0x2b
 800a074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a078:	f89a 3000 	ldrb.w	r3, [sl]
 800a07c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a07e:	d015      	beq.n	800a0ac <_vfiprintf_r+0x120>
 800a080:	4654      	mov	r4, sl
 800a082:	2000      	movs	r0, #0
 800a084:	f04f 0c0a 	mov.w	ip, #10
 800a088:	9a07      	ldr	r2, [sp, #28]
 800a08a:	4621      	mov	r1, r4
 800a08c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a090:	3b30      	subs	r3, #48	@ 0x30
 800a092:	2b09      	cmp	r3, #9
 800a094:	d94b      	bls.n	800a12e <_vfiprintf_r+0x1a2>
 800a096:	b1b0      	cbz	r0, 800a0c6 <_vfiprintf_r+0x13a>
 800a098:	9207      	str	r2, [sp, #28]
 800a09a:	e014      	b.n	800a0c6 <_vfiprintf_r+0x13a>
 800a09c:	eba0 0308 	sub.w	r3, r0, r8
 800a0a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	46a2      	mov	sl, r4
 800a0a8:	9304      	str	r3, [sp, #16]
 800a0aa:	e7d2      	b.n	800a052 <_vfiprintf_r+0xc6>
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	1d19      	adds	r1, r3, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	9103      	str	r1, [sp, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	bfbb      	ittet	lt
 800a0b8:	425b      	neglt	r3, r3
 800a0ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a0be:	9307      	strge	r3, [sp, #28]
 800a0c0:	9307      	strlt	r3, [sp, #28]
 800a0c2:	bfb8      	it	lt
 800a0c4:	9204      	strlt	r2, [sp, #16]
 800a0c6:	7823      	ldrb	r3, [r4, #0]
 800a0c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0ca:	d10a      	bne.n	800a0e2 <_vfiprintf_r+0x156>
 800a0cc:	7863      	ldrb	r3, [r4, #1]
 800a0ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0d0:	d132      	bne.n	800a138 <_vfiprintf_r+0x1ac>
 800a0d2:	9b03      	ldr	r3, [sp, #12]
 800a0d4:	3402      	adds	r4, #2
 800a0d6:	1d1a      	adds	r2, r3, #4
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	9203      	str	r2, [sp, #12]
 800a0dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0e0:	9305      	str	r3, [sp, #20]
 800a0e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a1ac <_vfiprintf_r+0x220>
 800a0e6:	2203      	movs	r2, #3
 800a0e8:	4650      	mov	r0, sl
 800a0ea:	7821      	ldrb	r1, [r4, #0]
 800a0ec:	f7fd fd0d 	bl	8007b0a <memchr>
 800a0f0:	b138      	cbz	r0, 800a102 <_vfiprintf_r+0x176>
 800a0f2:	2240      	movs	r2, #64	@ 0x40
 800a0f4:	9b04      	ldr	r3, [sp, #16]
 800a0f6:	eba0 000a 	sub.w	r0, r0, sl
 800a0fa:	4082      	lsls	r2, r0
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	3401      	adds	r4, #1
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a106:	2206      	movs	r2, #6
 800a108:	4829      	ldr	r0, [pc, #164]	@ (800a1b0 <_vfiprintf_r+0x224>)
 800a10a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a10e:	f7fd fcfc 	bl	8007b0a <memchr>
 800a112:	2800      	cmp	r0, #0
 800a114:	d03f      	beq.n	800a196 <_vfiprintf_r+0x20a>
 800a116:	4b27      	ldr	r3, [pc, #156]	@ (800a1b4 <_vfiprintf_r+0x228>)
 800a118:	bb1b      	cbnz	r3, 800a162 <_vfiprintf_r+0x1d6>
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	3307      	adds	r3, #7
 800a11e:	f023 0307 	bic.w	r3, r3, #7
 800a122:	3308      	adds	r3, #8
 800a124:	9303      	str	r3, [sp, #12]
 800a126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a128:	443b      	add	r3, r7
 800a12a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a12c:	e76a      	b.n	800a004 <_vfiprintf_r+0x78>
 800a12e:	460c      	mov	r4, r1
 800a130:	2001      	movs	r0, #1
 800a132:	fb0c 3202 	mla	r2, ip, r2, r3
 800a136:	e7a8      	b.n	800a08a <_vfiprintf_r+0xfe>
 800a138:	2300      	movs	r3, #0
 800a13a:	f04f 0c0a 	mov.w	ip, #10
 800a13e:	4619      	mov	r1, r3
 800a140:	3401      	adds	r4, #1
 800a142:	9305      	str	r3, [sp, #20]
 800a144:	4620      	mov	r0, r4
 800a146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a14a:	3a30      	subs	r2, #48	@ 0x30
 800a14c:	2a09      	cmp	r2, #9
 800a14e:	d903      	bls.n	800a158 <_vfiprintf_r+0x1cc>
 800a150:	2b00      	cmp	r3, #0
 800a152:	d0c6      	beq.n	800a0e2 <_vfiprintf_r+0x156>
 800a154:	9105      	str	r1, [sp, #20]
 800a156:	e7c4      	b.n	800a0e2 <_vfiprintf_r+0x156>
 800a158:	4604      	mov	r4, r0
 800a15a:	2301      	movs	r3, #1
 800a15c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a160:	e7f0      	b.n	800a144 <_vfiprintf_r+0x1b8>
 800a162:	ab03      	add	r3, sp, #12
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	462a      	mov	r2, r5
 800a168:	4630      	mov	r0, r6
 800a16a:	4b13      	ldr	r3, [pc, #76]	@ (800a1b8 <_vfiprintf_r+0x22c>)
 800a16c:	a904      	add	r1, sp, #16
 800a16e:	f7fc febd 	bl	8006eec <_printf_float>
 800a172:	4607      	mov	r7, r0
 800a174:	1c78      	adds	r0, r7, #1
 800a176:	d1d6      	bne.n	800a126 <_vfiprintf_r+0x19a>
 800a178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a17a:	07d9      	lsls	r1, r3, #31
 800a17c:	d405      	bmi.n	800a18a <_vfiprintf_r+0x1fe>
 800a17e:	89ab      	ldrh	r3, [r5, #12]
 800a180:	059a      	lsls	r2, r3, #22
 800a182:	d402      	bmi.n	800a18a <_vfiprintf_r+0x1fe>
 800a184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a186:	f7fd fcb7 	bl	8007af8 <__retarget_lock_release_recursive>
 800a18a:	89ab      	ldrh	r3, [r5, #12]
 800a18c:	065b      	lsls	r3, r3, #25
 800a18e:	f53f af1f 	bmi.w	8009fd0 <_vfiprintf_r+0x44>
 800a192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a194:	e71e      	b.n	8009fd4 <_vfiprintf_r+0x48>
 800a196:	ab03      	add	r3, sp, #12
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	462a      	mov	r2, r5
 800a19c:	4630      	mov	r0, r6
 800a19e:	4b06      	ldr	r3, [pc, #24]	@ (800a1b8 <_vfiprintf_r+0x22c>)
 800a1a0:	a904      	add	r1, sp, #16
 800a1a2:	f7fd f941 	bl	8007428 <_printf_i>
 800a1a6:	e7e4      	b.n	800a172 <_vfiprintf_r+0x1e6>
 800a1a8:	0800a858 	.word	0x0800a858
 800a1ac:	0800a85e 	.word	0x0800a85e
 800a1b0:	0800a862 	.word	0x0800a862
 800a1b4:	08006eed 	.word	0x08006eed
 800a1b8:	08009f69 	.word	0x08009f69

0800a1bc <__swbuf_r>:
 800a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1be:	460e      	mov	r6, r1
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	b118      	cbz	r0, 800a1ce <__swbuf_r+0x12>
 800a1c6:	6a03      	ldr	r3, [r0, #32]
 800a1c8:	b90b      	cbnz	r3, 800a1ce <__swbuf_r+0x12>
 800a1ca:	f7fd fad7 	bl	800777c <__sinit>
 800a1ce:	69a3      	ldr	r3, [r4, #24]
 800a1d0:	60a3      	str	r3, [r4, #8]
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	071a      	lsls	r2, r3, #28
 800a1d6:	d501      	bpl.n	800a1dc <__swbuf_r+0x20>
 800a1d8:	6923      	ldr	r3, [r4, #16]
 800a1da:	b943      	cbnz	r3, 800a1ee <__swbuf_r+0x32>
 800a1dc:	4621      	mov	r1, r4
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f000 f82a 	bl	800a238 <__swsetup_r>
 800a1e4:	b118      	cbz	r0, 800a1ee <__swbuf_r+0x32>
 800a1e6:	f04f 37ff 	mov.w	r7, #4294967295
 800a1ea:	4638      	mov	r0, r7
 800a1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	6922      	ldr	r2, [r4, #16]
 800a1f2:	b2f6      	uxtb	r6, r6
 800a1f4:	1a98      	subs	r0, r3, r2
 800a1f6:	6963      	ldr	r3, [r4, #20]
 800a1f8:	4637      	mov	r7, r6
 800a1fa:	4283      	cmp	r3, r0
 800a1fc:	dc05      	bgt.n	800a20a <__swbuf_r+0x4e>
 800a1fe:	4621      	mov	r1, r4
 800a200:	4628      	mov	r0, r5
 800a202:	f7ff fdef 	bl	8009de4 <_fflush_r>
 800a206:	2800      	cmp	r0, #0
 800a208:	d1ed      	bne.n	800a1e6 <__swbuf_r+0x2a>
 800a20a:	68a3      	ldr	r3, [r4, #8]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	60a3      	str	r3, [r4, #8]
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	6022      	str	r2, [r4, #0]
 800a216:	701e      	strb	r6, [r3, #0]
 800a218:	6962      	ldr	r2, [r4, #20]
 800a21a:	1c43      	adds	r3, r0, #1
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d004      	beq.n	800a22a <__swbuf_r+0x6e>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	07db      	lsls	r3, r3, #31
 800a224:	d5e1      	bpl.n	800a1ea <__swbuf_r+0x2e>
 800a226:	2e0a      	cmp	r6, #10
 800a228:	d1df      	bne.n	800a1ea <__swbuf_r+0x2e>
 800a22a:	4621      	mov	r1, r4
 800a22c:	4628      	mov	r0, r5
 800a22e:	f7ff fdd9 	bl	8009de4 <_fflush_r>
 800a232:	2800      	cmp	r0, #0
 800a234:	d0d9      	beq.n	800a1ea <__swbuf_r+0x2e>
 800a236:	e7d6      	b.n	800a1e6 <__swbuf_r+0x2a>

0800a238 <__swsetup_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4b29      	ldr	r3, [pc, #164]	@ (800a2e0 <__swsetup_r+0xa8>)
 800a23c:	4605      	mov	r5, r0
 800a23e:	6818      	ldr	r0, [r3, #0]
 800a240:	460c      	mov	r4, r1
 800a242:	b118      	cbz	r0, 800a24c <__swsetup_r+0x14>
 800a244:	6a03      	ldr	r3, [r0, #32]
 800a246:	b90b      	cbnz	r3, 800a24c <__swsetup_r+0x14>
 800a248:	f7fd fa98 	bl	800777c <__sinit>
 800a24c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a250:	0719      	lsls	r1, r3, #28
 800a252:	d422      	bmi.n	800a29a <__swsetup_r+0x62>
 800a254:	06da      	lsls	r2, r3, #27
 800a256:	d407      	bmi.n	800a268 <__swsetup_r+0x30>
 800a258:	2209      	movs	r2, #9
 800a25a:	602a      	str	r2, [r5, #0]
 800a25c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	81a3      	strh	r3, [r4, #12]
 800a266:	e033      	b.n	800a2d0 <__swsetup_r+0x98>
 800a268:	0758      	lsls	r0, r3, #29
 800a26a:	d512      	bpl.n	800a292 <__swsetup_r+0x5a>
 800a26c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a26e:	b141      	cbz	r1, 800a282 <__swsetup_r+0x4a>
 800a270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a274:	4299      	cmp	r1, r3
 800a276:	d002      	beq.n	800a27e <__swsetup_r+0x46>
 800a278:	4628      	mov	r0, r5
 800a27a:	f7fe fae5 	bl	8008848 <_free_r>
 800a27e:	2300      	movs	r3, #0
 800a280:	6363      	str	r3, [r4, #52]	@ 0x34
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a288:	81a3      	strh	r3, [r4, #12]
 800a28a:	2300      	movs	r3, #0
 800a28c:	6063      	str	r3, [r4, #4]
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	f043 0308 	orr.w	r3, r3, #8
 800a298:	81a3      	strh	r3, [r4, #12]
 800a29a:	6923      	ldr	r3, [r4, #16]
 800a29c:	b94b      	cbnz	r3, 800a2b2 <__swsetup_r+0x7a>
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a2a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2a8:	d003      	beq.n	800a2b2 <__swsetup_r+0x7a>
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	f000 f88a 	bl	800a3c6 <__smakebuf_r>
 800a2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2b6:	f013 0201 	ands.w	r2, r3, #1
 800a2ba:	d00a      	beq.n	800a2d2 <__swsetup_r+0x9a>
 800a2bc:	2200      	movs	r2, #0
 800a2be:	60a2      	str	r2, [r4, #8]
 800a2c0:	6962      	ldr	r2, [r4, #20]
 800a2c2:	4252      	negs	r2, r2
 800a2c4:	61a2      	str	r2, [r4, #24]
 800a2c6:	6922      	ldr	r2, [r4, #16]
 800a2c8:	b942      	cbnz	r2, 800a2dc <__swsetup_r+0xa4>
 800a2ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a2ce:	d1c5      	bne.n	800a25c <__swsetup_r+0x24>
 800a2d0:	bd38      	pop	{r3, r4, r5, pc}
 800a2d2:	0799      	lsls	r1, r3, #30
 800a2d4:	bf58      	it	pl
 800a2d6:	6962      	ldrpl	r2, [r4, #20]
 800a2d8:	60a2      	str	r2, [r4, #8]
 800a2da:	e7f4      	b.n	800a2c6 <__swsetup_r+0x8e>
 800a2dc:	2000      	movs	r0, #0
 800a2de:	e7f7      	b.n	800a2d0 <__swsetup_r+0x98>
 800a2e0:	200001a4 	.word	0x200001a4

0800a2e4 <_raise_r>:
 800a2e4:	291f      	cmp	r1, #31
 800a2e6:	b538      	push	{r3, r4, r5, lr}
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	d904      	bls.n	800a2f8 <_raise_r+0x14>
 800a2ee:	2316      	movs	r3, #22
 800a2f0:	6003      	str	r3, [r0, #0]
 800a2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2fa:	b112      	cbz	r2, 800a302 <_raise_r+0x1e>
 800a2fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a300:	b94b      	cbnz	r3, 800a316 <_raise_r+0x32>
 800a302:	4628      	mov	r0, r5
 800a304:	f000 f830 	bl	800a368 <_getpid_r>
 800a308:	4622      	mov	r2, r4
 800a30a:	4601      	mov	r1, r0
 800a30c:	4628      	mov	r0, r5
 800a30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a312:	f000 b817 	b.w	800a344 <_kill_r>
 800a316:	2b01      	cmp	r3, #1
 800a318:	d00a      	beq.n	800a330 <_raise_r+0x4c>
 800a31a:	1c59      	adds	r1, r3, #1
 800a31c:	d103      	bne.n	800a326 <_raise_r+0x42>
 800a31e:	2316      	movs	r3, #22
 800a320:	6003      	str	r3, [r0, #0]
 800a322:	2001      	movs	r0, #1
 800a324:	e7e7      	b.n	800a2f6 <_raise_r+0x12>
 800a326:	2100      	movs	r1, #0
 800a328:	4620      	mov	r0, r4
 800a32a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a32e:	4798      	blx	r3
 800a330:	2000      	movs	r0, #0
 800a332:	e7e0      	b.n	800a2f6 <_raise_r+0x12>

0800a334 <raise>:
 800a334:	4b02      	ldr	r3, [pc, #8]	@ (800a340 <raise+0xc>)
 800a336:	4601      	mov	r1, r0
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	f7ff bfd3 	b.w	800a2e4 <_raise_r>
 800a33e:	bf00      	nop
 800a340:	200001a4 	.word	0x200001a4

0800a344 <_kill_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	2300      	movs	r3, #0
 800a348:	4d06      	ldr	r5, [pc, #24]	@ (800a364 <_kill_r+0x20>)
 800a34a:	4604      	mov	r4, r0
 800a34c:	4608      	mov	r0, r1
 800a34e:	4611      	mov	r1, r2
 800a350:	602b      	str	r3, [r5, #0]
 800a352:	f7f7 ff3a 	bl	80021ca <_kill>
 800a356:	1c43      	adds	r3, r0, #1
 800a358:	d102      	bne.n	800a360 <_kill_r+0x1c>
 800a35a:	682b      	ldr	r3, [r5, #0]
 800a35c:	b103      	cbz	r3, 800a360 <_kill_r+0x1c>
 800a35e:	6023      	str	r3, [r4, #0]
 800a360:	bd38      	pop	{r3, r4, r5, pc}
 800a362:	bf00      	nop
 800a364:	20000780 	.word	0x20000780

0800a368 <_getpid_r>:
 800a368:	f7f7 bf28 	b.w	80021bc <_getpid>

0800a36c <_malloc_usable_size_r>:
 800a36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a370:	1f18      	subs	r0, r3, #4
 800a372:	2b00      	cmp	r3, #0
 800a374:	bfbc      	itt	lt
 800a376:	580b      	ldrlt	r3, [r1, r0]
 800a378:	18c0      	addlt	r0, r0, r3
 800a37a:	4770      	bx	lr

0800a37c <__swhatbuf_r>:
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	460c      	mov	r4, r1
 800a380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a384:	4615      	mov	r5, r2
 800a386:	2900      	cmp	r1, #0
 800a388:	461e      	mov	r6, r3
 800a38a:	b096      	sub	sp, #88	@ 0x58
 800a38c:	da0c      	bge.n	800a3a8 <__swhatbuf_r+0x2c>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	2100      	movs	r1, #0
 800a392:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a396:	bf14      	ite	ne
 800a398:	2340      	movne	r3, #64	@ 0x40
 800a39a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a39e:	2000      	movs	r0, #0
 800a3a0:	6031      	str	r1, [r6, #0]
 800a3a2:	602b      	str	r3, [r5, #0]
 800a3a4:	b016      	add	sp, #88	@ 0x58
 800a3a6:	bd70      	pop	{r4, r5, r6, pc}
 800a3a8:	466a      	mov	r2, sp
 800a3aa:	f000 f849 	bl	800a440 <_fstat_r>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	dbed      	blt.n	800a38e <__swhatbuf_r+0x12>
 800a3b2:	9901      	ldr	r1, [sp, #4]
 800a3b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3bc:	4259      	negs	r1, r3
 800a3be:	4159      	adcs	r1, r3
 800a3c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3c4:	e7eb      	b.n	800a39e <__swhatbuf_r+0x22>

0800a3c6 <__smakebuf_r>:
 800a3c6:	898b      	ldrh	r3, [r1, #12]
 800a3c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3ca:	079d      	lsls	r5, r3, #30
 800a3cc:	4606      	mov	r6, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	d507      	bpl.n	800a3e2 <__smakebuf_r+0x1c>
 800a3d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3d6:	6023      	str	r3, [r4, #0]
 800a3d8:	6123      	str	r3, [r4, #16]
 800a3da:	2301      	movs	r3, #1
 800a3dc:	6163      	str	r3, [r4, #20]
 800a3de:	b003      	add	sp, #12
 800a3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3e2:	466a      	mov	r2, sp
 800a3e4:	ab01      	add	r3, sp, #4
 800a3e6:	f7ff ffc9 	bl	800a37c <__swhatbuf_r>
 800a3ea:	9f00      	ldr	r7, [sp, #0]
 800a3ec:	4605      	mov	r5, r0
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f7fe fdd5 	bl	8008fa0 <_malloc_r>
 800a3f6:	b948      	cbnz	r0, 800a40c <__smakebuf_r+0x46>
 800a3f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3fc:	059a      	lsls	r2, r3, #22
 800a3fe:	d4ee      	bmi.n	800a3de <__smakebuf_r+0x18>
 800a400:	f023 0303 	bic.w	r3, r3, #3
 800a404:	f043 0302 	orr.w	r3, r3, #2
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	e7e2      	b.n	800a3d2 <__smakebuf_r+0xc>
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a416:	81a3      	strh	r3, [r4, #12]
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	6020      	str	r0, [r4, #0]
 800a41c:	b15b      	cbz	r3, 800a436 <__smakebuf_r+0x70>
 800a41e:	4630      	mov	r0, r6
 800a420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a424:	f000 f81e 	bl	800a464 <_isatty_r>
 800a428:	b128      	cbz	r0, 800a436 <__smakebuf_r+0x70>
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	f023 0303 	bic.w	r3, r3, #3
 800a430:	f043 0301 	orr.w	r3, r3, #1
 800a434:	81a3      	strh	r3, [r4, #12]
 800a436:	89a3      	ldrh	r3, [r4, #12]
 800a438:	431d      	orrs	r5, r3
 800a43a:	81a5      	strh	r5, [r4, #12]
 800a43c:	e7cf      	b.n	800a3de <__smakebuf_r+0x18>
	...

0800a440 <_fstat_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	2300      	movs	r3, #0
 800a444:	4d06      	ldr	r5, [pc, #24]	@ (800a460 <_fstat_r+0x20>)
 800a446:	4604      	mov	r4, r0
 800a448:	4608      	mov	r0, r1
 800a44a:	4611      	mov	r1, r2
 800a44c:	602b      	str	r3, [r5, #0]
 800a44e:	f7f7 ff1b 	bl	8002288 <_fstat>
 800a452:	1c43      	adds	r3, r0, #1
 800a454:	d102      	bne.n	800a45c <_fstat_r+0x1c>
 800a456:	682b      	ldr	r3, [r5, #0]
 800a458:	b103      	cbz	r3, 800a45c <_fstat_r+0x1c>
 800a45a:	6023      	str	r3, [r4, #0]
 800a45c:	bd38      	pop	{r3, r4, r5, pc}
 800a45e:	bf00      	nop
 800a460:	20000780 	.word	0x20000780

0800a464 <_isatty_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	2300      	movs	r3, #0
 800a468:	4d05      	ldr	r5, [pc, #20]	@ (800a480 <_isatty_r+0x1c>)
 800a46a:	4604      	mov	r4, r0
 800a46c:	4608      	mov	r0, r1
 800a46e:	602b      	str	r3, [r5, #0]
 800a470:	f7f7 ff19 	bl	80022a6 <_isatty>
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	d102      	bne.n	800a47e <_isatty_r+0x1a>
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	b103      	cbz	r3, 800a47e <_isatty_r+0x1a>
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	bd38      	pop	{r3, r4, r5, pc}
 800a480:	20000780 	.word	0x20000780

0800a484 <_init>:
 800a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a486:	bf00      	nop
 800a488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a48a:	bc08      	pop	{r3}
 800a48c:	469e      	mov	lr, r3
 800a48e:	4770      	bx	lr

0800a490 <_fini>:
 800a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a492:	bf00      	nop
 800a494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a496:	bc08      	pop	{r3}
 800a498:	469e      	mov	lr, r3
 800a49a:	4770      	bx	lr
